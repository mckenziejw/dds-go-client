//
// Copyright 2018, Juniper Networks, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// [detail]: This file hosts services related to JUNOS Device management.
// It provides APIs to:
// - Query state/status using Operational Commands
// - Set Configuration
// - Query and set Ephemeral Configuration

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: jnx_management_service.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// [brief]: Output format types for an operational command response
// [default]: OP_COMMAND_OUTPUT_JSON
type OpCommandOutputFormat int32

const (
	// [brief]: JSON format
	OpCommandOutputFormat_OP_COMMAND_OUTPUT_JSON OpCommandOutputFormat = 0
	// [brief]: XML format
	OpCommandOutputFormat_OP_COMMAND_OUTPUT_XML OpCommandOutputFormat = 1
	// [brief]: CLI Text format
	OpCommandOutputFormat_OP_COMMAND_OUTPUT_CLI OpCommandOutputFormat = 2
)

// Enum value maps for OpCommandOutputFormat.
var (
	OpCommandOutputFormat_name = map[int32]string{
		0: "OP_COMMAND_OUTPUT_JSON",
		1: "OP_COMMAND_OUTPUT_XML",
		2: "OP_COMMAND_OUTPUT_CLI",
	}
	OpCommandOutputFormat_value = map[string]int32{
		"OP_COMMAND_OUTPUT_JSON": 0,
		"OP_COMMAND_OUTPUT_XML":  1,
		"OP_COMMAND_OUTPUT_CLI":  2,
	}
)

func (x OpCommandOutputFormat) Enum() *OpCommandOutputFormat {
	p := new(OpCommandOutputFormat)
	*p = x
	return p
}

func (x OpCommandOutputFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpCommandOutputFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_management_service_proto_enumTypes[0].Descriptor()
}

func (OpCommandOutputFormat) Type() protoreflect.EnumType {
	return &file_jnx_management_service_proto_enumTypes[0]
}

func (x OpCommandOutputFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpCommandOutputFormat.Descriptor instead.
func (OpCommandOutputFormat) EnumDescriptor() ([]byte, []int) {
	return file_jnx_management_service_proto_rawDescGZIP(), []int{0}
}

// [brief]: Encoding format types for the returned configuration data
// [default]: CONFIG_GET_OUTPUT_JSON
type ConfigGetOutputFormat int32

const (
	// [brief]: JSON format
	ConfigGetOutputFormat_CONFIG_GET_OUTPUT_JSON ConfigGetOutputFormat = 0
	// [brief]: XML format
	ConfigGetOutputFormat_CONFIG_GET_OUTPUT_XML ConfigGetOutputFormat = 1
)

// Enum value maps for ConfigGetOutputFormat.
var (
	ConfigGetOutputFormat_name = map[int32]string{
		0: "CONFIG_GET_OUTPUT_JSON",
		1: "CONFIG_GET_OUTPUT_XML",
	}
	ConfigGetOutputFormat_value = map[string]int32{
		"CONFIG_GET_OUTPUT_JSON": 0,
		"CONFIG_GET_OUTPUT_XML":  1,
	}
)

func (x ConfigGetOutputFormat) Enum() *ConfigGetOutputFormat {
	p := new(ConfigGetOutputFormat)
	*p = x
	return p
}

func (x ConfigGetOutputFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigGetOutputFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_management_service_proto_enumTypes[1].Descriptor()
}

func (ConfigGetOutputFormat) Type() protoreflect.EnumType {
	return &file_jnx_management_service_proto_enumTypes[1]
}

func (x ConfigGetOutputFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigGetOutputFormat.Descriptor instead.
func (ConfigGetOutputFormat) EnumDescriptor() ([]byte, []int) {
	return file_jnx_management_service_proto_rawDescGZIP(), []int{1}
}

// [brief]: Type of operation associcated with a configuration set request
// [default]: CONFIG_OPERATION_UPDATE
type ConfigOperationType int32

const (
	// [brief]: Update the config
	ConfigOperationType_CONFIG_OPERATION_UPDATE ConfigOperationType = 0
)

// Enum value maps for ConfigOperationType.
var (
	ConfigOperationType_name = map[int32]string{
		0: "CONFIG_OPERATION_UPDATE",
	}
	ConfigOperationType_value = map[string]int32{
		"CONFIG_OPERATION_UPDATE": 0,
	}
)

func (x ConfigOperationType) Enum() *ConfigOperationType {
	p := new(ConfigOperationType)
	*p = x
	return p
}

func (x ConfigOperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigOperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_management_service_proto_enumTypes[2].Descriptor()
}

func (ConfigOperationType) Type() protoreflect.EnumType {
	return &file_jnx_management_service_proto_enumTypes[2]
}

func (x ConfigOperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigOperationType.Descriptor instead.
func (ConfigOperationType) EnumDescriptor() ([]byte, []int) {
	return file_jnx_management_service_proto_rawDescGZIP(), []int{2}
}

// [brief]: The load operation type to apply for the configuration set request.
// [default]: CONFIG_LOAD_MERGE
type ConfigLoadType int32

const (
	// [brief]: Combines existing configuration with payload
	// [detail]: Combine the configuration that is currently shown in the CLI with the
	// input configuration (default)
	ConfigLoadType_CONFIG_LOAD_MERGE ConfigLoadType = 0
	// [brief]: Replace parts of existing configuration
	// [detail]: Replace configuration data from the existing configuration with the ones
	// referred to by the 'replace' tags in the input configuration. These
	// replace tags come in various flavors depending on the config type:
	// text -> to be replaced config text is preceded by 'replace: '
	// xml  -> to be replaced element has attribute operation="replace"
	// json  -> to be replaced object has metadata tag encoded with '@':
	//             "object-to-be-replaced": {
	//               "@": {
	//                 "operation": "replace"
	//               }
	//             }
	//
	ConfigLoadType_CONFIG_LOAD_REPLACE ConfigLoadType = 1
	// [brief]: Replace existing configuration with payload configuration
	// [detail]: Discard the entire existing configuration and load the entire input
	// configuration. Marks every object as changed.
	ConfigLoadType_CONFIG_LOAD_OVERRIDE ConfigLoadType = 2
	// [brief]: Update existing configuration hierarchies with payload configuration
	// [detail]: Update existing configuration hierarchies with corresponding data from
	// the input configuration. Marks only affected objects as changed
	ConfigLoadType_CONFIG_LOAD_UPDATE ConfigLoadType = 3
	// [brief]: Load input configuration consisting of set commands
	// [detail]: Load input configuration consisting of set configuration mode commands.
	// Input config can contain any configuration mode command, such as set,
	// delete, edit, exit, and top.
	ConfigLoadType_CONFIG_LOAD_SET ConfigLoadType = 4
)

// Enum value maps for ConfigLoadType.
var (
	ConfigLoadType_name = map[int32]string{
		0: "CONFIG_LOAD_MERGE",
		1: "CONFIG_LOAD_REPLACE",
		2: "CONFIG_LOAD_OVERRIDE",
		3: "CONFIG_LOAD_UPDATE",
		4: "CONFIG_LOAD_SET",
	}
	ConfigLoadType_value = map[string]int32{
		"CONFIG_LOAD_MERGE":    0,
		"CONFIG_LOAD_REPLACE":  1,
		"CONFIG_LOAD_OVERRIDE": 2,
		"CONFIG_LOAD_UPDATE":   3,
		"CONFIG_LOAD_SET":      4,
	}
)

func (x ConfigLoadType) Enum() *ConfigLoadType {
	p := new(ConfigLoadType)
	*p = x
	return p
}

func (x ConfigLoadType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigLoadType) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_management_service_proto_enumTypes[3].Descriptor()
}

func (ConfigLoadType) Type() protoreflect.EnumType {
	return &file_jnx_management_service_proto_enumTypes[3]
}

func (x ConfigLoadType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigLoadType.Descriptor instead.
func (ConfigLoadType) EnumDescriptor() ([]byte, []int) {
	return file_jnx_management_service_proto_rawDescGZIP(), []int{3}
}

// [brief]: Type of commit to run after loading the configuration
// [default]: CONFIG_COMMIT
type ConfigCommitType int32

const (
	// [brief]: Regular commit on current routing engine
	ConfigCommitType_CONFIG_COMMIT ConfigCommitType = 0
	// [brief]: Sync and commit config to both routing engines
	ConfigCommitType_CONFIG_COMMIT_SYNCHRONIZE ConfigCommitType = 1
)

// Enum value maps for ConfigCommitType.
var (
	ConfigCommitType_name = map[int32]string{
		0: "CONFIG_COMMIT",
		1: "CONFIG_COMMIT_SYNCHRONIZE",
	}
	ConfigCommitType_value = map[string]int32{
		"CONFIG_COMMIT":             0,
		"CONFIG_COMMIT_SYNCHRONIZE": 1,
	}
)

func (x ConfigCommitType) Enum() *ConfigCommitType {
	p := new(ConfigCommitType)
	*p = x
	return p
}

func (x ConfigCommitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigCommitType) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_management_service_proto_enumTypes[4].Descriptor()
}

func (ConfigCommitType) Type() protoreflect.EnumType {
	return &file_jnx_management_service_proto_enumTypes[4]
}

func (x ConfigCommitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigCommitType.Descriptor instead.
func (ConfigCommitType) EnumDescriptor() ([]byte, []int) {
	return file_jnx_management_service_proto_rawDescGZIP(), []int{4}
}

// [brief]: Config path from which to retrieve the configuration data
// [detail]: Config path from which to retrieve the configuration data.
// The 'id' needs to be set for each path request to help associate the
// responses to the corresponding path.
type ConfigPathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Identifier for the request
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// [brief]: Data model path to retrieve
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *ConfigPathRequest) Reset() {
	*x = ConfigPathRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_management_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigPathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigPathRequest) ProtoMessage() {}

func (x *ConfigPathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_management_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigPathRequest.ProtoReflect.Descriptor instead.
func (*ConfigPathRequest) Descriptor() ([]byte, []int) {
	return file_jnx_management_service_proto_rawDescGZIP(), []int{0}
}

func (x *ConfigPathRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConfigPathRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// [brief]: Configuration commit options
// [detail]: Configuration commit options
type ConfigCommit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Specify the type of commit operation
	// [detail]: This will specify the type of commit operation
	// commit operation can be commit or commit-synchronize
	Type ConfigCommitType `protobuf:"varint,1,opt,name=type,proto3,enum=jnx.jet.management.ConfigCommitType" json:"type,omitempty"`
	// [brief]: Specify the comment for the commit log
	Comment string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *ConfigCommit) Reset() {
	*x = ConfigCommit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_management_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigCommit) ProtoMessage() {}

func (x *ConfigCommit) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_management_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigCommit.ProtoReflect.Descriptor instead.
func (*ConfigCommit) Descriptor() ([]byte, []int) {
	return file_jnx_management_service_proto_rawDescGZIP(), []int{1}
}

func (x *ConfigCommit) GetType() ConfigCommitType {
	if x != nil {
		return x.Type
	}
	return ConfigCommitType_CONFIG_COMMIT
}

func (x *ConfigCommit) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

// [brief]: Operational command request type to pass to the OpCommandGet RPC
// [detail]: Operational command request type to pass to the OpCommandGet RPC
type OpCommandGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Command to be executed, represented in the required format
	//
	// Types that are assignable to Command:
	//	*OpCommandGetRequest_CliCommand
	//	*OpCommandGetRequest_XmlCommand
	Command isOpCommandGetRequest_Command `protobuf_oneof:"command"`
	// [brief]: Output format, default is JSON
	OutFormat OpCommandOutputFormat `protobuf:"varint,3,opt,name=out_format,json=outFormat,proto3,enum=jnx.jet.management.OpCommandOutputFormat" json:"out_format,omitempty"`
}

func (x *OpCommandGetRequest) Reset() {
	*x = OpCommandGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_management_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpCommandGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpCommandGetRequest) ProtoMessage() {}

func (x *OpCommandGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_management_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpCommandGetRequest.ProtoReflect.Descriptor instead.
func (*OpCommandGetRequest) Descriptor() ([]byte, []int) {
	return file_jnx_management_service_proto_rawDescGZIP(), []int{2}
}

func (m *OpCommandGetRequest) GetCommand() isOpCommandGetRequest_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (x *OpCommandGetRequest) GetCliCommand() string {
	if x, ok := x.GetCommand().(*OpCommandGetRequest_CliCommand); ok {
		return x.CliCommand
	}
	return ""
}

func (x *OpCommandGetRequest) GetXmlCommand() string {
	if x, ok := x.GetCommand().(*OpCommandGetRequest_XmlCommand); ok {
		return x.XmlCommand
	}
	return ""
}

func (x *OpCommandGetRequest) GetOutFormat() OpCommandOutputFormat {
	if x != nil {
		return x.OutFormat
	}
	return OpCommandOutputFormat_OP_COMMAND_OUTPUT_JSON
}

type isOpCommandGetRequest_Command interface {
	isOpCommandGetRequest_Command()
}

type OpCommandGetRequest_CliCommand struct {
	// [brief]: standard cli command input
	CliCommand string `protobuf:"bytes,1,opt,name=cli_command,json=cliCommand,proto3,oneof"`
}

type OpCommandGetRequest_XmlCommand struct {
	// [brief]: xml command input
	XmlCommand string `protobuf:"bytes,2,opt,name=xml_command,json=xmlCommand,proto3,oneof"`
}

func (*OpCommandGetRequest_CliCommand) isOpCommandGetRequest_Command() {}

func (*OpCommandGetRequest_XmlCommand) isOpCommandGetRequest_Command() {}

// [brief]: Request message for executing an operational command
// [detail]: Request message for executing an operational command
type OpCommandGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: RPC execution status information
	Status *RpcStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// [brief]: Operation command output
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *OpCommandGetResponse) Reset() {
	*x = OpCommandGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_management_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpCommandGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpCommandGetResponse) ProtoMessage() {}

func (x *OpCommandGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_management_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpCommandGetResponse.ProtoReflect.Descriptor instead.
func (*OpCommandGetResponse) Descriptor() ([]byte, []int) {
	return file_jnx_management_service_proto_rawDescGZIP(), []int{3}
}

func (x *OpCommandGetResponse) GetStatus() *RpcStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *OpCommandGetResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// [brief]: Request for retrieving configuration data from an ephemeral database
// [detail]: Request for retrieving configuration data from an ephemeral database
type EphemeralConfigGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Encoding format for the returned config
	Encoding ConfigGetOutputFormat `protobuf:"varint,1,opt,name=encoding,proto3,enum=jnx.jet.management.ConfigGetOutputFormat" json:"encoding,omitempty"`
	// [brief]: List of configuration paths to retrieve config for
	ConfigRequests []*ConfigPathRequest `protobuf:"bytes,2,rep,name=config_requests,json=configRequests,proto3" json:"config_requests,omitempty"`
	// [brief]: Name of ephemeral configuration database instance
	// [detail]: Name of the Ephemeral configuration database instance to run this
	// request on. This instance should have been configured previously.
	// If instance_name is an empty string (default behavior), the default
	// Ephemeral instance will be used.
	InstanceName string `protobuf:"bytes,3,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
}

func (x *EphemeralConfigGetRequest) Reset() {
	*x = EphemeralConfigGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_management_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EphemeralConfigGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EphemeralConfigGetRequest) ProtoMessage() {}

func (x *EphemeralConfigGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_management_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EphemeralConfigGetRequest.ProtoReflect.Descriptor instead.
func (*EphemeralConfigGetRequest) Descriptor() ([]byte, []int) {
	return file_jnx_management_service_proto_rawDescGZIP(), []int{4}
}

func (x *EphemeralConfigGetRequest) GetEncoding() ConfigGetOutputFormat {
	if x != nil {
		return x.Encoding
	}
	return ConfigGetOutputFormat_CONFIG_GET_OUTPUT_JSON
}

func (x *EphemeralConfigGetRequest) GetConfigRequests() []*ConfigPathRequest {
	if x != nil {
		return x.ConfigRequests
	}
	return nil
}

func (x *EphemeralConfigGetRequest) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

// [brief]: Request type to represent the config responses from a EphemeralConfigGet RPC.
// [detail]: Request type to represent the config responses from a EphemeralConfigGet RPC.
type EphemeralConfigGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: RPC execution status information
	Status *RpcStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// [brief]: List of responses for each configuration path request
	ConfigResponses []*EphemeralConfigGetResponse_ConfigPathResponse `protobuf:"bytes,3,rep,name=config_responses,json=configResponses,proto3" json:"config_responses,omitempty"`
}

func (x *EphemeralConfigGetResponse) Reset() {
	*x = EphemeralConfigGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_management_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EphemeralConfigGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EphemeralConfigGetResponse) ProtoMessage() {}

func (x *EphemeralConfigGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_management_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EphemeralConfigGetResponse.ProtoReflect.Descriptor instead.
func (*EphemeralConfigGetResponse) Descriptor() ([]byte, []int) {
	return file_jnx_management_service_proto_rawDescGZIP(), []int{5}
}

func (x *EphemeralConfigGetResponse) GetStatus() *RpcStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *EphemeralConfigGetResponse) GetConfigResponses() []*EphemeralConfigGetResponse_ConfigPathResponse {
	if x != nil {
		return x.ConfigResponses
	}
	return nil
}

// [brief]: Request type for Ephemeral config database
// [detail]: Request type to represent a group of config operations to be applied to the
// Ephemeral config database.
type EphemeralConfigSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: List of config operations to apply together as part of this request
	ConfigOperations []*EphemeralConfigSetRequest_ConfigOperation `protobuf:"bytes,1,rep,name=config_operations,json=configOperations,proto3" json:"config_operations,omitempty"`
	// [brief]: Name of the Ephemeral configuration database instance
	// [detail]: Name of the Ephemeral configuration database instance to run this
	// request on. This instance should have been configured previously.
	// If instance_name is an empty string (default behavior), the default
	// Ephemeral instance will be used.
	InstanceName string `protobuf:"bytes,2,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	// [brief]: Enable validation of config
	ValidateConfig bool `protobuf:"varint,3,opt,name=validate_config,json=validateConfig,proto3" json:"validate_config,omitempty"`
	// [brief]: Do a load only operation
	LoadOnly bool `protobuf:"varint,4,opt,name=load_only,json=loadOnly,proto3" json:"load_only,omitempty"`
}

func (x *EphemeralConfigSetRequest) Reset() {
	*x = EphemeralConfigSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_management_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EphemeralConfigSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EphemeralConfigSetRequest) ProtoMessage() {}

func (x *EphemeralConfigSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_management_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EphemeralConfigSetRequest.ProtoReflect.Descriptor instead.
func (*EphemeralConfigSetRequest) Descriptor() ([]byte, []int) {
	return file_jnx_management_service_proto_rawDescGZIP(), []int{6}
}

func (x *EphemeralConfigSetRequest) GetConfigOperations() []*EphemeralConfigSetRequest_ConfigOperation {
	if x != nil {
		return x.ConfigOperations
	}
	return nil
}

func (x *EphemeralConfigSetRequest) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *EphemeralConfigSetRequest) GetValidateConfig() bool {
	if x != nil {
		return x.ValidateConfig
	}
	return false
}

func (x *EphemeralConfigSetRequest) GetLoadOnly() bool {
	if x != nil {
		return x.LoadOnly
	}
	return false
}

// [brief]: Request type to represent the config operation
// [detail]: Request type to represent the config operation responses from a
// EphemeralConfigSet RPC.
type EphemeralConfigSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: RPC execution status information
	Status *RpcStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// [brief]: List of responses for each configuration operation
	OperationResponses []*EphemeralConfigSetResponse_ConfigOperationResponse `protobuf:"bytes,3,rep,name=operation_responses,json=operationResponses,proto3" json:"operation_responses,omitempty"`
}

func (x *EphemeralConfigSetResponse) Reset() {
	*x = EphemeralConfigSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_management_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EphemeralConfigSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EphemeralConfigSetResponse) ProtoMessage() {}

func (x *EphemeralConfigSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_management_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EphemeralConfigSetResponse.ProtoReflect.Descriptor instead.
func (*EphemeralConfigSetResponse) Descriptor() ([]byte, []int) {
	return file_jnx_management_service_proto_rawDescGZIP(), []int{7}
}

func (x *EphemeralConfigSetResponse) GetStatus() *RpcStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *EphemeralConfigSetResponse) GetOperationResponses() []*EphemeralConfigSetResponse_ConfigOperationResponse {
	if x != nil {
		return x.OperationResponses
	}
	return nil
}

// [brief]: Request type of config operation
// [detail]: Request type to represent the config operation to be performed on the
// static Junos config database.
type ConfigSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Input configuration data in the relevant format
	//
	// Types that are assignable to Config:
	//	*ConfigSetRequest_XmlConfig
	//	*ConfigSetRequest_JsonConfig
	//	*ConfigSetRequest_TextConfig
	Config isConfigSetRequest_Config `protobuf_oneof:"config"`
	// [brief]: Type of config load operation
	LoadType ConfigLoadType `protobuf:"varint,4,opt,name=load_type,json=loadType,proto3,enum=jnx.jet.management.ConfigLoadType" json:"load_type,omitempty"`
	// [brief]: Commit info associated with this config operation
	Commit *ConfigCommit `protobuf:"bytes,5,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (x *ConfigSetRequest) Reset() {
	*x = ConfigSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_management_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSetRequest) ProtoMessage() {}

func (x *ConfigSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_management_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSetRequest.ProtoReflect.Descriptor instead.
func (*ConfigSetRequest) Descriptor() ([]byte, []int) {
	return file_jnx_management_service_proto_rawDescGZIP(), []int{8}
}

func (m *ConfigSetRequest) GetConfig() isConfigSetRequest_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *ConfigSetRequest) GetXmlConfig() string {
	if x, ok := x.GetConfig().(*ConfigSetRequest_XmlConfig); ok {
		return x.XmlConfig
	}
	return ""
}

func (x *ConfigSetRequest) GetJsonConfig() string {
	if x, ok := x.GetConfig().(*ConfigSetRequest_JsonConfig); ok {
		return x.JsonConfig
	}
	return ""
}

func (x *ConfigSetRequest) GetTextConfig() string {
	if x, ok := x.GetConfig().(*ConfigSetRequest_TextConfig); ok {
		return x.TextConfig
	}
	return ""
}

func (x *ConfigSetRequest) GetLoadType() ConfigLoadType {
	if x != nil {
		return x.LoadType
	}
	return ConfigLoadType_CONFIG_LOAD_MERGE
}

func (x *ConfigSetRequest) GetCommit() *ConfigCommit {
	if x != nil {
		return x.Commit
	}
	return nil
}

type isConfigSetRequest_Config interface {
	isConfigSetRequest_Config()
}

type ConfigSetRequest_XmlConfig struct {
	// [brief]: config in xml format
	XmlConfig string `protobuf:"bytes,1,opt,name=xml_config,json=xmlConfig,proto3,oneof"`
}

type ConfigSetRequest_JsonConfig struct {
	// [brief]: config in json format
	JsonConfig string `protobuf:"bytes,2,opt,name=json_config,json=jsonConfig,proto3,oneof"`
}

type ConfigSetRequest_TextConfig struct {
	// [brief]: config in text format
	TextConfig string `protobuf:"bytes,3,opt,name=text_config,json=textConfig,proto3,oneof"`
}

func (*ConfigSetRequest_XmlConfig) isConfigSetRequest_Config() {}

func (*ConfigSetRequest_JsonConfig) isConfigSetRequest_Config() {}

func (*ConfigSetRequest_TextConfig) isConfigSetRequest_Config() {}

// [brief]: Request type of config operation
// [detail]: Request type to represent the config operation response from a ConfigSet RPC.
type ConfigSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: RPC execution status information
	Status *RpcStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ConfigSetResponse) Reset() {
	*x = ConfigSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_management_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSetResponse) ProtoMessage() {}

func (x *ConfigSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_management_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSetResponse.ProtoReflect.Descriptor instead.
func (*ConfigSetResponse) Descriptor() ([]byte, []int) {
	return file_jnx_management_service_proto_rawDescGZIP(), []int{9}
}

func (x *ConfigSetResponse) GetStatus() *RpcStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// [brief]: Response to ConfigPathRequest
// [detail]: Response corresponding to a ConfigPathRequest message sent over the
// EphemeralConfigGet RPC
type EphemeralConfigGetResponse_ConfigPathResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Status code and message for the corresponding ConfigPathRequest
	Status *RpcStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// [brief]: Response id corresponding to the ConfigPathRequest id
	// [detail]: Response id corresponding to the ConfigPathRequest id. This helps
	// map the config data retrieved to the requested config path.
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// [brief]: Requested config path
	Path string `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	// [brief]: Configuration data for the requested config path
	// [detail]: Configuration data for the requested config path. This data maybe
	// encoded using the encoding specified in set-data-encoding, or
	// encoding specified in the request.
	Value string `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EphemeralConfigGetResponse_ConfigPathResponse) Reset() {
	*x = EphemeralConfigGetResponse_ConfigPathResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_management_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EphemeralConfigGetResponse_ConfigPathResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EphemeralConfigGetResponse_ConfigPathResponse) ProtoMessage() {}

func (x *EphemeralConfigGetResponse_ConfigPathResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_management_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EphemeralConfigGetResponse_ConfigPathResponse.ProtoReflect.Descriptor instead.
func (*EphemeralConfigGetResponse_ConfigPathResponse) Descriptor() ([]byte, []int) {
	return file_jnx_management_service_proto_rawDescGZIP(), []int{5, 0}
}

func (x *EphemeralConfigGetResponse_ConfigPathResponse) GetStatus() *RpcStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *EphemeralConfigGetResponse_ConfigPathResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EphemeralConfigGetResponse_ConfigPathResponse) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *EphemeralConfigGetResponse_ConfigPathResponse) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// [brief]: A message to represent a single config operation.
// [detail]: A message to represent a single config operation.
type EphemeralConfigSetRequest_ConfigOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Identifier for this config operation
	// [detail]: Identifier for this config operation. The corresponding response
	// will contain this id to allow clients to map requests to correct
	// operation responses.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// [brief]: Type of configuration modification
	// [detail]: The type of configuration modification requested for the
	// corresponding path.Note that some commands, such as 'delete'
	// do not specify any associated data with the path
	Operation ConfigOperationType `protobuf:"varint,2,opt,name=operation,proto3,enum=jnx.jet.management.ConfigOperationType" json:"operation,omitempty"`
	// [brief]: Configuration path to apply the operation
	// [detail]: The configuration path to apply the operation to. This currently
	// only supports the root configuration path "/" and any other string
	// will throw an error. This implies the input config string must be a
	// fully qualified config tree relative to the root.
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// [brief]: Input configuration data in the relevant format.
	//
	// Types that are assignable to Value:
	//	*EphemeralConfigSetRequest_ConfigOperation_XmlConfig
	//	*EphemeralConfigSetRequest_ConfigOperation_JsonConfig
	Value isEphemeralConfigSetRequest_ConfigOperation_Value `protobuf_oneof:"value"`
}

func (x *EphemeralConfigSetRequest_ConfigOperation) Reset() {
	*x = EphemeralConfigSetRequest_ConfigOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_management_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EphemeralConfigSetRequest_ConfigOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EphemeralConfigSetRequest_ConfigOperation) ProtoMessage() {}

func (x *EphemeralConfigSetRequest_ConfigOperation) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_management_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EphemeralConfigSetRequest_ConfigOperation.ProtoReflect.Descriptor instead.
func (*EphemeralConfigSetRequest_ConfigOperation) Descriptor() ([]byte, []int) {
	return file_jnx_management_service_proto_rawDescGZIP(), []int{6, 0}
}

func (x *EphemeralConfigSetRequest_ConfigOperation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EphemeralConfigSetRequest_ConfigOperation) GetOperation() ConfigOperationType {
	if x != nil {
		return x.Operation
	}
	return ConfigOperationType_CONFIG_OPERATION_UPDATE
}

func (x *EphemeralConfigSetRequest_ConfigOperation) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (m *EphemeralConfigSetRequest_ConfigOperation) GetValue() isEphemeralConfigSetRequest_ConfigOperation_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *EphemeralConfigSetRequest_ConfigOperation) GetXmlConfig() string {
	if x, ok := x.GetValue().(*EphemeralConfigSetRequest_ConfigOperation_XmlConfig); ok {
		return x.XmlConfig
	}
	return ""
}

func (x *EphemeralConfigSetRequest_ConfigOperation) GetJsonConfig() string {
	if x, ok := x.GetValue().(*EphemeralConfigSetRequest_ConfigOperation_JsonConfig); ok {
		return x.JsonConfig
	}
	return ""
}

type isEphemeralConfigSetRequest_ConfigOperation_Value interface {
	isEphemeralConfigSetRequest_ConfigOperation_Value()
}

type EphemeralConfigSetRequest_ConfigOperation_XmlConfig struct {
	// [brief]: config in xml format
	XmlConfig string `protobuf:"bytes,4,opt,name=xml_config,json=xmlConfig,proto3,oneof"`
}

type EphemeralConfigSetRequest_ConfigOperation_JsonConfig struct {
	// [brief]: config in json format
	JsonConfig string `protobuf:"bytes,5,opt,name=json_config,json=jsonConfig,proto3,oneof"`
}

func (*EphemeralConfigSetRequest_ConfigOperation_XmlConfig) isEphemeralConfigSetRequest_ConfigOperation_Value() {
}

func (*EphemeralConfigSetRequest_ConfigOperation_JsonConfig) isEphemeralConfigSetRequest_ConfigOperation_Value() {
}

// [brief]: A message representing response to a single config operation request
// [detail]: A message representing response to a single config operation request
type EphemeralConfigSetResponse_ConfigOperationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Status code and message for config operation request
	Status *RpcStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// [brief]: Response id corresponding to the ConfigRequest id
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *EphemeralConfigSetResponse_ConfigOperationResponse) Reset() {
	*x = EphemeralConfigSetResponse_ConfigOperationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_management_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EphemeralConfigSetResponse_ConfigOperationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EphemeralConfigSetResponse_ConfigOperationResponse) ProtoMessage() {}

func (x *EphemeralConfigSetResponse_ConfigOperationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_management_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EphemeralConfigSetResponse_ConfigOperationResponse.ProtoReflect.Descriptor instead.
func (*EphemeralConfigSetResponse_ConfigOperationResponse) Descriptor() ([]byte, []int) {
	return file_jnx_management_service_proto_rawDescGZIP(), []int{7, 0}
}

func (x *EphemeralConfigSetResponse_ConfigOperationResponse) GetStatus() *RpcStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *EphemeralConfigSetResponse_ConfigOperationResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_jnx_management_service_proto protoreflect.FileDescriptor

var file_jnx_management_service_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x6a, 0x6e, 0x78, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x1a, 0x1b, 0x6a, 0x6e, 0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x37, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x62, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xb0, 0x01, 0x0a,
	0x13, 0x4f, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6c, 0x69,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0b, 0x78, 0x6d, 0x6c, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a,
	0x78, 0x6d, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x48, 0x0a, 0x0a, 0x6f, 0x75,
	0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29,
	0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22,
	0x6d, 0x0a, 0x14, 0x4f, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65,
	0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x4a, 0x04,
	0x08, 0x02, 0x10, 0x03, 0x52, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xd7,
	0x01, 0x0a, 0x19, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x08,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29,
	0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x4e, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6a,
	0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe1, 0x02, 0x0a, 0x1a, 0x45, 0x70, 0x68,
	0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65,
	0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x6c, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65,
	0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x74, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x1a, 0x91, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4a, 0x04, 0x08, 0x02,
	0x10, 0x03, 0x52, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x4a, 0x04, 0x08, 0x02,
	0x10, 0x03, 0x52, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xbe, 0x03, 0x0a,
	0x19, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6a, 0x0a, 0x11, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x70, 0x68, 0x65, 0x6d,
	0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x6e, 0x6c,
	0x79, 0x1a, 0xc9, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a,
	0x65, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x1f, 0x0a, 0x0a, 0x78, 0x6d, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x78, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x21, 0x0a, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc6, 0x02,
	0x0a, 0x1a, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a,
	0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x70,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x77, 0x0a, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6a,
	0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x1a, 0x6c, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x52, 0x08, 0x73, 0x75,
	0x62, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x52, 0x08, 0x73, 0x75,
	0x62, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xfe, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0a, 0x78,
	0x6d, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x09, 0x78, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0b,
	0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x21, 0x0a, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x3f, 0x0a, 0x09, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x08, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x56, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a,
	0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x70,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4a,
	0x04, 0x08, 0x02, 0x10, 0x03, 0x52, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x2a,
	0x69, 0x0a, 0x15, 0x4f, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x50, 0x5f, 0x43,
	0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x4a, 0x53,
	0x4f, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x50, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41,
	0x4e, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x58, 0x4d, 0x4c, 0x10, 0x01, 0x12,
	0x19, 0x0a, 0x15, 0x4f, 0x50, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x4f, 0x55,
	0x54, 0x50, 0x55, 0x54, 0x5f, 0x43, 0x4c, 0x49, 0x10, 0x02, 0x2a, 0x4e, 0x0a, 0x15, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x47, 0x45,
	0x54, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x4f, 0x55,
	0x54, 0x50, 0x55, 0x54, 0x5f, 0x58, 0x4d, 0x4c, 0x10, 0x01, 0x2a, 0x32, 0x0a, 0x13, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x00, 0x2a, 0x87,
	0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4c, 0x4f, 0x41, 0x44,
	0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4c, 0x4f, 0x41, 0x44,
	0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4c, 0x4f,
	0x41, 0x44, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x04, 0x2a, 0x44, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x10, 0x00, 0x12,
	0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54,
	0x5f, 0x53, 0x59, 0x4e, 0x43, 0x48, 0x52, 0x4f, 0x4e, 0x49, 0x5a, 0x45, 0x10, 0x01, 0x32, 0xbd,
	0x03, 0x0a, 0x0a, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x65, 0x0a,
	0x0c, 0x4f, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x47, 0x65, 0x74, 0x12, 0x27, 0x2e,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x4f, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x70, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x5a, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65,
	0x74, 0x12, 0x24, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65,
	0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x75, 0x0a, 0x12, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x12, 0x2d, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x70, 0x68, 0x65,
	0x6d, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x70, 0x68, 0x65, 0x6d,
	0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x12, 0x45, 0x70, 0x68, 0x65, 0x6d,
	0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x12, 0x2d, 0x2e,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6a,
	0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x24,
	0x5a, 0x11, 0x6c, 0x61, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x82, 0xb5, 0x18, 0x05, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x8a, 0xb5, 0x18, 0x04,
	0x31, 0x38, 0x2e, 0x34, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_jnx_management_service_proto_rawDescOnce sync.Once
	file_jnx_management_service_proto_rawDescData = file_jnx_management_service_proto_rawDesc
)

func file_jnx_management_service_proto_rawDescGZIP() []byte {
	file_jnx_management_service_proto_rawDescOnce.Do(func() {
		file_jnx_management_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_jnx_management_service_proto_rawDescData)
	})
	return file_jnx_management_service_proto_rawDescData
}

var file_jnx_management_service_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_jnx_management_service_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_jnx_management_service_proto_goTypes = []interface{}{
	(OpCommandOutputFormat)(0),                                 // 0: jnx.jet.management.OpCommandOutputFormat
	(ConfigGetOutputFormat)(0),                                 // 1: jnx.jet.management.ConfigGetOutputFormat
	(ConfigOperationType)(0),                                   // 2: jnx.jet.management.ConfigOperationType
	(ConfigLoadType)(0),                                        // 3: jnx.jet.management.ConfigLoadType
	(ConfigCommitType)(0),                                      // 4: jnx.jet.management.ConfigCommitType
	(*ConfigPathRequest)(nil),                                  // 5: jnx.jet.management.ConfigPathRequest
	(*ConfigCommit)(nil),                                       // 6: jnx.jet.management.ConfigCommit
	(*OpCommandGetRequest)(nil),                                // 7: jnx.jet.management.OpCommandGetRequest
	(*OpCommandGetResponse)(nil),                               // 8: jnx.jet.management.OpCommandGetResponse
	(*EphemeralConfigGetRequest)(nil),                          // 9: jnx.jet.management.EphemeralConfigGetRequest
	(*EphemeralConfigGetResponse)(nil),                         // 10: jnx.jet.management.EphemeralConfigGetResponse
	(*EphemeralConfigSetRequest)(nil),                          // 11: jnx.jet.management.EphemeralConfigSetRequest
	(*EphemeralConfigSetResponse)(nil),                         // 12: jnx.jet.management.EphemeralConfigSetResponse
	(*ConfigSetRequest)(nil),                                   // 13: jnx.jet.management.ConfigSetRequest
	(*ConfigSetResponse)(nil),                                  // 14: jnx.jet.management.ConfigSetResponse
	(*EphemeralConfigGetResponse_ConfigPathResponse)(nil),      // 15: jnx.jet.management.EphemeralConfigGetResponse.ConfigPathResponse
	(*EphemeralConfigSetRequest_ConfigOperation)(nil),          // 16: jnx.jet.management.EphemeralConfigSetRequest.ConfigOperation
	(*EphemeralConfigSetResponse_ConfigOperationResponse)(nil), // 17: jnx.jet.management.EphemeralConfigSetResponse.ConfigOperationResponse
	(*RpcStatus)(nil),                                          // 18: jnx.jet.common.RpcStatus
}
var file_jnx_management_service_proto_depIdxs = []int32{
	4,  // 0: jnx.jet.management.ConfigCommit.type:type_name -> jnx.jet.management.ConfigCommitType
	0,  // 1: jnx.jet.management.OpCommandGetRequest.out_format:type_name -> jnx.jet.management.OpCommandOutputFormat
	18, // 2: jnx.jet.management.OpCommandGetResponse.status:type_name -> jnx.jet.common.RpcStatus
	1,  // 3: jnx.jet.management.EphemeralConfigGetRequest.encoding:type_name -> jnx.jet.management.ConfigGetOutputFormat
	5,  // 4: jnx.jet.management.EphemeralConfigGetRequest.config_requests:type_name -> jnx.jet.management.ConfigPathRequest
	18, // 5: jnx.jet.management.EphemeralConfigGetResponse.status:type_name -> jnx.jet.common.RpcStatus
	15, // 6: jnx.jet.management.EphemeralConfigGetResponse.config_responses:type_name -> jnx.jet.management.EphemeralConfigGetResponse.ConfigPathResponse
	16, // 7: jnx.jet.management.EphemeralConfigSetRequest.config_operations:type_name -> jnx.jet.management.EphemeralConfigSetRequest.ConfigOperation
	18, // 8: jnx.jet.management.EphemeralConfigSetResponse.status:type_name -> jnx.jet.common.RpcStatus
	17, // 9: jnx.jet.management.EphemeralConfigSetResponse.operation_responses:type_name -> jnx.jet.management.EphemeralConfigSetResponse.ConfigOperationResponse
	3,  // 10: jnx.jet.management.ConfigSetRequest.load_type:type_name -> jnx.jet.management.ConfigLoadType
	6,  // 11: jnx.jet.management.ConfigSetRequest.commit:type_name -> jnx.jet.management.ConfigCommit
	18, // 12: jnx.jet.management.ConfigSetResponse.status:type_name -> jnx.jet.common.RpcStatus
	18, // 13: jnx.jet.management.EphemeralConfigGetResponse.ConfigPathResponse.status:type_name -> jnx.jet.common.RpcStatus
	2,  // 14: jnx.jet.management.EphemeralConfigSetRequest.ConfigOperation.operation:type_name -> jnx.jet.management.ConfigOperationType
	18, // 15: jnx.jet.management.EphemeralConfigSetResponse.ConfigOperationResponse.status:type_name -> jnx.jet.common.RpcStatus
	7,  // 16: jnx.jet.management.Management.OpCommandGet:input_type -> jnx.jet.management.OpCommandGetRequest
	13, // 17: jnx.jet.management.Management.ConfigSet:input_type -> jnx.jet.management.ConfigSetRequest
	9,  // 18: jnx.jet.management.Management.EphemeralConfigGet:input_type -> jnx.jet.management.EphemeralConfigGetRequest
	11, // 19: jnx.jet.management.Management.EphemeralConfigSet:input_type -> jnx.jet.management.EphemeralConfigSetRequest
	8,  // 20: jnx.jet.management.Management.OpCommandGet:output_type -> jnx.jet.management.OpCommandGetResponse
	14, // 21: jnx.jet.management.Management.ConfigSet:output_type -> jnx.jet.management.ConfigSetResponse
	10, // 22: jnx.jet.management.Management.EphemeralConfigGet:output_type -> jnx.jet.management.EphemeralConfigGetResponse
	12, // 23: jnx.jet.management.Management.EphemeralConfigSet:output_type -> jnx.jet.management.EphemeralConfigSetResponse
	20, // [20:24] is the sub-list for method output_type
	16, // [16:20] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_jnx_management_service_proto_init() }
func file_jnx_management_service_proto_init() {
	if File_jnx_management_service_proto != nil {
		return
	}
	file_jnx_common_base_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_jnx_management_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigPathRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_management_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigCommit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_management_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpCommandGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_management_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpCommandGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_management_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EphemeralConfigGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_management_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EphemeralConfigGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_management_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EphemeralConfigSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_management_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EphemeralConfigSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_management_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_management_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_management_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EphemeralConfigGetResponse_ConfigPathResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_management_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EphemeralConfigSetRequest_ConfigOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_management_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EphemeralConfigSetResponse_ConfigOperationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_jnx_management_service_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*OpCommandGetRequest_CliCommand)(nil),
		(*OpCommandGetRequest_XmlCommand)(nil),
	}
	file_jnx_management_service_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*ConfigSetRequest_XmlConfig)(nil),
		(*ConfigSetRequest_JsonConfig)(nil),
		(*ConfigSetRequest_TextConfig)(nil),
	}
	file_jnx_management_service_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*EphemeralConfigSetRequest_ConfigOperation_XmlConfig)(nil),
		(*EphemeralConfigSetRequest_ConfigOperation_JsonConfig)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_jnx_management_service_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_jnx_management_service_proto_goTypes,
		DependencyIndexes: file_jnx_management_service_proto_depIdxs,
		EnumInfos:         file_jnx_management_service_proto_enumTypes,
		MessageInfos:      file_jnx_management_service_proto_msgTypes,
	}.Build()
	File_jnx_management_service_proto = out.File
	file_jnx_management_service_proto_rawDesc = nil
	file_jnx_management_service_proto_goTypes = nil
	file_jnx_management_service_proto_depIdxs = nil
}
