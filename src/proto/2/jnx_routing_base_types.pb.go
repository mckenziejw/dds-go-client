//
// Copyright 2018-2020, Juniper Networks, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: jnx_routing_base_types.proto

// [brief]: JET Routing Base Package.

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// [brief]: Route Table Format used by server.
// [detail]: The table format allows the client to request the format that
// the server should use to represent tables in replies sent by the server
// to the client.
// [default]: TABLE_STRING
type RouteTableFormat int32

const (
	// [brief]: The server will represent tables by name as strings.
	RouteTableFormat_TABLE_STRING RouteTableFormat = 0
	// [brief]: The server will represent tables by RPD table ID.
	RouteTableFormat_TABLE_ID RouteTableFormat = 1
)

// Enum value maps for RouteTableFormat.
var (
	RouteTableFormat_name = map[int32]string{
		0: "TABLE_STRING",
		1: "TABLE_ID",
	}
	RouteTableFormat_value = map[string]int32{
		"TABLE_STRING": 0,
		"TABLE_ID":     1,
	}
)

func (x RouteTableFormat) Enum() *RouteTableFormat {
	p := new(RouteTableFormat)
	*p = x
	return p
}

func (x RouteTableFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RouteTableFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_routing_base_types_proto_enumTypes[0].Descriptor()
}

func (RouteTableFormat) Type() protoreflect.EnumType {
	return &file_jnx_routing_base_types_proto_enumTypes[0]
}

func (x RouteTableFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RouteTableFormat.Descriptor instead.
func (RouteTableFormat) EnumDescriptor() ([]byte, []int) {
	return file_jnx_routing_base_types_proto_rawDescGZIP(), []int{0}
}

// [brief]:  Route prefix address family types.
// [detail]: Routing table destination address family types.
// [default]: RT_AF_UNSPEC
type RouteAfType int32

const (
	// [brief]: Unspecified.
	RouteAfType_RT_AF_UNSPEC RouteAfType = 0
	// [brief]: IPv4 destination prefix.
	RouteAfType_RT_AF_INET RouteAfType = 1
	// [brief]: IPv6 destination prefix.
	RouteAfType_RT_AF_INET6 RouteAfType = 2
	// [brief]: IPv4 VPN (L3VPN) destination prefix.
	RouteAfType_RT_AF_INETVPN RouteAfType = 3
	// [brief]: IPv6 VPN (L3VPN) destination prefix.
	RouteAfType_RT_AF_INET6VPN RouteAfType = 4
	// [brief]: IPv4 Labeled-Unicast destination prefix.
	RouteAfType_RT_AF_LABELED_INET RouteAfType = 5
	// [brief]: IPv6 Labeled-Unicast destination prefix.
	RouteAfType_RT_AF_LABELED_INET6 RouteAfType = 6
	// [brief]: IPv4 SRTE destination prefix.
	RouteAfType_RT_AF_INET_SRTE RouteAfType = 7
	// [brief]: IPv6 SRTE destination prefix.
	RouteAfType_RT_AF_INET6_SRTE RouteAfType = 8
	// [brief]: IPv4 Flowspec prefix.
	RouteAfType_RT_AF_INET_FLOWSPEC RouteAfType = 9
	// [brief]: IPv4 Flowspec prefix.
	RouteAfType_RT_AF_INET6_FLOWSPEC RouteAfType = 10
)

// Enum value maps for RouteAfType.
var (
	RouteAfType_name = map[int32]string{
		0:  "RT_AF_UNSPEC",
		1:  "RT_AF_INET",
		2:  "RT_AF_INET6",
		3:  "RT_AF_INETVPN",
		4:  "RT_AF_INET6VPN",
		5:  "RT_AF_LABELED_INET",
		6:  "RT_AF_LABELED_INET6",
		7:  "RT_AF_INET_SRTE",
		8:  "RT_AF_INET6_SRTE",
		9:  "RT_AF_INET_FLOWSPEC",
		10: "RT_AF_INET6_FLOWSPEC",
	}
	RouteAfType_value = map[string]int32{
		"RT_AF_UNSPEC":         0,
		"RT_AF_INET":           1,
		"RT_AF_INET6":          2,
		"RT_AF_INETVPN":        3,
		"RT_AF_INET6VPN":       4,
		"RT_AF_LABELED_INET":   5,
		"RT_AF_LABELED_INET6":  6,
		"RT_AF_INET_SRTE":      7,
		"RT_AF_INET6_SRTE":     8,
		"RT_AF_INET_FLOWSPEC":  9,
		"RT_AF_INET6_FLOWSPEC": 10,
	}
)

func (x RouteAfType) Enum() *RouteAfType {
	p := new(RouteAfType)
	*p = x
	return p
}

func (x RouteAfType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RouteAfType) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_routing_base_types_proto_enumTypes[1].Descriptor()
}

func (RouteAfType) Type() protoreflect.EnumType {
	return &file_jnx_routing_base_types_proto_enumTypes[1]
}

func (x RouteAfType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RouteAfType.Descriptor instead.
func (RouteAfType) EnumDescriptor() ([]byte, []int) {
	return file_jnx_routing_base_types_proto_rawDescGZIP(), []int{1}
}

// [brief]:  Label operations.
// [detail]: MPLS label operation type.
// [default]: NOOP
type LabelOperation int32

const (
	//[brief]: No operation.
	LabelOperation_NOOP LabelOperation = 0
	//[brief]: Label removal.
	LabelOperation_POP LabelOperation = 1
	//[brief]: Label Addition.
	LabelOperation_PUSH LabelOperation = 2
	//[brief]: Label swap .
	LabelOperation_SWAP LabelOperation = 3
)

// Enum value maps for LabelOperation.
var (
	LabelOperation_name = map[int32]string{
		0: "NOOP",
		1: "POP",
		2: "PUSH",
		3: "SWAP",
	}
	LabelOperation_value = map[string]int32{
		"NOOP": 0,
		"POP":  1,
		"PUSH": 2,
		"SWAP": 3,
	}
)

func (x LabelOperation) Enum() *LabelOperation {
	p := new(LabelOperation)
	*p = x
	return p
}

func (x LabelOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LabelOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_routing_base_types_proto_enumTypes[2].Descriptor()
}

func (LabelOperation) Type() protoreflect.EnumType {
	return &file_jnx_routing_base_types_proto_enumTypes[2]
}

func (x LabelOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LabelOperation.Descriptor instead.
func (LabelOperation) EnumDescriptor() ([]byte, []int) {
	return file_jnx_routing_base_types_proto_rawDescGZIP(), []int{2}
}

// [brief]: Explicit Null Label Policy (ENLP) Operations.
// [detail]: This operation can be used to specify the Explicit NULL action.
//           Possible operations indicate if IPv4 or IPv6 Explicit Null
//           need to be pushed.
// [default]: SRTE_ENLP_INVALID_VAL
type SRTEEnlpOperations int32

const (
	SRTEEnlpOperations_SRTE_ENLP_INVALID_VAL            SRTEEnlpOperations = 0
	SRTEEnlpOperations_PUSH_IPV4_EXP_NULL_LABEL         SRTEEnlpOperations = 1
	SRTEEnlpOperations_PUSH_IPV6_EXP_NULL_LABEL         SRTEEnlpOperations = 2
	SRTEEnlpOperations_PUSH_IPV4_OR_IPV6_EXP_NULL_LABEL SRTEEnlpOperations = 3
	SRTEEnlpOperations_DO_NOT_PUSH_EXPLICIT_NULL_LABEL  SRTEEnlpOperations = 4
)

// Enum value maps for SRTEEnlpOperations.
var (
	SRTEEnlpOperations_name = map[int32]string{
		0: "SRTE_ENLP_INVALID_VAL",
		1: "PUSH_IPV4_EXP_NULL_LABEL",
		2: "PUSH_IPV6_EXP_NULL_LABEL",
		3: "PUSH_IPV4_OR_IPV6_EXP_NULL_LABEL",
		4: "DO_NOT_PUSH_EXPLICIT_NULL_LABEL",
	}
	SRTEEnlpOperations_value = map[string]int32{
		"SRTE_ENLP_INVALID_VAL":            0,
		"PUSH_IPV4_EXP_NULL_LABEL":         1,
		"PUSH_IPV6_EXP_NULL_LABEL":         2,
		"PUSH_IPV4_OR_IPV6_EXP_NULL_LABEL": 3,
		"DO_NOT_PUSH_EXPLICIT_NULL_LABEL":  4,
	}
)

func (x SRTEEnlpOperations) Enum() *SRTEEnlpOperations {
	p := new(SRTEEnlpOperations)
	*p = x
	return p
}

func (x SRTEEnlpOperations) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SRTEEnlpOperations) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_routing_base_types_proto_enumTypes[3].Descriptor()
}

func (SRTEEnlpOperations) Type() protoreflect.EnumType {
	return &file_jnx_routing_base_types_proto_enumTypes[3]
}

func (x SRTEEnlpOperations) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SRTEEnlpOperations.Descriptor instead.
func (SRTEEnlpOperations) EnumDescriptor() ([]byte, []int) {
	return file_jnx_routing_base_types_proto_rawDescGZIP(), []int{3}
}

// [brief]:  Protocol types.
// [detail]: define protocols that added the route.
// RTPROTO_OTHER denotes other internal protocols currently not exposed
// to API.
// [default]: PROTO_ANY
type RouteProtoType int32

const (
	// [brief]: Matches any protocol.
	RouteProtoType_PROTO_ANY RouteProtoType = 0
	// [brief]: route is directly connected.
	RouteProtoType_PROTO_DIRECT RouteProtoType = 1
	// [brief]: route to local side of P2P interface.
	RouteProtoType_PROTO_LOCAL RouteProtoType = 2
	// [brief]: route was installed in kernel previously.
	RouteProtoType_PROTO_KERNEL RouteProtoType = 3
	// [brief]: route was received via a redirect.
	RouteProtoType_PROTO_REDIRECT RouteProtoType = 4
	// [brief]: OSPF2 AS Internal routes.
	RouteProtoType_PROTO_OSPF RouteProtoType = 5
	// [brief]: OSPF3 AS Internal routes.
	RouteProtoType_PROTO_OSPF3 RouteProtoType = 6
	// [brief]: OSPF AS Internal routes.
	RouteProtoType_PROTO_OSPF_ANY RouteProtoType = 7
	// [brief]: Routing Information protocol.
	RouteProtoType_PROTO_RIP RouteProtoType = 8
	// [brief]: Routing Information protocol for v6.
	RouteProtoType_PROTO_RIPNG RouteProtoType = 9
	// [brief]: Border gateway protocol.
	RouteProtoType_PROTO_BGP RouteProtoType = 10
	// [brief]: route is static.
	RouteProtoType_PROTO_STATIC RouteProtoType = 11
	// [brief]: IS-IS.
	RouteProtoType_PROTO_ISIS RouteProtoType = 12
	// [brief]: For IGMP stuff.
	RouteProtoType_PROTO_IGMP RouteProtoType = 13
	// [brief]: Aggregate route.
	RouteProtoType_PROTO_AGGREGATE RouteProtoType = 14
	// [brief]: Distance Vector Multicast Routing Protocol.
	RouteProtoType_PROTO_DVMRP RouteProtoType = 15
	// [brief]: Protocol Independent Multicast.
	RouteProtoType_PROTO_PIM RouteProtoType = 16
	// [brief]:  Multicast Source Discovery Protocol.
	RouteProtoType_PROTO_MSDP RouteProtoType = 17
	// [brief]: MPLS switching.
	RouteProtoType_PROTO_MPLS RouteProtoType = 18
	// [brief]: RSVP.
	RouteProtoType_PROTO_RSVP RouteProtoType = 19
	// [brief]: Circuit Cross-Connect.
	RouteProtoType_PROTO_CCC RouteProtoType = 20
	// [brief]: LDP.
	RouteProtoType_PROTO_LDP RouteProtoType = 21
	// [brief]: VPN protocol, L3.
	RouteProtoType_PROTO_VPN RouteProtoType = 22
	// [brief]: MVPN protocol, L3.
	RouteProtoType_PROTO_MVPN RouteProtoType = 23
	// [brief]: multicast info.
	RouteProtoType_PROTO_MCAST RouteProtoType = 24
	// [brief]: VPN protocol, L2.
	RouteProtoType_PROTO_L2VPN RouteProtoType = 25
	// [brief]: l2circuit protocol.
	RouteProtoType_PROTO_L2CKT RouteProtoType = 26
	// [brief]: BGP Static.
	RouteProtoType_PROTO_BGP_STATIC RouteProtoType = 27
	// [brief]:RIFT.
	RouteProtoType_PROTO_RIFT RouteProtoType = 28
	// [brief]: Protocols not exposed and internal to Routing backend.
	RouteProtoType_PROTO_OTHER RouteProtoType = 29
)

// Enum value maps for RouteProtoType.
var (
	RouteProtoType_name = map[int32]string{
		0:  "PROTO_ANY",
		1:  "PROTO_DIRECT",
		2:  "PROTO_LOCAL",
		3:  "PROTO_KERNEL",
		4:  "PROTO_REDIRECT",
		5:  "PROTO_OSPF",
		6:  "PROTO_OSPF3",
		7:  "PROTO_OSPF_ANY",
		8:  "PROTO_RIP",
		9:  "PROTO_RIPNG",
		10: "PROTO_BGP",
		11: "PROTO_STATIC",
		12: "PROTO_ISIS",
		13: "PROTO_IGMP",
		14: "PROTO_AGGREGATE",
		15: "PROTO_DVMRP",
		16: "PROTO_PIM",
		17: "PROTO_MSDP",
		18: "PROTO_MPLS",
		19: "PROTO_RSVP",
		20: "PROTO_CCC",
		21: "PROTO_LDP",
		22: "PROTO_VPN",
		23: "PROTO_MVPN",
		24: "PROTO_MCAST",
		25: "PROTO_L2VPN",
		26: "PROTO_L2CKT",
		27: "PROTO_BGP_STATIC",
		28: "PROTO_RIFT",
		29: "PROTO_OTHER",
	}
	RouteProtoType_value = map[string]int32{
		"PROTO_ANY":        0,
		"PROTO_DIRECT":     1,
		"PROTO_LOCAL":      2,
		"PROTO_KERNEL":     3,
		"PROTO_REDIRECT":   4,
		"PROTO_OSPF":       5,
		"PROTO_OSPF3":      6,
		"PROTO_OSPF_ANY":   7,
		"PROTO_RIP":        8,
		"PROTO_RIPNG":      9,
		"PROTO_BGP":        10,
		"PROTO_STATIC":     11,
		"PROTO_ISIS":       12,
		"PROTO_IGMP":       13,
		"PROTO_AGGREGATE":  14,
		"PROTO_DVMRP":      15,
		"PROTO_PIM":        16,
		"PROTO_MSDP":       17,
		"PROTO_MPLS":       18,
		"PROTO_RSVP":       19,
		"PROTO_CCC":        20,
		"PROTO_LDP":        21,
		"PROTO_VPN":        22,
		"PROTO_MVPN":       23,
		"PROTO_MCAST":      24,
		"PROTO_L2VPN":      25,
		"PROTO_L2CKT":      26,
		"PROTO_BGP_STATIC": 27,
		"PROTO_RIFT":       28,
		"PROTO_OTHER":      29,
	}
)

func (x RouteProtoType) Enum() *RouteProtoType {
	p := new(RouteProtoType)
	*p = x
	return p
}

func (x RouteProtoType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RouteProtoType) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_routing_base_types_proto_enumTypes[4].Descriptor()
}

func (RouteProtoType) Type() protoreflect.EnumType {
	return &file_jnx_routing_base_types_proto_enumTypes[4]
}

func (x RouteProtoType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RouteProtoType.Descriptor instead.
func (RouteProtoType) EnumDescriptor() ([]byte, []int) {
	return file_jnx_routing_base_types_proto_rawDescGZIP(), []int{4}
}

// [brief]: Route table name - A string formatted per JUNOS convention.
// [detail]: Routing table (RIB) name uniquely identifying a route table,
// formatted as a string per JUNOS convention.
type RouteTableName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [mandatory]:
	// [brief]: Table name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RouteTableName) Reset() {
	*x = RouteTableName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_base_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteTableName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteTableName) ProtoMessage() {}

func (x *RouteTableName) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_base_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteTableName.ProtoReflect.Descriptor instead.
func (*RouteTableName) Descriptor() ([]byte, []int) {
	return file_jnx_routing_base_types_proto_rawDescGZIP(), []int{0}
}

func (x *RouteTableName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// [brief]: Route table identifier: An integer value uniquely identifying
// a table.
// [detail]: Routing table identifier as an integer value uniquely identifying
// a table.
type RouteTableId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [mandatory]:
	// [brief]: Table identifier.
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RouteTableId) Reset() {
	*x = RouteTableId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_base_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteTableId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteTableId) ProtoMessage() {}

func (x *RouteTableId) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_base_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteTableId.ProtoReflect.Descriptor instead.
func (*RouteTableId) Descriptor() ([]byte, []int) {
	return file_jnx_routing_base_types_proto_rawDescGZIP(), []int{1}
}

func (x *RouteTableId) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// [brief]: Routing table (RIB)
// [detail]: Routing table (RIB) may either be specified as a string or
// RPD table ID.
type RouteTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Route table format either with id or name.
	//
	// Types that are assignable to RouteTableFormat:
	//	*RouteTable_Id
	//	*RouteTable_Name
	RouteTableFormat isRouteTable_RouteTableFormat `protobuf_oneof:"route_table_format"`
}

func (x *RouteTable) Reset() {
	*x = RouteTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_base_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteTable) ProtoMessage() {}

func (x *RouteTable) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_base_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteTable.ProtoReflect.Descriptor instead.
func (*RouteTable) Descriptor() ([]byte, []int) {
	return file_jnx_routing_base_types_proto_rawDescGZIP(), []int{2}
}

func (m *RouteTable) GetRouteTableFormat() isRouteTable_RouteTableFormat {
	if m != nil {
		return m.RouteTableFormat
	}
	return nil
}

func (x *RouteTable) GetId() *RouteTableId {
	if x, ok := x.GetRouteTableFormat().(*RouteTable_Id); ok {
		return x.Id
	}
	return nil
}

func (x *RouteTable) GetName() *RouteTableName {
	if x, ok := x.GetRouteTableFormat().(*RouteTable_Name); ok {
		return x.Name
	}
	return nil
}

type isRouteTable_RouteTableFormat interface {
	isRouteTable_RouteTableFormat()
}

type RouteTable_Id struct {
	// [brief]: Table id to which the route belongs.
	Id *RouteTableId `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type RouteTable_Name struct {
	// [brief]: Table name to which the route belongs.
	Name *RouteTableName `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

func (*RouteTable_Id) isRouteTable_RouteTableFormat() {}

func (*RouteTable_Name) isRouteTable_RouteTableFormat() {}

// [brief]: RFC 4364 Route type 0.
// [detail]: 2-byte AS and 4-byte assigned number.
// [range]: 2-byte assigned number 0:65,535.
// 4-byte assigned number 0:4,294,967,295.
type RdType0 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: 2 byte AS number
	AsNumber uint32 `protobuf:"varint,1,opt,name=as_number,json=asNumber,proto3" json:"as_number,omitempty"`
	// [brief]: 4 byte assigned number subfield
	AssignedNumber uint32 `protobuf:"varint,2,opt,name=assigned_number,json=assignedNumber,proto3" json:"assigned_number,omitempty"`
}

func (x *RdType0) Reset() {
	*x = RdType0{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_base_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RdType0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RdType0) ProtoMessage() {}

func (x *RdType0) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_base_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RdType0.ProtoReflect.Descriptor instead.
func (*RdType0) Descriptor() ([]byte, []int) {
	return file_jnx_routing_base_types_proto_rawDescGZIP(), []int{3}
}

func (x *RdType0) GetAsNumber() uint32 {
	if x != nil {
		return x.AsNumber
	}
	return 0
}

func (x *RdType0) GetAssignedNumber() uint32 {
	if x != nil {
		return x.AssignedNumber
	}
	return 0
}

// [brief]: RFC 4364 Route type 1
// [detail]: 4-byte IPv4 address and 2-byte assigned number.
// [range]: 2-byte assigned number 0:65,535.
type RdType1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: 4 byte IP address
	IpAddress *IpAddress `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// [brief]: 2 byte assigned number subfield
	AssignedNumber uint32 `protobuf:"varint,2,opt,name=assigned_number,json=assignedNumber,proto3" json:"assigned_number,omitempty"`
}

func (x *RdType1) Reset() {
	*x = RdType1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_base_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RdType1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RdType1) ProtoMessage() {}

func (x *RdType1) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_base_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RdType1.ProtoReflect.Descriptor instead.
func (*RdType1) Descriptor() ([]byte, []int) {
	return file_jnx_routing_base_types_proto_rawDescGZIP(), []int{4}
}

func (x *RdType1) GetIpAddress() *IpAddress {
	if x != nil {
		return x.IpAddress
	}
	return nil
}

func (x *RdType1) GetAssignedNumber() uint32 {
	if x != nil {
		return x.AssignedNumber
	}
	return 0
}

// [brief]:  RFC 4364 Route type 2
// [detail]: 4-byte AS and 2-byte assigned number.
// [range]: 2-byte assigned number 0:65,535.
// 4-byte assigned number 0:4,294,967,295.
type RdType2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]:  4 byte AS number.
	AsNumber uint32 `protobuf:"varint,1,opt,name=as_number,json=asNumber,proto3" json:"as_number,omitempty"`
	// [brief]:  2 byte assigned number subfield.
	AssignedNumber uint32 `protobuf:"varint,2,opt,name=assigned_number,json=assignedNumber,proto3" json:"assigned_number,omitempty"`
}

func (x *RdType2) Reset() {
	*x = RdType2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_base_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RdType2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RdType2) ProtoMessage() {}

func (x *RdType2) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_base_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RdType2.ProtoReflect.Descriptor instead.
func (*RdType2) Descriptor() ([]byte, []int) {
	return file_jnx_routing_base_types_proto_rawDescGZIP(), []int{5}
}

func (x *RdType2) GetAsNumber() uint32 {
	if x != nil {
		return x.AsNumber
	}
	return 0
}

func (x *RdType2) GetAssignedNumber() uint32 {
	if x != nil {
		return x.AssignedNumber
	}
	return 0
}

// [brief]: RFC 4364 route distinguisher.
// [detail]: To distinguish customer VPN routes.
// within the BGP NLRIs. Valid RD can be type 0, type 1, or type 2.
type RouteDistinguisher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Any one of the below route distinguisher.
	//
	// Types that are assignable to RdFormat:
	//	*RouteDistinguisher_Rd0
	//	*RouteDistinguisher_Rd1
	//	*RouteDistinguisher_Rd2
	RdFormat isRouteDistinguisher_RdFormat `protobuf_oneof:"rd_format"`
}

func (x *RouteDistinguisher) Reset() {
	*x = RouteDistinguisher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_base_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteDistinguisher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteDistinguisher) ProtoMessage() {}

func (x *RouteDistinguisher) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_base_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteDistinguisher.ProtoReflect.Descriptor instead.
func (*RouteDistinguisher) Descriptor() ([]byte, []int) {
	return file_jnx_routing_base_types_proto_rawDescGZIP(), []int{6}
}

func (m *RouteDistinguisher) GetRdFormat() isRouteDistinguisher_RdFormat {
	if m != nil {
		return m.RdFormat
	}
	return nil
}

func (x *RouteDistinguisher) GetRd0() *RdType0 {
	if x, ok := x.GetRdFormat().(*RouteDistinguisher_Rd0); ok {
		return x.Rd0
	}
	return nil
}

func (x *RouteDistinguisher) GetRd1() *RdType1 {
	if x, ok := x.GetRdFormat().(*RouteDistinguisher_Rd1); ok {
		return x.Rd1
	}
	return nil
}

func (x *RouteDistinguisher) GetRd2() *RdType2 {
	if x, ok := x.GetRdFormat().(*RouteDistinguisher_Rd2); ok {
		return x.Rd2
	}
	return nil
}

type isRouteDistinguisher_RdFormat interface {
	isRouteDistinguisher_RdFormat()
}

type RouteDistinguisher_Rd0 struct {
	// [brief]: Type 0 RD.
	Rd0 *RdType0 `protobuf:"bytes,1,opt,name=rd0,proto3,oneof"`
}

type RouteDistinguisher_Rd1 struct {
	// [brief]: Type 1 RD.
	Rd1 *RdType1 `protobuf:"bytes,2,opt,name=rd1,proto3,oneof"`
}

type RouteDistinguisher_Rd2 struct {
	// [brief]: Type 2 RD.
	Rd2 *RdType2 `protobuf:"bytes,3,opt,name=rd2,proto3,oneof"`
}

func (*RouteDistinguisher_Rd0) isRouteDistinguisher_RdFormat() {}

func (*RouteDistinguisher_Rd1) isRouteDistinguisher_RdFormat() {}

func (*RouteDistinguisher_Rd2) isRouteDistinguisher_RdFormat() {}

// [brief]: L3VPN Address.
// [detail]: L3VPN address is composed of a route distinguisher (RD)
// and IP address.
type L3VpnAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [mandatory]:
	// [brief]: Route distinguisher.
	Rd *RouteDistinguisher `protobuf:"bytes,1,opt,name=rd,proto3" json:"rd,omitempty"`
	// [mandatory]:
	// [brief]: IPv4 or IPv6 VPN customer address.
	VpnAddr *IpAddress `protobuf:"bytes,2,opt,name=vpn_addr,json=vpnAddr,proto3" json:"vpn_addr,omitempty"`
}

func (x *L3VpnAddress) Reset() {
	*x = L3VpnAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_base_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L3VpnAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L3VpnAddress) ProtoMessage() {}

func (x *L3VpnAddress) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_base_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L3VpnAddress.ProtoReflect.Descriptor instead.
func (*L3VpnAddress) Descriptor() ([]byte, []int) {
	return file_jnx_routing_base_types_proto_rawDescGZIP(), []int{7}
}

func (x *L3VpnAddress) GetRd() *RouteDistinguisher {
	if x != nil {
		return x.Rd
	}
	return nil
}

func (x *L3VpnAddress) GetVpnAddr() *IpAddress {
	if x != nil {
		return x.VpnAddr
	}
	return nil
}

// [brief]: A single MPLS Label entry.
// [detail]: A single MPLS Label entry as defined by RFC 3032.
type LabelEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [mandatory]:
	// [brief]: A valid 20-bit unsigned label.
	// [range]: Label value must be less than decimal
	// value 1048576 and not within the reserved label range
	// of 4 through 15 (inclusive).
	Label uint32 `protobuf:"varint,1,opt,name=label,proto3" json:"label,omitempty"`
	// [brief]: A valid 3-bit unsigned traffic class/QoS value less
	// than decimal value 8. Optional (defaults to 0). READ-ONLY.
	TrafficClass uint32 `protobuf:"varint,2,opt,name=traffic_class,json=trafficClass,proto3" json:"traffic_class,omitempty"`
	// [brief]: A valid 8-bit unsigned TTL value less than decimal value 256.
	// Optional (defaults to 0). READ-ONLY.
	Ttl uint32 `protobuf:"varint,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// [brief]: Indicates that this Label stack entry the bottom of the label
	// stack. Bottom-of-Stack will always be set by the library and must
	//  never set by the client. READ-ONLY.
	BottomOfStack bool `protobuf:"varint,4,opt,name=bottom_of_stack,json=bottomOfStack,proto3" json:"bottom_of_stack,omitempty"`
}

func (x *LabelEntry) Reset() {
	*x = LabelEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_base_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelEntry) ProtoMessage() {}

func (x *LabelEntry) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_base_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelEntry.ProtoReflect.Descriptor instead.
func (*LabelEntry) Descriptor() ([]byte, []int) {
	return file_jnx_routing_base_types_proto_rawDescGZIP(), []int{8}
}

func (x *LabelEntry) GetLabel() uint32 {
	if x != nil {
		return x.Label
	}
	return 0
}

func (x *LabelEntry) GetTrafficClass() uint32 {
	if x != nil {
		return x.TrafficClass
	}
	return 0
}

func (x *LabelEntry) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *LabelEntry) GetBottomOfStack() bool {
	if x != nil {
		return x.BottomOfStack
	}
	return false
}

// [brief]: MPLS Label stack entry.
// [detail]: A single MPLS Label stack entry with the operation for the
// label entry.
type LabelStackEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: operation code.
	Opcode LabelOperation `protobuf:"varint,1,opt,name=opcode,proto3,enum=jnx.jet.routing.base.LabelOperation" json:"opcode,omitempty"`
	// [brief]: label entry.
	LabelEntry *LabelEntry `protobuf:"bytes,2,opt,name=label_entry,json=labelEntry,proto3" json:"label_entry,omitempty"`
}

func (x *LabelStackEntry) Reset() {
	*x = LabelStackEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_base_types_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelStackEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelStackEntry) ProtoMessage() {}

func (x *LabelStackEntry) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_base_types_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelStackEntry.ProtoReflect.Descriptor instead.
func (*LabelStackEntry) Descriptor() ([]byte, []int) {
	return file_jnx_routing_base_types_proto_rawDescGZIP(), []int{9}
}

func (x *LabelStackEntry) GetOpcode() LabelOperation {
	if x != nil {
		return x.Opcode
	}
	return LabelOperation_NOOP
}

func (x *LabelStackEntry) GetLabelEntry() *LabelEntry {
	if x != nil {
		return x.LabelEntry
	}
	return nil
}

// [brief]: MPLS Address.
// [detail]:  Holds the MPLS label used to represent label address in route
// lookups.
type MplsAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [mandatory]:
	// [brief]:  A valid 20-bit unsigned label value.
	// [mandatoty]:
	// [range]: less than 1048576.nd not within the reserved label range of 4
	// through 15 (inclusive).
	Label uint32 `protobuf:"varint,1,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *MplsAddress) Reset() {
	*x = MplsAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_base_types_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsAddress) ProtoMessage() {}

func (x *MplsAddress) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_base_types_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsAddress.ProtoReflect.Descriptor instead.
func (*MplsAddress) Descriptor() ([]byte, []int) {
	return file_jnx_routing_base_types_proto_rawDescGZIP(), []int{10}
}

func (x *MplsAddress) GetLabel() uint32 {
	if x != nil {
		return x.Label
	}
	return 0
}

// [brief]: Label Stack.
// [detail]: A label stack constructed according to the rules of RFC 3032.
type LabelStack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [mandatory]:
	// [brief]: label stack entries.
	// [detail]: An ordered list of one or more label stack entries beginning
	// with the bottom of the stack and ending with the top of the stack.
	Entries []*LabelStackEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *LabelStack) Reset() {
	*x = LabelStack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_base_types_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelStack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelStack) ProtoMessage() {}

func (x *LabelStack) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_base_types_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelStack.ProtoReflect.Descriptor instead.
func (*LabelStack) Descriptor() ([]byte, []int) {
	return file_jnx_routing_base_types_proto_rawDescGZIP(), []int{11}
}

func (x *LabelStack) GetEntries() []*LabelStackEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

// [brief]: Segment Identifier (SID).
// [detail]: Segment Identifier (SID). Either 4 octet MPLS SID or a 16 octet
// IPv6 SID. Currently IPv6 SID is not supported.
type SidEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: only one field can be set at the same time.
	//
	// Types that are assignable to SidEntryType:
	//	*SidEntry_SidLabelEntry
	SidEntryType isSidEntry_SidEntryType `protobuf_oneof:"sid_entry_type"`
}

func (x *SidEntry) Reset() {
	*x = SidEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_base_types_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SidEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SidEntry) ProtoMessage() {}

func (x *SidEntry) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_base_types_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SidEntry.ProtoReflect.Descriptor instead.
func (*SidEntry) Descriptor() ([]byte, []int) {
	return file_jnx_routing_base_types_proto_rawDescGZIP(), []int{12}
}

func (m *SidEntry) GetSidEntryType() isSidEntry_SidEntryType {
	if m != nil {
		return m.SidEntryType
	}
	return nil
}

func (x *SidEntry) GetSidLabelEntry() *LabelEntry {
	if x, ok := x.GetSidEntryType().(*SidEntry_SidLabelEntry); ok {
		return x.SidLabelEntry
	}
	return nil
}

type isSidEntry_SidEntryType interface {
	isSidEntry_SidEntryType()
}

type SidEntry_SidLabelEntry struct {
	// [brief]: MPLS label for the SID.
	SidLabelEntry *LabelEntry `protobuf:"bytes,1,opt,name=sid_label_entry,json=sidLabelEntry,proto3,oneof"`
}

func (*SidEntry_SidLabelEntry) isSidEntry_SidEntryType() {}

// [brief]:  Segment Type 1.
// [detail]:  Segment Type 1: SID only, in the form of MPLS Label.
type SegmentType1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [mandatory]:
	// [brief]:  MPLS label for the SID.
	SidLabelEntry *LabelEntry `protobuf:"bytes,1,opt,name=sid_label_entry,json=sidLabelEntry,proto3" json:"sid_label_entry,omitempty"`
}

func (x *SegmentType1) Reset() {
	*x = SegmentType1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_base_types_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentType1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentType1) ProtoMessage() {}

func (x *SegmentType1) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_base_types_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentType1.ProtoReflect.Descriptor instead.
func (*SegmentType1) Descriptor() ([]byte, []int) {
	return file_jnx_routing_base_types_proto_rawDescGZIP(), []int{13}
}

func (x *SegmentType1) GetSidLabelEntry() *LabelEntry {
	if x != nil {
		return x.SidLabelEntry
	}
	return nil
}

// [brief]: SR-TE Segment.
// [detail]: SR-TE Segment. Only SegmentType1 is currently supported.
// Other types are for internal use only.
type SRTESegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: segment type.
	//
	// Types that are assignable to SrteType:
	//	*SRTESegment_SegmentType1
	SrteType isSRTESegment_SrteType `protobuf_oneof:"srte_type"`
}

func (x *SRTESegment) Reset() {
	*x = SRTESegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_base_types_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRTESegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRTESegment) ProtoMessage() {}

func (x *SRTESegment) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_base_types_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRTESegment.ProtoReflect.Descriptor instead.
func (*SRTESegment) Descriptor() ([]byte, []int) {
	return file_jnx_routing_base_types_proto_rawDescGZIP(), []int{14}
}

func (m *SRTESegment) GetSrteType() isSRTESegment_SrteType {
	if m != nil {
		return m.SrteType
	}
	return nil
}

func (x *SRTESegment) GetSegmentType1() *SegmentType1 {
	if x, ok := x.GetSrteType().(*SRTESegment_SegmentType1); ok {
		return x.SegmentType1
	}
	return nil
}

type isSRTESegment_SrteType interface {
	isSRTESegment_SrteType()
}

type SRTESegment_SegmentType1 struct {
	// [brief]: Segment type1, only supported segment type at present.
	SegmentType1 *SegmentType1 `protobuf:"bytes,1,opt,name=segment_type1,json=segmentType1,proto3,oneof"`
}

func (*SRTESegment_SegmentType1) isSRTESegment_SrteType() {}

// [brief]:  SR-TE Segment List.
// [detail]:  List of Explicit paths towards endpoint. One or more segment
// lists to program. Segment List entries. Minimum one segment need to be set.
type SRTESegmentList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Weight associated with segment list.
	// [detail]: Weight specifies the weight associated to a given segment
	// list. The weight is used in order to apply weighted ECMP mechanism
	// when steering traffic into a policy that includes multiple Segment
	// Lists. This parameter is needed to be set only when > 1 segment list
	// is set.
	Weight uint32 `protobuf:"varint,1,opt,name=weight,proto3" json:"weight,omitempty"`
	// [mandatory]:
	// [brief]: Segments, one or more segments can be programmed.
	// [range]: A maximum of 5 segments are supported.
	Segments []*SRTESegment `protobuf:"bytes,2,rep,name=segments,proto3" json:"segments,omitempty"`
}

func (x *SRTESegmentList) Reset() {
	*x = SRTESegmentList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_base_types_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRTESegmentList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRTESegmentList) ProtoMessage() {}

func (x *SRTESegmentList) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_base_types_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRTESegmentList.ProtoReflect.Descriptor instead.
func (*SRTESegmentList) Descriptor() ([]byte, []int) {
	return file_jnx_routing_base_types_proto_rawDescGZIP(), []int{15}
}

func (x *SRTESegmentList) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *SRTESegmentList) GetSegments() []*SRTESegment {
	if x != nil {
		return x.Segments
	}
	return nil
}

// [brief]: SR-TE Distinguisher.
// [detail]:  Value that uniquely identifies the policy in the context of
// <destination, color> tuple. SR policy originator can use this to make
// policy unique in terms of BGP NLRI by setting different values for
// multiple occurrences of same SR policy.
type SRTEDistinguisher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: SR policy originator.
	// [detail]: SR policy originator. This is a numeric value that the
	// originator can use to make unique when there are multiple occurrences
	// of same SR policy. There is no verification done for the value of
	// this, it has to be set and should be a non zero value.
	Distinguisher uint32 `protobuf:"varint,1,opt,name=distinguisher,proto3" json:"distinguisher,omitempty"`
}

func (x *SRTEDistinguisher) Reset() {
	*x = SRTEDistinguisher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_base_types_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRTEDistinguisher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRTEDistinguisher) ProtoMessage() {}

func (x *SRTEDistinguisher) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_base_types_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRTEDistinguisher.ProtoReflect.Descriptor instead.
func (*SRTEDistinguisher) Descriptor() ([]byte, []int) {
	return file_jnx_routing_base_types_proto_rawDescGZIP(), []int{16}
}

func (x *SRTEDistinguisher) GetDistinguisher() uint32 {
	if x != nil {
		return x.Distinguisher
	}
	return 0
}

// [brief]: SR-TE Color.
// [detail]: Value used to match destination prefix to the policy.
// All prefixes of a particular color value is steered into policy that
// has the same color value.
type SRTEColor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: SR policy color used to match destination prefix to policy..
	// [detail]: SR policy color. This is a value used to match destination
	// prefix to the policy. All prefixes of a particular color value is
	// steered into policy that has the same color.
	Color uint32 `protobuf:"varint,1,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *SRTEColor) Reset() {
	*x = SRTEColor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_base_types_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRTEColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRTEColor) ProtoMessage() {}

func (x *SRTEColor) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_base_types_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRTEColor.ProtoReflect.Descriptor instead.
func (*SRTEColor) Descriptor() ([]byte, []int) {
	return file_jnx_routing_base_types_proto_rawDescGZIP(), []int{17}
}

func (x *SRTEColor) GetColor() uint32 {
	if x != nil {
		return x.Color
	}
	return 0
}

// [brief]: SR-TE Binding SID.
// [detail]: This is an optional parameter. Note IPv6 Binding SID not
// supported so in SidEntry only MPLS label SID is defined.
type SRTEBindingSID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Binding SID
	BindingSrId *SidEntry `protobuf:"bytes,1,opt,name=binding_sr_id,json=bindingSrId,proto3" json:"binding_sr_id,omitempty"`
}

func (x *SRTEBindingSID) Reset() {
	*x = SRTEBindingSID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_base_types_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRTEBindingSID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRTEBindingSID) ProtoMessage() {}

func (x *SRTEBindingSID) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_base_types_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRTEBindingSID.ProtoReflect.Descriptor instead.
func (*SRTEBindingSID) Descriptor() ([]byte, []int) {
	return file_jnx_routing_base_types_proto_rawDescGZIP(), []int{18}
}

func (x *SRTEBindingSID) GetBindingSrId() *SidEntry {
	if x != nil {
		return x.BindingSrId
	}
	return nil
}

// [brief]: SR-TE Tunnel Name.
// [detail]: This message is used to specify the SR-TE name. If the SR-TE route
//           added ends up getting advertised this name will be used as the SR-TE
//           policy name in the advertised BGP route.
type SRTEName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// [brief]: SRTE Policy Name
	TunnelName string `protobuf:"bytes,1,opt,name=tunnel_name,json=tunnelName,proto3" json:"tunnel_name,omitempty"`
}

func (x *SRTEName) Reset() {
	*x = SRTEName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_base_types_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRTEName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRTEName) ProtoMessage() {}

func (x *SRTEName) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_base_types_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRTEName.ProtoReflect.Descriptor instead.
func (*SRTEName) Descriptor() ([]byte, []int) {
	return file_jnx_routing_base_types_proto_rawDescGZIP(), []int{19}
}

func (x *SRTEName) GetTunnelName() string {
	if x != nil {
		return x.TunnelName
	}
	return ""
}

// [brief]: SR-TE Priority.
// [detail]: This message specifies the priority with which BGP SR-TE route is
//           processed. Currently not used in JUNOS, but it will be advertised.
type SRTEPriority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: SRTE Priority
	SrtePriority uint32 `protobuf:"varint,1,opt,name=srte_priority,json=srtePriority,proto3" json:"srte_priority,omitempty"`
}

func (x *SRTEPriority) Reset() {
	*x = SRTEPriority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_base_types_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRTEPriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRTEPriority) ProtoMessage() {}

func (x *SRTEPriority) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_base_types_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRTEPriority.ProtoReflect.Descriptor instead.
func (*SRTEPriority) Descriptor() ([]byte, []int) {
	return file_jnx_routing_base_types_proto_rawDescGZIP(), []int{20}
}

func (x *SRTEPriority) GetSrtePriority() uint32 {
	if x != nil {
		return x.SrtePriority
	}
	return 0
}

// [brief]: SR-TE Explicit Null Label Policy (ENLP).
// [detail]: This message is used to specify the ENLP operations for the SR-TE route.
type SRTEEnlp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: SRTE ENLP
	SrteEnlp SRTEEnlpOperations `protobuf:"varint,1,opt,name=srte_enlp,json=srteEnlp,proto3,enum=jnx.jet.routing.base.SRTEEnlpOperations" json:"srte_enlp,omitempty"`
}

func (x *SRTEEnlp) Reset() {
	*x = SRTEEnlp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_base_types_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRTEEnlp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRTEEnlp) ProtoMessage() {}

func (x *SRTEEnlp) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_base_types_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRTEEnlp.ProtoReflect.Descriptor instead.
func (*SRTEEnlp) Descriptor() ([]byte, []int) {
	return file_jnx_routing_base_types_proto_rawDescGZIP(), []int{21}
}

func (x *SRTEEnlp) GetSrteEnlp() SRTEEnlpOperations {
	if x != nil {
		return x.SrteEnlp
	}
	return SRTEEnlpOperations_SRTE_ENLP_INVALID_VAL
}

// [brief]: SR-TE Address key fields.
// [detail]: SR-TE address mesaage type with key fileds destination,color and distinguisher.
type SRTEAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [mandatory]:
	// [brief]: Identifies endpoint of the policy.
	Destination *IpAddress `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	// [mandatory]:
	// [brief]: Value used to match destination prefix to the policy.
	SrColor *SRTEColor `protobuf:"bytes,2,opt,name=sr_color,json=srColor,proto3" json:"sr_color,omitempty"`
	// [mandatory]:
	// [brief]: SR-TE Distinguisher
	SrDistinguisher *SRTEDistinguisher `protobuf:"bytes,3,opt,name=sr_distinguisher,json=srDistinguisher,proto3" json:"sr_distinguisher,omitempty"`
}

func (x *SRTEAddress) Reset() {
	*x = SRTEAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_base_types_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRTEAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRTEAddress) ProtoMessage() {}

func (x *SRTEAddress) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_base_types_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRTEAddress.ProtoReflect.Descriptor instead.
func (*SRTEAddress) Descriptor() ([]byte, []int) {
	return file_jnx_routing_base_types_proto_rawDescGZIP(), []int{22}
}

func (x *SRTEAddress) GetDestination() *IpAddress {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *SRTEAddress) GetSrColor() *SRTEColor {
	if x != nil {
		return x.SrColor
	}
	return nil
}

func (x *SRTEAddress) GetSrDistinguisher() *SRTEDistinguisher {
	if x != nil {
		return x.SrDistinguisher
	}
	return nil
}

// [brief]: SR-TE Route information like segments.
// [detail]: Address specific route data for IPv4 and IPv6 SRTE
// address families.
type SRTERouteData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Specifies the BSID of the path.
	// OPTIONAL
	BindingSid *SRTEBindingSID `protobuf:"bytes,1,opt,name=binding_sid,json=bindingSid,proto3" json:"binding_sid,omitempty"`
	// [brief]: Preference value of the route data.
	// [detail]: Preference value is used by receiver to select among
	// different SR paths of the same SR policy. SR policies may be
	// originated by ways other than BGP.
	// [default_value]: 0
	// OPTIONAL
	Preference uint32 `protobuf:"varint,2,opt,name=preference,proto3" json:"preference,omitempty"`
	// [mandatory]:
	// [brief]:  List of Explicit paths towards endpoint.
	SegmentLists []*SRTESegmentList `protobuf:"bytes,3,rep,name=segment_lists,json=segmentLists,proto3" json:"segment_lists,omitempty"`
	// [optional];
	// [brief]: SRTE tunnel Name.
	// This is used locally in the router and advertised by BGP to its peers.
	SrName *SRTEName `protobuf:"bytes,4,opt,name=sr_name,json=srName,proto3" json:"sr_name,omitempty"`
	// [optional];
	// [brief]: SRTE Priority.
	SrPriority *SRTEPriority `protobuf:"bytes,6,opt,name=sr_priority,json=srPriority,proto3" json:"sr_priority,omitempty"`
	// [optional];
	// [brief]: SRTE ENLP.
	// Possible values are defined in enum SRTEEnlpOperations.
	SrEnlp *SRTEEnlp `protobuf:"bytes,7,opt,name=sr_enlp,json=srEnlp,proto3" json:"sr_enlp,omitempty"`
}

func (x *SRTERouteData) Reset() {
	*x = SRTERouteData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_base_types_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRTERouteData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRTERouteData) ProtoMessage() {}

func (x *SRTERouteData) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_base_types_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRTERouteData.ProtoReflect.Descriptor instead.
func (*SRTERouteData) Descriptor() ([]byte, []int) {
	return file_jnx_routing_base_types_proto_rawDescGZIP(), []int{23}
}

func (x *SRTERouteData) GetBindingSid() *SRTEBindingSID {
	if x != nil {
		return x.BindingSid
	}
	return nil
}

func (x *SRTERouteData) GetPreference() uint32 {
	if x != nil {
		return x.Preference
	}
	return 0
}

func (x *SRTERouteData) GetSegmentLists() []*SRTESegmentList {
	if x != nil {
		return x.SegmentLists
	}
	return nil
}

func (x *SRTERouteData) GetSrName() *SRTEName {
	if x != nil {
		return x.SrName
	}
	return nil
}

func (x *SRTERouteData) GetSrPriority() *SRTEPriority {
	if x != nil {
		return x.SrPriority
	}
	return nil
}

func (x *SRTERouteData) GetSrEnlp() *SRTEEnlp {
	if x != nil {
		return x.SrEnlp
	}
	return nil
}

// [brief]: Flowspec route data.
// [detail]: For matched packets the action can be discard, change DSCP
// marking, rate limit, redirect into a VRF or sample. At least one action
// must set. Only one terminating action can be set.
type FlowspecRouteData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Action to discard matching packet.
	// [default_value]: FALSE
	Discard bool `protobuf:"varint,1,opt,name=discard,proto3" json:"discard,omitempty"`
	// [brief]: Action to change the DSCP value to matching packets with this value.
	// [default_value]: 0
	MarkDscp uint32 `protobuf:"varint,2,opt,name=mark_dscp,json=markDscp,proto3" json:"mark_dscp,omitempty"`
	// [brief]: Action to rate limit matching packets to this value.
	// [default_value]: 0
	RateLimitVal uint32 `protobuf:"varint,3,opt,name=rate_limit_val,json=rateLimitVal,proto3" json:"rate_limit_val,omitempty"`
	// [brief]: Action to redirect matching packets to the route target specified.
	RedirectInstRtComm string `protobuf:"bytes,4,opt,name=redirect_inst_rt_comm,json=redirectInstRtComm,proto3" json:"redirect_inst_rt_comm,omitempty"`
	// [brief]: Action to sample matching packets.
	// [default_value]: FALSE
	Sample bool `protobuf:"varint,5,opt,name=sample,proto3" json:"sample,omitempty"`
}

func (x *FlowspecRouteData) Reset() {
	*x = FlowspecRouteData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_base_types_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowspecRouteData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowspecRouteData) ProtoMessage() {}

func (x *FlowspecRouteData) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_base_types_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowspecRouteData.ProtoReflect.Descriptor instead.
func (*FlowspecRouteData) Descriptor() ([]byte, []int) {
	return file_jnx_routing_base_types_proto_rawDescGZIP(), []int{24}
}

func (x *FlowspecRouteData) GetDiscard() bool {
	if x != nil {
		return x.Discard
	}
	return false
}

func (x *FlowspecRouteData) GetMarkDscp() uint32 {
	if x != nil {
		return x.MarkDscp
	}
	return 0
}

func (x *FlowspecRouteData) GetRateLimitVal() uint32 {
	if x != nil {
		return x.RateLimitVal
	}
	return 0
}

func (x *FlowspecRouteData) GetRedirectInstRtComm() string {
	if x != nil {
		return x.RedirectInstRtComm
	}
	return ""
}

func (x *FlowspecRouteData) GetSample() bool {
	if x != nil {
		return x.Sample
	}
	return false
}

// [brief]: Address family specific route data.
// [detail]: message type with Route data defined for each supported address family.
type AddressFamilySpecificData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Route family of the address data.
	//
	// Types that are assignable to RouteDataAf:
	//	*AddressFamilySpecificData_SrtePolicyData
	//	*AddressFamilySpecificData_FlowspecData
	RouteDataAf isAddressFamilySpecificData_RouteDataAf `protobuf_oneof:"route_data_af"`
}

func (x *AddressFamilySpecificData) Reset() {
	*x = AddressFamilySpecificData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_base_types_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressFamilySpecificData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressFamilySpecificData) ProtoMessage() {}

func (x *AddressFamilySpecificData) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_base_types_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressFamilySpecificData.ProtoReflect.Descriptor instead.
func (*AddressFamilySpecificData) Descriptor() ([]byte, []int) {
	return file_jnx_routing_base_types_proto_rawDescGZIP(), []int{25}
}

func (m *AddressFamilySpecificData) GetRouteDataAf() isAddressFamilySpecificData_RouteDataAf {
	if m != nil {
		return m.RouteDataAf
	}
	return nil
}

func (x *AddressFamilySpecificData) GetSrtePolicyData() *SRTERouteData {
	if x, ok := x.GetRouteDataAf().(*AddressFamilySpecificData_SrtePolicyData); ok {
		return x.SrtePolicyData
	}
	return nil
}

func (x *AddressFamilySpecificData) GetFlowspecData() *FlowspecRouteData {
	if x, ok := x.GetRouteDataAf().(*AddressFamilySpecificData_FlowspecData); ok {
		return x.FlowspecData
	}
	return nil
}

type isAddressFamilySpecificData_RouteDataAf interface {
	isAddressFamilySpecificData_RouteDataAf()
}

type AddressFamilySpecificData_SrtePolicyData struct {
	// [brief]: SRTE policy data.
	// [detail]: Address specific route data for IPv4 and IPv6 SRTE
	// address families. This has to be set when route_prefix_af is of
	// type IPv4 and IPv6 SRTE address family.
	SrtePolicyData *SRTERouteData `protobuf:"bytes,1,opt,name=srte_policy_data,json=srtePolicyData,proto3,oneof"`
}

type AddressFamilySpecificData_FlowspecData struct {
	// [brief]: Flowspec data.
	// [detail]: Address specific route data for IPv4 and Ipv6 flow-spec
	// address families.
	// This has to be set when route_prefix_af is of type IPv4 and IPv6
	// flow-spec address family.
	FlowspecData *FlowspecRouteData `protobuf:"bytes,2,opt,name=flowspec_data,json=flowspecData,proto3,oneof"`
}

func (*AddressFamilySpecificData_SrtePolicyData) isAddressFamilySpecificData_RouteDataAf() {}

func (*AddressFamilySpecificData_FlowspecData) isAddressFamilySpecificData_RouteDataAf() {}

// [brief]: Flowspec address.
// [detail]: FlowspecAdress has match fields that can be used to match fields of a
// IP header. If the match is sucessful then the action will be applied to the
// IP packet. The actions can be chained if further actions needs to be
// applied after previous action is complete. These actions are defined as
// protocol specific data.
//
// IP header fields than can be matched are destination ip address, source
// IP address, protocol, destination/source port, ICMP types/codes, DSCP
// and fragment bit.
//
// At least one of the match condition should be set.
type FlowspecAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: IP packet destination prefix to match for filtering.
	// OPTIONAL
	Destination *IpAddress `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	// [brief]: IP packet destination prefix length.
	// [detail]: This field if not set when destination is
	// set will default to HOST length for the address family.
	// i.e. 32 for IPv4 and 128 for IPv6.
	// This along with destination determines the IP destination field
	// matching range.
	// For e.g. if destination = 10.1.1.0 and dest_prefix_len = 24 then
	// flows-spec filter added will match all IP packets with destination
	// address 10.1.1.1 to 10.1.1.254.
	// OPTIONAL
	DestPrefixLen uint32 `protobuf:"varint,2,opt,name=dest_prefix_len,json=destPrefixLen,proto3" json:"dest_prefix_len,omitempty"`
	// [brief]: IP packet source address to match for filtering.
	// OPTIONAL
	Source *IpAddress `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	// [brief]: IP source prefix length.
	// [detail]: IP packet source address prefix length that will determine
	// the source address range matched for filtering. The range matched is
	// similar to dest_prefix_len described above.
	// OPTIONAL
	SourcePrefixLen uint32 `protobuf:"varint,4,opt,name=source_prefix_len,json=sourcePrefixLen,proto3" json:"source_prefix_len,omitempty"`
	// [brief]: Range of IP protocols to be matched while filtering.
	// [detail]: A range of numerical values can be specified to match.
	// Standard protocol values defined by IANA can be used in these
	// numerical ranges.
	// Ref: https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml
	// Note that the values are not validated, used as is mentioned in range.
	//
	// The ranges will be merged if they overlap and can be represented by a
	// single range.
	// For e.g. if ranges 1-20 and 15-30 are set they will merged into a single
	// range 1-30.
	// If a single value needs to specified both min and max in NumericRange
	// should be set to the same value.
	// This comment applies to all the following fields defined below:
	// ip_protocols, ports, dest_ports, src_ports, icmp_types, icmp_codes,
	// pkt_lengths and dscp.
	// OPTIONAL
	IpProtocols *NumericRangeList `protobuf:"bytes,5,opt,name=ip_protocols,json=ipProtocols,proto3" json:"ip_protocols,omitempty"`
	// [brief]: Destination and source ports of IP packet to match for filtering.
	// [detail]: Standard port values defined by IANA can be used for this.
	// Ref: https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml
	// Note that the values are not validated, used as is mentioned in range.
	// OPTIONAL
	Ports *NumericRangeList `protobuf:"bytes,6,opt,name=ports,proto3" json:"ports,omitempty"`
	// [brief]: Destination ports of IP packet to match for filtering.
	// [detail]: Standard port values defined by IANA can be used for this.
	// Ref: https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml
	// Note that the values are not validated, used as is mentioned in range.
	// OPTIONAL
	DestPorts *NumericRangeList `protobuf:"bytes,7,opt,name=dest_ports,json=destPorts,proto3" json:"dest_ports,omitempty"`
	// [brief]: Source ports of IP packet to match for filtering.
	// [detail]: Standard port values defined by IANA can be used for this.
	// Ref: https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml
	// Note that the values are not validated, used as is mentioned in range.
	// OPTIONAL
	SrcPorts *NumericRangeList `protobuf:"bytes,8,opt,name=src_ports,json=srcPorts,proto3" json:"src_ports,omitempty"`
	// [brief]: ICMP types to match for filtering.
	// [detail]: Standard ICMP type values defined by IANA can be used for this.
	// Ref: https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml#icmp-parameters-types
	// Note that the values are not validated, used as is mentioned in range.
	// OPTIONAL
	IcmpTypes *NumericRangeList `protobuf:"bytes,9,opt,name=icmp_types,json=icmpTypes,proto3" json:"icmp_types,omitempty"`
	// [brief]: ICMP codes to match for filtering.
	// [detail]: Standard ICMP code values defined by IANA can be used for this.
	// Ref: https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml#icmp-parameters-codes
	// Note that the values are not validated, used as is mentioned in range.
	// OPTIONAL
	IcmpCodes *NumericRangeList `protobuf:"bytes,10,opt,name=icmp_codes,json=icmpCodes,proto3" json:"icmp_codes,omitempty"`
	// [brief]: TCP flags to match for filtering.
	// OPTIONAL
	TcpFlags TcpFlags `protobuf:"varint,11,opt,name=tcp_flags,json=tcpFlags,proto3,enum=jnx.jet.common.TcpFlags" json:"tcp_flags,omitempty"`
	// [brief]: ICMP types to match for filtering.
	// [detail]: Standard ICMP type values defined by IANA can be used for this.
	// Ref: https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml#icmp-parameters-types
	// Note that the values are not validated, used as is mentioned in range.
	// OPTIONAL
	PktLengths *NumericRangeList `protobuf:"bytes,12,opt,name=pkt_lengths,json=pktLengths,proto3" json:"pkt_lengths,omitempty"`
	// [brief]: ICMP types to match for filtering.
	// [detail]: Standard ICMP type values defined by IANA can be used for this.
	// Ref: https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml#icmp-parameters-types
	// Note that the values are not validated, used as is mentioned in range.
	// OPTIONAL
	Dscps *NumericRangeList `protobuf:"bytes,13,opt,name=dscps,proto3" json:"dscps,omitempty"`
	// [brief]: IP framgment flags to match for filtering.
	// OPTIONAL
	Fragment *IpFragementFlags `protobuf:"bytes,14,opt,name=fragment,proto3" json:"fragment,omitempty"`
}

func (x *FlowspecAddress) Reset() {
	*x = FlowspecAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_base_types_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowspecAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowspecAddress) ProtoMessage() {}

func (x *FlowspecAddress) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_base_types_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowspecAddress.ProtoReflect.Descriptor instead.
func (*FlowspecAddress) Descriptor() ([]byte, []int) {
	return file_jnx_routing_base_types_proto_rawDescGZIP(), []int{26}
}

func (x *FlowspecAddress) GetDestination() *IpAddress {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *FlowspecAddress) GetDestPrefixLen() uint32 {
	if x != nil {
		return x.DestPrefixLen
	}
	return 0
}

func (x *FlowspecAddress) GetSource() *IpAddress {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *FlowspecAddress) GetSourcePrefixLen() uint32 {
	if x != nil {
		return x.SourcePrefixLen
	}
	return 0
}

func (x *FlowspecAddress) GetIpProtocols() *NumericRangeList {
	if x != nil {
		return x.IpProtocols
	}
	return nil
}

func (x *FlowspecAddress) GetPorts() *NumericRangeList {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *FlowspecAddress) GetDestPorts() *NumericRangeList {
	if x != nil {
		return x.DestPorts
	}
	return nil
}

func (x *FlowspecAddress) GetSrcPorts() *NumericRangeList {
	if x != nil {
		return x.SrcPorts
	}
	return nil
}

func (x *FlowspecAddress) GetIcmpTypes() *NumericRangeList {
	if x != nil {
		return x.IcmpTypes
	}
	return nil
}

func (x *FlowspecAddress) GetIcmpCodes() *NumericRangeList {
	if x != nil {
		return x.IcmpCodes
	}
	return nil
}

func (x *FlowspecAddress) GetTcpFlags() TcpFlags {
	if x != nil {
		return x.TcpFlags
	}
	return TcpFlags_TCP_FLAG_INVALID
}

func (x *FlowspecAddress) GetPktLengths() *NumericRangeList {
	if x != nil {
		return x.PktLengths
	}
	return nil
}

func (x *FlowspecAddress) GetDscps() *NumericRangeList {
	if x != nil {
		return x.Dscps
	}
	return nil
}

func (x *FlowspecAddress) GetFragment() *IpFragementFlags {
	if x != nil {
		return x.Fragment
	}
	return nil
}

// [brief]: Route destination prefix.
// [detail]:Route destination prefix defined for each supported address family.
type RoutePrefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: only one field from the below can be set at the same time.
	//
	// Types that are assignable to RoutePrefixAf:
	//	*RoutePrefix_Inet
	//	*RoutePrefix_Inet6
	//	*RoutePrefix_Inetvpn
	//	*RoutePrefix_Inet6Vpn
	//	*RoutePrefix_LabeledInet
	//	*RoutePrefix_LabeledInet6
	//	*RoutePrefix_InetSrtePolicy
	//	*RoutePrefix_Inet6SrtePolicy
	//	*RoutePrefix_InetFlowspec
	//	*RoutePrefix_Inet6Flowspec
	RoutePrefixAf isRoutePrefix_RoutePrefixAf `protobuf_oneof:"route_prefix_af"`
}

func (x *RoutePrefix) Reset() {
	*x = RoutePrefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_base_types_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutePrefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutePrefix) ProtoMessage() {}

func (x *RoutePrefix) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_base_types_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutePrefix.ProtoReflect.Descriptor instead.
func (*RoutePrefix) Descriptor() ([]byte, []int) {
	return file_jnx_routing_base_types_proto_rawDescGZIP(), []int{27}
}

func (m *RoutePrefix) GetRoutePrefixAf() isRoutePrefix_RoutePrefixAf {
	if m != nil {
		return m.RoutePrefixAf
	}
	return nil
}

func (x *RoutePrefix) GetInet() *IpAddress {
	if x, ok := x.GetRoutePrefixAf().(*RoutePrefix_Inet); ok {
		return x.Inet
	}
	return nil
}

func (x *RoutePrefix) GetInet6() *IpAddress {
	if x, ok := x.GetRoutePrefixAf().(*RoutePrefix_Inet6); ok {
		return x.Inet6
	}
	return nil
}

func (x *RoutePrefix) GetInetvpn() *L3VpnAddress {
	if x, ok := x.GetRoutePrefixAf().(*RoutePrefix_Inetvpn); ok {
		return x.Inetvpn
	}
	return nil
}

func (x *RoutePrefix) GetInet6Vpn() *L3VpnAddress {
	if x, ok := x.GetRoutePrefixAf().(*RoutePrefix_Inet6Vpn); ok {
		return x.Inet6Vpn
	}
	return nil
}

func (x *RoutePrefix) GetLabeledInet() *IpAddress {
	if x, ok := x.GetRoutePrefixAf().(*RoutePrefix_LabeledInet); ok {
		return x.LabeledInet
	}
	return nil
}

func (x *RoutePrefix) GetLabeledInet6() *IpAddress {
	if x, ok := x.GetRoutePrefixAf().(*RoutePrefix_LabeledInet6); ok {
		return x.LabeledInet6
	}
	return nil
}

func (x *RoutePrefix) GetInetSrtePolicy() *SRTEAddress {
	if x, ok := x.GetRoutePrefixAf().(*RoutePrefix_InetSrtePolicy); ok {
		return x.InetSrtePolicy
	}
	return nil
}

func (x *RoutePrefix) GetInet6SrtePolicy() *SRTEAddress {
	if x, ok := x.GetRoutePrefixAf().(*RoutePrefix_Inet6SrtePolicy); ok {
		return x.Inet6SrtePolicy
	}
	return nil
}

func (x *RoutePrefix) GetInetFlowspec() *FlowspecAddress {
	if x, ok := x.GetRoutePrefixAf().(*RoutePrefix_InetFlowspec); ok {
		return x.InetFlowspec
	}
	return nil
}

func (x *RoutePrefix) GetInet6Flowspec() *FlowspecAddress {
	if x, ok := x.GetRoutePrefixAf().(*RoutePrefix_Inet6Flowspec); ok {
		return x.Inet6Flowspec
	}
	return nil
}

type isRoutePrefix_RoutePrefixAf interface {
	isRoutePrefix_RoutePrefixAf()
}

type RoutePrefix_Inet struct {
	// [brief]: IPv4 destination prefix.
	Inet *IpAddress `protobuf:"bytes,1,opt,name=inet,proto3,oneof"`
}

type RoutePrefix_Inet6 struct {
	// [brief]: IPv6 destination prefix.
	Inet6 *IpAddress `protobuf:"bytes,2,opt,name=inet6,proto3,oneof"`
}

type RoutePrefix_Inetvpn struct {
	// [brief]: IPv4 VPN (L3VPN) destination prefix.
	Inetvpn *L3VpnAddress `protobuf:"bytes,3,opt,name=inetvpn,proto3,oneof"`
}

type RoutePrefix_Inet6Vpn struct {
	// [brief]: IPv6 VPN (L3VPN) destination prefix.
	Inet6Vpn *L3VpnAddress `protobuf:"bytes,4,opt,name=inet6vpn,proto3,oneof"`
}

type RoutePrefix_LabeledInet struct {
	// [brief]: IPv4 Labeled-Unicast destination prefix.
	LabeledInet *IpAddress `protobuf:"bytes,5,opt,name=labeled_inet,json=labeledInet,proto3,oneof"`
}

type RoutePrefix_LabeledInet6 struct {
	// [brief]: IPv6 Labeled-Unicast destination prefix.
	LabeledInet6 *IpAddress `protobuf:"bytes,6,opt,name=labeled_inet6,json=labeledInet6,proto3,oneof"`
}

type RoutePrefix_InetSrtePolicy struct {
	// [brief]: IPv4 SR-TE policy prefix.
	InetSrtePolicy *SRTEAddress `protobuf:"bytes,7,opt,name=inet_srte_policy,json=inetSrtePolicy,proto3,oneof"`
}

type RoutePrefix_Inet6SrtePolicy struct {
	// [brief]: IPv6 SR-TE policy prefix.
	Inet6SrtePolicy *SRTEAddress `protobuf:"bytes,8,opt,name=inet6_srte_policy,json=inet6SrtePolicy,proto3,oneof"`
}

type RoutePrefix_InetFlowspec struct {
	// [brief]: IPv4 BGP flowspec prefix.
	InetFlowspec *FlowspecAddress `protobuf:"bytes,9,opt,name=inet_flowspec,json=inetFlowspec,proto3,oneof"`
}

type RoutePrefix_Inet6Flowspec struct {
	// [brief]: IPv6 BGP flowspec prefix.
	Inet6Flowspec *FlowspecAddress `protobuf:"bytes,10,opt,name=inet6_flowspec,json=inet6Flowspec,proto3,oneof"`
}

func (*RoutePrefix_Inet) isRoutePrefix_RoutePrefixAf() {}

func (*RoutePrefix_Inet6) isRoutePrefix_RoutePrefixAf() {}

func (*RoutePrefix_Inetvpn) isRoutePrefix_RoutePrefixAf() {}

func (*RoutePrefix_Inet6Vpn) isRoutePrefix_RoutePrefixAf() {}

func (*RoutePrefix_LabeledInet) isRoutePrefix_RoutePrefixAf() {}

func (*RoutePrefix_LabeledInet6) isRoutePrefix_RoutePrefixAf() {}

func (*RoutePrefix_InetSrtePolicy) isRoutePrefix_RoutePrefixAf() {}

func (*RoutePrefix_Inet6SrtePolicy) isRoutePrefix_RoutePrefixAf() {}

func (*RoutePrefix_InetFlowspec) isRoutePrefix_RoutePrefixAf() {}

func (*RoutePrefix_Inet6Flowspec) isRoutePrefix_RoutePrefixAf() {}

// [brief]: Network Address.
// [detail]: Network address defined for each supported address family.
type NetworkAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: only one field from the below can be set at the same time.
	//
	// Types that are assignable to Af:
	//	*NetworkAddress_Inet
	//	*NetworkAddress_Inet6
	//	*NetworkAddress_Mpls
	Af isNetworkAddress_Af `protobuf_oneof:"af"`
}

func (x *NetworkAddress) Reset() {
	*x = NetworkAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_base_types_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkAddress) ProtoMessage() {}

func (x *NetworkAddress) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_base_types_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkAddress.ProtoReflect.Descriptor instead.
func (*NetworkAddress) Descriptor() ([]byte, []int) {
	return file_jnx_routing_base_types_proto_rawDescGZIP(), []int{28}
}

func (m *NetworkAddress) GetAf() isNetworkAddress_Af {
	if m != nil {
		return m.Af
	}
	return nil
}

func (x *NetworkAddress) GetInet() *IpAddress {
	if x, ok := x.GetAf().(*NetworkAddress_Inet); ok {
		return x.Inet
	}
	return nil
}

func (x *NetworkAddress) GetInet6() *IpAddress {
	if x, ok := x.GetAf().(*NetworkAddress_Inet6); ok {
		return x.Inet6
	}
	return nil
}

func (x *NetworkAddress) GetMpls() *MplsAddress {
	if x, ok := x.GetAf().(*NetworkAddress_Mpls); ok {
		return x.Mpls
	}
	return nil
}

type isNetworkAddress_Af interface {
	isNetworkAddress_Af()
}

type NetworkAddress_Inet struct {
	// [brief]: IPv4 destination prefix.
	Inet *IpAddress `protobuf:"bytes,1,opt,name=inet,proto3,oneof"`
}

type NetworkAddress_Inet6 struct {
	// [brief]: IPv6 destination prefix.
	Inet6 *IpAddress `protobuf:"bytes,2,opt,name=inet6,proto3,oneof"`
}

type NetworkAddress_Mpls struct {
	// [brief]:  MPLS label.
	// [detail]: For modifying route table contents, the only valid
	// prefix length is 52 (20 bit label + 32 bit interface index).
	// Interface index is currently implicit and defaults to 0.
	// For route lookups, use a prefix length of 52 for exact lookups and
	// 0 for matching all the routes.
	Mpls *MplsAddress `protobuf:"bytes,3,opt,name=mpls,proto3,oneof"`
}

func (*NetworkAddress_Inet) isNetworkAddress_Af() {}

func (*NetworkAddress_Inet6) isNetworkAddress_Af() {}

func (*NetworkAddress_Mpls) isNetworkAddress_Af() {}

// [brief]: Communities.
// [detail]: A single community is a string identifying a regular, extended,
// or well-known community name or values with no whitespace.
//
// The communities will be recognized:
//
// Well-known communities:
//    no-export
//    no-advertise
//    no-export-confed
//    llgr-stale
//    no-llgr
//
// RFC 1997 communities:
//    domain-id:ipaddress:0
//    domain-id-vendor:
//    <n>:<n>
//
// Route targets extended communities:
//    target:ipv4-address:16 bit#
//    target:16bit#:32bit#
//    target:as2b:16bit#:32bit#
//    target:as4b:32bit#:16bit#
//
// Origin extended communities:
//    origin:ipv4-address:16 bit#
//    origin:16bit#:32bit#
//
// Bandwidth management extended communities:
//    bandwidth:16bit#:bw
//    {traffic-rate}:16 bit#:bw
//
// Redirect extended communities:
//    redirect:ipv4-address:16 bit#
//    redirect:16bit#:32bit#
//
// Tunnel encapsulation extended communities:
//    encapsulation:0L:tunnel-type
//
type Community struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [mandatory]:
	// [brief]: A string that uniquely identifies a single regular,extended, or well-known community.
	// [range]: A community string must not exceed 1023 characters.
	Community string `protobuf:"bytes,1,opt,name=community,proto3" json:"community,omitempty"`
}

func (x *Community) Reset() {
	*x = Community{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_base_types_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Community) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Community) ProtoMessage() {}

func (x *Community) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_base_types_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Community.ProtoReflect.Descriptor instead.
func (*Community) Descriptor() ([]byte, []int) {
	return file_jnx_routing_base_types_proto_rawDescGZIP(), []int{29}
}

func (x *Community) GetCommunity() string {
	if x != nil {
		return x.Community
	}
	return ""
}

// [brief]: A list of communities.
// [detail]: A list of individual communties.
type Communities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: An unordered list of zero, one, or more individual communities.
	// A Community list may not exceed 256 communities.
	Communities []*Community `protobuf:"bytes,1,rep,name=communities,proto3" json:"communities,omitempty"`
}

func (x *Communities) Reset() {
	*x = Communities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_base_types_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Communities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Communities) ProtoMessage() {}

func (x *Communities) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_base_types_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Communities.ProtoReflect.Descriptor instead.
func (*Communities) Descriptor() ([]byte, []int) {
	return file_jnx_routing_base_types_proto_rawDescGZIP(), []int{30}
}

func (x *Communities) GetCommunities() []*Community {
	if x != nil {
		return x.Communities
	}
	return nil
}

// [brief]: AS Paths.
// [detail]: AS path through which the route was learned.
//
// An AS Path is a string composed of an series of AS numbers
// separated by whitespace special delimiters.
// The following special delimiting characters are used for signifying
// confederations, confederation-sets, and AS-sets:
//
//     [ ] - Brackets enclose the local AS number associated with the AS set
//     if more than one AS number is configured on the routing device,
//     or if AS path prepending is configured.
//
//     ( ) - Parentheses enclose a confederation.
//
//     ( [ ] ) - Parentheses and brackets enclose a confederation set.
//
// Programmed AS Paths implicitly have path origin IGP.
type AsPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [mandatory]:
	// [brief]: A string listing AS numbers.
	// [detail]: A string listing AS numbers separated by whitespace and special
	// delimiter charaters (see message as-path).
	// [range]: An AS Path must not exceed 1023 characters.
	Aspath string `protobuf:"bytes,1,opt,name=aspath,proto3" json:"aspath,omitempty"`
}

func (x *AsPath) Reset() {
	*x = AsPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_base_types_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsPath) ProtoMessage() {}

func (x *AsPath) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_base_types_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsPath.ProtoReflect.Descriptor instead.
func (*AsPath) Descriptor() ([]byte, []int) {
	return file_jnx_routing_base_types_proto_rawDescGZIP(), []int{31}
}

func (x *AsPath) GetAspath() string {
	if x != nil {
		return x.Aspath
	}
	return ""
}

var File_jnx_routing_base_types_proto protoreflect.FileDescriptor

var file_jnx_routing_base_types_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x6a, 0x6e, 0x78, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x1a, 0x1b, 0x6a, 0x6e, 0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x6a, 0x6e, 0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x24,
	0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1e, 0x0a, 0x0c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x94, 0x01, 0x0a, 0x0a, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65,
	0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x4f, 0x0a, 0x07, 0x52,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x30, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x73, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x6c, 0x0a, 0x07,
	0x52, 0x64, 0x54, 0x79, 0x70, 0x65, 0x31, 0x12, 0x38, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x4f, 0x0a, 0x07, 0x52, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x32, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x73, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xba, 0x01, 0x0a, 0x12,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x12, 0x31, 0x0a, 0x03, 0x72, 0x64, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x64, 0x54, 0x79, 0x70, 0x65, 0x30, 0x48, 0x00,
	0x52, 0x03, 0x72, 0x64, 0x30, 0x12, 0x31, 0x0a, 0x03, 0x72, 0x64, 0x31, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x31, 0x48, 0x00, 0x52, 0x03, 0x72, 0x64, 0x31, 0x12, 0x31, 0x0a, 0x03, 0x72, 0x64, 0x32, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x32, 0x48, 0x00, 0x52, 0x03, 0x72, 0x64, 0x32, 0x42, 0x0b, 0x0a, 0x09, 0x72,
	0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x7e, 0x0a, 0x0c, 0x4c, 0x33, 0x76, 0x70,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x02, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x72, 0x52, 0x02,
	0x72, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x76, 0x70, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x07, 0x76, 0x70, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x22, 0x81, 0x01, 0x0a, 0x0a, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x74, 0x74, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x6f,
	0x66, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x62,
	0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x4f, 0x66, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x22, 0x92, 0x01, 0x0a,
	0x0f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x3c, 0x0a, 0x06, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x41,
	0x0a, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x22, 0x23, 0x0a, 0x0b, 0x4d, 0x70, 0x6c, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x4d, 0x0a, 0x0a, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x12, 0x3f, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x68, 0x0a, 0x08, 0x53, 0x69, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x4a, 0x0a, 0x0f, 0x73, 0x69, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0d,
	0x73, 0x69, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x10, 0x0a,
	0x0e, 0x73, 0x69, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x58, 0x0a, 0x0c, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x31, 0x12,
	0x48, 0x0a, 0x0f, 0x73, 0x69, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a,
	0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x73, 0x69, 0x64, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x65, 0x0a, 0x0b, 0x53, 0x52, 0x54,
	0x45, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x0d, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x31, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x31, 0x42, 0x0b, 0x0a, 0x09, 0x73, 0x72, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x68, 0x0a, 0x0f, 0x53, 0x52, 0x54, 0x45, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3d, 0x0a, 0x08, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x52, 0x54, 0x45, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x39, 0x0a, 0x11, 0x53, 0x52,
	0x54, 0x45, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12,
	0x24, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x22, 0x21, 0x0a, 0x09, 0x53, 0x52, 0x54, 0x45, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x54, 0x0a, 0x0e, 0x53, 0x52, 0x54, 0x45,
	0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x49, 0x44, 0x12, 0x42, 0x0a, 0x0d, 0x62, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x69, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x72, 0x49, 0x64, 0x22, 0x2b,
	0x0a, 0x08, 0x53, 0x52, 0x54, 0x45, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x33, 0x0a, 0x0c, 0x53,
	0x52, 0x54, 0x45, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x72, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x73, 0x72, 0x74, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x22, 0x51, 0x0a, 0x08, 0x53, 0x52, 0x54, 0x45, 0x45, 0x6e, 0x6c, 0x70, 0x12, 0x45, 0x0a, 0x09,
	0x73, 0x72, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x6c, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x28, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x52, 0x54, 0x45, 0x45, 0x6e, 0x6c, 0x70, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x08, 0x73, 0x72, 0x74, 0x65, 0x45,
	0x6e, 0x6c, 0x70, 0x22, 0xda, 0x01, 0x0a, 0x0b, 0x53, 0x52, 0x54, 0x45, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a,
	0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3a, 0x0a, 0x08, 0x73, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x52, 0x54, 0x45, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x52, 0x07, 0x73, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x52, 0x0a, 0x10,
	0x73, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x52,
	0x54, 0x45, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x72, 0x52,
	0x0f, 0x73, 0x72, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x72,
	0x22, 0xf9, 0x02, 0x0a, 0x0d, 0x53, 0x52, 0x54, 0x45, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x45, 0x0a, 0x0b, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65,
	0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x53,
	0x52, 0x54, 0x45, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x49, 0x44, 0x52, 0x0a, 0x62,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x52, 0x54, 0x45, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x73, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x52,
	0x54, 0x45, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x73, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43,
	0x0a, 0x0b, 0x73, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x52, 0x54, 0x45, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x73, 0x72, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x07, 0x73, 0x72, 0x5f, 0x65, 0x6e, 0x6c, 0x70, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x52, 0x54, 0x45,
	0x45, 0x6e, 0x6c, 0x70, 0x52, 0x06, 0x73, 0x72, 0x45, 0x6e, 0x6c, 0x70, 0x22, 0xbb, 0x01, 0x0a,
	0x11, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x6d, 0x61, 0x72, 0x6b, 0x44, 0x73, 0x63, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x12,
	0x31, 0x0a, 0x15, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x5f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x52, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x19, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4f, 0x0a, 0x10, 0x73, 0x72, 0x74, 0x65,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x52, 0x54, 0x45, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x72, 0x74, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x0d, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x70, 0x65, 0x63, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0f, 0x0a, 0x0d, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x66, 0x22, 0xc4, 0x06, 0x0a, 0x0f, 0x46,
	0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3b,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x64,
	0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x4c, 0x65, 0x6e, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c,
	0x65, 0x6e, 0x12, 0x43, 0x0a, 0x0c, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a,
	0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69,
	0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x69, 0x70, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x36, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x3f, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x64, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x12, 0x3d, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x3f, 0x0a, 0x0a, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x69, 0x63, 0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x69, 0x63, 0x6d, 0x70, 0x43, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x35, 0x0a, 0x09, 0x74, 0x63, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x63, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x08,
	0x74, 0x63, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x70, 0x6b, 0x74, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x0a, 0x70, 0x6b, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x73, 0x12, 0x36, 0x0a, 0x05, 0x64,
	0x73, 0x63, 0x70, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x64, 0x73,
	0x63, 0x70, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x70, 0x46, 0x72, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x08, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0xc6, 0x05, 0x0a, 0x0b, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x12, 0x2f, 0x0a, 0x04, 0x69, 0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e,
	0x65, 0x74, 0x12, 0x31, 0x0a, 0x05, 0x69, 0x6e, 0x65, 0x74, 0x36, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x05,
	0x69, 0x6e, 0x65, 0x74, 0x36, 0x12, 0x3e, 0x0a, 0x07, 0x69, 0x6e, 0x65, 0x74, 0x76, 0x70, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x4c, 0x33,
	0x76, 0x70, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e,
	0x65, 0x74, 0x76, 0x70, 0x6e, 0x12, 0x40, 0x0a, 0x08, 0x69, 0x6e, 0x65, 0x74, 0x36, 0x76, 0x70,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65,
	0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x4c,
	0x33, 0x76, 0x70, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x08, 0x69,
	0x6e, 0x65, 0x74, 0x36, 0x76, 0x70, 0x6e, 0x12, 0x3e, 0x0a, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x65, 0x64, 0x5f, 0x69, 0x6e, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x65, 0x64, 0x49, 0x6e, 0x65, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x65, 0x64, 0x5f, 0x69, 0x6e, 0x65, 0x74, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x65, 0x74, 0x36, 0x12, 0x4d, 0x0a, 0x10, 0x69, 0x6e, 0x65,
	0x74, 0x5f, 0x73, 0x72, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x52, 0x54, 0x45, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x6e, 0x65, 0x74, 0x53, 0x72,
	0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x4f, 0x0a, 0x11, 0x69, 0x6e, 0x65, 0x74,
	0x36, 0x5f, 0x73, 0x72, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x52, 0x54, 0x45, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x65, 0x74, 0x36, 0x53,
	0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x4c, 0x0a, 0x0d, 0x69, 0x6e, 0x65,
	0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x65, 0x74, 0x46,
	0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x12, 0x4e, 0x0a, 0x0e, 0x69, 0x6e, 0x65, 0x74, 0x36,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x69, 0x6e, 0x65, 0x74, 0x36, 0x46,
	0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x42, 0x11, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x61, 0x66, 0x22, 0xb3, 0x01, 0x0a, 0x0e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a,
	0x04, 0x69, 0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x65, 0x74, 0x12, 0x31,
	0x0a, 0x05, 0x69, 0x6e, 0x65, 0x74, 0x36, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x65, 0x74,
	0x36, 0x12, 0x37, 0x0a, 0x04, 0x6d, 0x70, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x70, 0x6c, 0x73, 0x42, 0x04, 0x0a, 0x02, 0x61, 0x66,
	0x22, 0x29, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x22, 0x50, 0x0a, 0x0b, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x20, 0x0a,
	0x06, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x73, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x73, 0x70, 0x61, 0x74, 0x68, 0x2a,
	0x32, 0x0a, 0x10, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x52,
	0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49,
	0x44, 0x10, 0x01, 0x2a, 0xf6, 0x01, 0x0a, 0x0b, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x41, 0x66, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x54, 0x5f, 0x41, 0x46, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x54, 0x5f, 0x41, 0x46, 0x5f, 0x49,
	0x4e, 0x45, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x54, 0x5f, 0x41, 0x46, 0x5f, 0x49,
	0x4e, 0x45, 0x54, 0x36, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x54, 0x5f, 0x41, 0x46, 0x5f,
	0x49, 0x4e, 0x45, 0x54, 0x56, 0x50, 0x4e, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x54, 0x5f,
	0x41, 0x46, 0x5f, 0x49, 0x4e, 0x45, 0x54, 0x36, 0x56, 0x50, 0x4e, 0x10, 0x04, 0x12, 0x16, 0x0a,
	0x12, 0x52, 0x54, 0x5f, 0x41, 0x46, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x45, 0x44, 0x5f, 0x49,
	0x4e, 0x45, 0x54, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x54, 0x5f, 0x41, 0x46, 0x5f, 0x4c,
	0x41, 0x42, 0x45, 0x4c, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x45, 0x54, 0x36, 0x10, 0x06, 0x12, 0x13,
	0x0a, 0x0f, 0x52, 0x54, 0x5f, 0x41, 0x46, 0x5f, 0x49, 0x4e, 0x45, 0x54, 0x5f, 0x53, 0x52, 0x54,
	0x45, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x54, 0x5f, 0x41, 0x46, 0x5f, 0x49, 0x4e, 0x45,
	0x54, 0x36, 0x5f, 0x53, 0x52, 0x54, 0x45, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x54, 0x5f,
	0x41, 0x46, 0x5f, 0x49, 0x4e, 0x45, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x53, 0x50, 0x45, 0x43,
	0x10, 0x09, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x54, 0x5f, 0x41, 0x46, 0x5f, 0x49, 0x4e, 0x45, 0x54,
	0x36, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x53, 0x50, 0x45, 0x43, 0x10, 0x0a, 0x2a, 0x37, 0x0a, 0x0e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x4f, 0x4f, 0x50, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x4f, 0x50, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x55, 0x53, 0x48, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x53,
	0x57, 0x41, 0x50, 0x10, 0x03, 0x2a, 0xb6, 0x01, 0x0a, 0x12, 0x53, 0x52, 0x54, 0x45, 0x45, 0x6e,
	0x6c, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x15,
	0x53, 0x52, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x4c, 0x50, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x56, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x55, 0x53, 0x48, 0x5f,
	0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x4c, 0x41,
	0x42, 0x45, 0x4c, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x49, 0x50,
	0x56, 0x36, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x49, 0x50, 0x56, 0x34,
	0x5f, 0x4f, 0x52, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x4e, 0x55, 0x4c,
	0x4c, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x4f, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49,
	0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x04, 0x2a, 0x8a,
	0x04, 0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4c, 0x4f, 0x43, 0x41,
	0x4c, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4b, 0x45, 0x52,
	0x4e, 0x45, 0x4c, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52,
	0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x33, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x07, 0x12, 0x0d,
	0x0a, 0x09, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x49, 0x50, 0x10, 0x08, 0x12, 0x0f, 0x0a,
	0x0b, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x49, 0x50, 0x4e, 0x47, 0x10, 0x09, 0x12, 0x0d,
	0x0a, 0x09, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x42, 0x47, 0x50, 0x10, 0x0a, 0x12, 0x10, 0x0a,
	0x0c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x0b, 0x12,
	0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x49, 0x53, 0x49, 0x53, 0x10, 0x0c, 0x12,
	0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x49, 0x47, 0x4d, 0x50, 0x10, 0x0d, 0x12,
	0x13, 0x0a, 0x0f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41,
	0x54, 0x45, 0x10, 0x0e, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x44, 0x56,
	0x4d, 0x52, 0x50, 0x10, 0x0f, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x50,
	0x49, 0x4d, 0x10, 0x10, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x53,
	0x44, 0x50, 0x10, 0x11, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x50,
	0x4c, 0x53, 0x10, 0x12, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x53,
	0x56, 0x50, 0x10, 0x13, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x43,
	0x43, 0x10, 0x14, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4c, 0x44, 0x50,
	0x10, 0x15, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x56, 0x50, 0x4e, 0x10,
	0x16, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x56, 0x50, 0x4e, 0x10,
	0x17, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x43, 0x41, 0x53, 0x54,
	0x10, 0x18, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4c, 0x32, 0x56, 0x50,
	0x4e, 0x10, 0x19, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4c, 0x32, 0x43,
	0x4b, 0x54, 0x10, 0x1a, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x42, 0x47,
	0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x1b, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x49, 0x46, 0x54, 0x10, 0x1c, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x1d, 0x42, 0x24, 0x5a, 0x11, 0x6c,
	0x61, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x82, 0xb5, 0x18, 0x05, 0x30, 0x2e, 0x31, 0x2e, 0x30, 0x8a, 0xb5, 0x18, 0x04, 0x32, 0x30, 0x2e,
	0x34, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_jnx_routing_base_types_proto_rawDescOnce sync.Once
	file_jnx_routing_base_types_proto_rawDescData = file_jnx_routing_base_types_proto_rawDesc
)

func file_jnx_routing_base_types_proto_rawDescGZIP() []byte {
	file_jnx_routing_base_types_proto_rawDescOnce.Do(func() {
		file_jnx_routing_base_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_jnx_routing_base_types_proto_rawDescData)
	})
	return file_jnx_routing_base_types_proto_rawDescData
}

var file_jnx_routing_base_types_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_jnx_routing_base_types_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_jnx_routing_base_types_proto_goTypes = []interface{}{
	(RouteTableFormat)(0),             // 0: jnx.jet.routing.base.RouteTableFormat
	(RouteAfType)(0),                  // 1: jnx.jet.routing.base.RouteAfType
	(LabelOperation)(0),               // 2: jnx.jet.routing.base.LabelOperation
	(SRTEEnlpOperations)(0),           // 3: jnx.jet.routing.base.SRTEEnlpOperations
	(RouteProtoType)(0),               // 4: jnx.jet.routing.base.RouteProtoType
	(*RouteTableName)(nil),            // 5: jnx.jet.routing.base.RouteTableName
	(*RouteTableId)(nil),              // 6: jnx.jet.routing.base.RouteTableId
	(*RouteTable)(nil),                // 7: jnx.jet.routing.base.RouteTable
	(*RdType0)(nil),                   // 8: jnx.jet.routing.base.RdType0
	(*RdType1)(nil),                   // 9: jnx.jet.routing.base.RdType1
	(*RdType2)(nil),                   // 10: jnx.jet.routing.base.RdType2
	(*RouteDistinguisher)(nil),        // 11: jnx.jet.routing.base.RouteDistinguisher
	(*L3VpnAddress)(nil),              // 12: jnx.jet.routing.base.L3vpnAddress
	(*LabelEntry)(nil),                // 13: jnx.jet.routing.base.LabelEntry
	(*LabelStackEntry)(nil),           // 14: jnx.jet.routing.base.LabelStackEntry
	(*MplsAddress)(nil),               // 15: jnx.jet.routing.base.MplsAddress
	(*LabelStack)(nil),                // 16: jnx.jet.routing.base.LabelStack
	(*SidEntry)(nil),                  // 17: jnx.jet.routing.base.SidEntry
	(*SegmentType1)(nil),              // 18: jnx.jet.routing.base.SegmentType1
	(*SRTESegment)(nil),               // 19: jnx.jet.routing.base.SRTESegment
	(*SRTESegmentList)(nil),           // 20: jnx.jet.routing.base.SRTESegmentList
	(*SRTEDistinguisher)(nil),         // 21: jnx.jet.routing.base.SRTEDistinguisher
	(*SRTEColor)(nil),                 // 22: jnx.jet.routing.base.SRTEColor
	(*SRTEBindingSID)(nil),            // 23: jnx.jet.routing.base.SRTEBindingSID
	(*SRTEName)(nil),                  // 24: jnx.jet.routing.base.SRTEName
	(*SRTEPriority)(nil),              // 25: jnx.jet.routing.base.SRTEPriority
	(*SRTEEnlp)(nil),                  // 26: jnx.jet.routing.base.SRTEEnlp
	(*SRTEAddress)(nil),               // 27: jnx.jet.routing.base.SRTEAddress
	(*SRTERouteData)(nil),             // 28: jnx.jet.routing.base.SRTERouteData
	(*FlowspecRouteData)(nil),         // 29: jnx.jet.routing.base.FlowspecRouteData
	(*AddressFamilySpecificData)(nil), // 30: jnx.jet.routing.base.AddressFamilySpecificData
	(*FlowspecAddress)(nil),           // 31: jnx.jet.routing.base.FlowspecAddress
	(*RoutePrefix)(nil),               // 32: jnx.jet.routing.base.RoutePrefix
	(*NetworkAddress)(nil),            // 33: jnx.jet.routing.base.NetworkAddress
	(*Community)(nil),                 // 34: jnx.jet.routing.base.Community
	(*Communities)(nil),               // 35: jnx.jet.routing.base.Communities
	(*AsPath)(nil),                    // 36: jnx.jet.routing.base.AsPath
	(*IpAddress)(nil),                 // 37: jnx.jet.common.IpAddress
	(*NumericRangeList)(nil),          // 38: jnx.jet.common.NumericRangeList
	(TcpFlags)(0),                     // 39: jnx.jet.common.TcpFlags
	(*IpFragementFlags)(nil),          // 40: jnx.jet.common.IpFragementFlags
}
var file_jnx_routing_base_types_proto_depIdxs = []int32{
	6,  // 0: jnx.jet.routing.base.RouteTable.id:type_name -> jnx.jet.routing.base.RouteTableId
	5,  // 1: jnx.jet.routing.base.RouteTable.name:type_name -> jnx.jet.routing.base.RouteTableName
	37, // 2: jnx.jet.routing.base.RdType1.ip_address:type_name -> jnx.jet.common.IpAddress
	8,  // 3: jnx.jet.routing.base.RouteDistinguisher.rd0:type_name -> jnx.jet.routing.base.RdType0
	9,  // 4: jnx.jet.routing.base.RouteDistinguisher.rd1:type_name -> jnx.jet.routing.base.RdType1
	10, // 5: jnx.jet.routing.base.RouteDistinguisher.rd2:type_name -> jnx.jet.routing.base.RdType2
	11, // 6: jnx.jet.routing.base.L3vpnAddress.rd:type_name -> jnx.jet.routing.base.RouteDistinguisher
	37, // 7: jnx.jet.routing.base.L3vpnAddress.vpn_addr:type_name -> jnx.jet.common.IpAddress
	2,  // 8: jnx.jet.routing.base.LabelStackEntry.opcode:type_name -> jnx.jet.routing.base.LabelOperation
	13, // 9: jnx.jet.routing.base.LabelStackEntry.label_entry:type_name -> jnx.jet.routing.base.LabelEntry
	14, // 10: jnx.jet.routing.base.LabelStack.entries:type_name -> jnx.jet.routing.base.LabelStackEntry
	13, // 11: jnx.jet.routing.base.SidEntry.sid_label_entry:type_name -> jnx.jet.routing.base.LabelEntry
	13, // 12: jnx.jet.routing.base.SegmentType1.sid_label_entry:type_name -> jnx.jet.routing.base.LabelEntry
	18, // 13: jnx.jet.routing.base.SRTESegment.segment_type1:type_name -> jnx.jet.routing.base.SegmentType1
	19, // 14: jnx.jet.routing.base.SRTESegmentList.segments:type_name -> jnx.jet.routing.base.SRTESegment
	17, // 15: jnx.jet.routing.base.SRTEBindingSID.binding_sr_id:type_name -> jnx.jet.routing.base.SidEntry
	3,  // 16: jnx.jet.routing.base.SRTEEnlp.srte_enlp:type_name -> jnx.jet.routing.base.SRTEEnlpOperations
	37, // 17: jnx.jet.routing.base.SRTEAddress.destination:type_name -> jnx.jet.common.IpAddress
	22, // 18: jnx.jet.routing.base.SRTEAddress.sr_color:type_name -> jnx.jet.routing.base.SRTEColor
	21, // 19: jnx.jet.routing.base.SRTEAddress.sr_distinguisher:type_name -> jnx.jet.routing.base.SRTEDistinguisher
	23, // 20: jnx.jet.routing.base.SRTERouteData.binding_sid:type_name -> jnx.jet.routing.base.SRTEBindingSID
	20, // 21: jnx.jet.routing.base.SRTERouteData.segment_lists:type_name -> jnx.jet.routing.base.SRTESegmentList
	24, // 22: jnx.jet.routing.base.SRTERouteData.sr_name:type_name -> jnx.jet.routing.base.SRTEName
	25, // 23: jnx.jet.routing.base.SRTERouteData.sr_priority:type_name -> jnx.jet.routing.base.SRTEPriority
	26, // 24: jnx.jet.routing.base.SRTERouteData.sr_enlp:type_name -> jnx.jet.routing.base.SRTEEnlp
	28, // 25: jnx.jet.routing.base.AddressFamilySpecificData.srte_policy_data:type_name -> jnx.jet.routing.base.SRTERouteData
	29, // 26: jnx.jet.routing.base.AddressFamilySpecificData.flowspec_data:type_name -> jnx.jet.routing.base.FlowspecRouteData
	37, // 27: jnx.jet.routing.base.FlowspecAddress.destination:type_name -> jnx.jet.common.IpAddress
	37, // 28: jnx.jet.routing.base.FlowspecAddress.source:type_name -> jnx.jet.common.IpAddress
	38, // 29: jnx.jet.routing.base.FlowspecAddress.ip_protocols:type_name -> jnx.jet.common.NumericRangeList
	38, // 30: jnx.jet.routing.base.FlowspecAddress.ports:type_name -> jnx.jet.common.NumericRangeList
	38, // 31: jnx.jet.routing.base.FlowspecAddress.dest_ports:type_name -> jnx.jet.common.NumericRangeList
	38, // 32: jnx.jet.routing.base.FlowspecAddress.src_ports:type_name -> jnx.jet.common.NumericRangeList
	38, // 33: jnx.jet.routing.base.FlowspecAddress.icmp_types:type_name -> jnx.jet.common.NumericRangeList
	38, // 34: jnx.jet.routing.base.FlowspecAddress.icmp_codes:type_name -> jnx.jet.common.NumericRangeList
	39, // 35: jnx.jet.routing.base.FlowspecAddress.tcp_flags:type_name -> jnx.jet.common.TcpFlags
	38, // 36: jnx.jet.routing.base.FlowspecAddress.pkt_lengths:type_name -> jnx.jet.common.NumericRangeList
	38, // 37: jnx.jet.routing.base.FlowspecAddress.dscps:type_name -> jnx.jet.common.NumericRangeList
	40, // 38: jnx.jet.routing.base.FlowspecAddress.fragment:type_name -> jnx.jet.common.IpFragementFlags
	37, // 39: jnx.jet.routing.base.RoutePrefix.inet:type_name -> jnx.jet.common.IpAddress
	37, // 40: jnx.jet.routing.base.RoutePrefix.inet6:type_name -> jnx.jet.common.IpAddress
	12, // 41: jnx.jet.routing.base.RoutePrefix.inetvpn:type_name -> jnx.jet.routing.base.L3vpnAddress
	12, // 42: jnx.jet.routing.base.RoutePrefix.inet6vpn:type_name -> jnx.jet.routing.base.L3vpnAddress
	37, // 43: jnx.jet.routing.base.RoutePrefix.labeled_inet:type_name -> jnx.jet.common.IpAddress
	37, // 44: jnx.jet.routing.base.RoutePrefix.labeled_inet6:type_name -> jnx.jet.common.IpAddress
	27, // 45: jnx.jet.routing.base.RoutePrefix.inet_srte_policy:type_name -> jnx.jet.routing.base.SRTEAddress
	27, // 46: jnx.jet.routing.base.RoutePrefix.inet6_srte_policy:type_name -> jnx.jet.routing.base.SRTEAddress
	31, // 47: jnx.jet.routing.base.RoutePrefix.inet_flowspec:type_name -> jnx.jet.routing.base.FlowspecAddress
	31, // 48: jnx.jet.routing.base.RoutePrefix.inet6_flowspec:type_name -> jnx.jet.routing.base.FlowspecAddress
	37, // 49: jnx.jet.routing.base.NetworkAddress.inet:type_name -> jnx.jet.common.IpAddress
	37, // 50: jnx.jet.routing.base.NetworkAddress.inet6:type_name -> jnx.jet.common.IpAddress
	15, // 51: jnx.jet.routing.base.NetworkAddress.mpls:type_name -> jnx.jet.routing.base.MplsAddress
	34, // 52: jnx.jet.routing.base.Communities.communities:type_name -> jnx.jet.routing.base.Community
	53, // [53:53] is the sub-list for method output_type
	53, // [53:53] is the sub-list for method input_type
	53, // [53:53] is the sub-list for extension type_name
	53, // [53:53] is the sub-list for extension extendee
	0,  // [0:53] is the sub-list for field type_name
}

func init() { file_jnx_routing_base_types_proto_init() }
func file_jnx_routing_base_types_proto_init() {
	if File_jnx_routing_base_types_proto != nil {
		return
	}
	file_jnx_common_addr_types_proto_init()
	file_jnx_common_base_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_jnx_routing_base_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteTableName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_base_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteTableId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_base_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_base_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RdType0); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_base_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RdType1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_base_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RdType2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_base_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteDistinguisher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_base_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L3VpnAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_base_types_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_base_types_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelStackEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_base_types_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_base_types_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelStack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_base_types_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SidEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_base_types_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentType1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_base_types_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRTESegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_base_types_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRTESegmentList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_base_types_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRTEDistinguisher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_base_types_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRTEColor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_base_types_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRTEBindingSID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_base_types_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRTEName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_base_types_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRTEPriority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_base_types_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRTEEnlp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_base_types_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRTEAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_base_types_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRTERouteData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_base_types_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowspecRouteData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_base_types_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressFamilySpecificData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_base_types_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowspecAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_base_types_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutePrefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_base_types_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_base_types_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Community); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_base_types_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Communities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_base_types_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_jnx_routing_base_types_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*RouteTable_Id)(nil),
		(*RouteTable_Name)(nil),
	}
	file_jnx_routing_base_types_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*RouteDistinguisher_Rd0)(nil),
		(*RouteDistinguisher_Rd1)(nil),
		(*RouteDistinguisher_Rd2)(nil),
	}
	file_jnx_routing_base_types_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*SidEntry_SidLabelEntry)(nil),
	}
	file_jnx_routing_base_types_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*SRTESegment_SegmentType1)(nil),
	}
	file_jnx_routing_base_types_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*AddressFamilySpecificData_SrtePolicyData)(nil),
		(*AddressFamilySpecificData_FlowspecData)(nil),
	}
	file_jnx_routing_base_types_proto_msgTypes[27].OneofWrappers = []interface{}{
		(*RoutePrefix_Inet)(nil),
		(*RoutePrefix_Inet6)(nil),
		(*RoutePrefix_Inetvpn)(nil),
		(*RoutePrefix_Inet6Vpn)(nil),
		(*RoutePrefix_LabeledInet)(nil),
		(*RoutePrefix_LabeledInet6)(nil),
		(*RoutePrefix_InetSrtePolicy)(nil),
		(*RoutePrefix_Inet6SrtePolicy)(nil),
		(*RoutePrefix_InetFlowspec)(nil),
		(*RoutePrefix_Inet6Flowspec)(nil),
	}
	file_jnx_routing_base_types_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*NetworkAddress_Inet)(nil),
		(*NetworkAddress_Inet6)(nil),
		(*NetworkAddress_Mpls)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_jnx_routing_base_types_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_jnx_routing_base_types_proto_goTypes,
		DependencyIndexes: file_jnx_routing_base_types_proto_depIdxs,
		EnumInfos:         file_jnx_routing_base_types_proto_enumTypes,
		MessageInfos:      file_jnx_routing_base_types_proto_msgTypes,
	}.Build()
	File_jnx_routing_base_types_proto = out.File
	file_jnx_routing_base_types_proto_rawDesc = nil
	file_jnx_routing_base_types_proto_goTypes = nil
	file_jnx_routing_base_types_proto_depIdxs = nil
}
