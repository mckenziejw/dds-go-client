// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FirewallClient is the client API for Firewall service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FirewallClient interface {
	// [brief]: This RPC is used to add Filter onto a JUNOS device
	// [detail]: This RPC is used to add complete Filter with provided
	// all terms and returns the response with appropriate status.
	FilterAdd(ctx context.Context, in *FilterAddRequest, opts ...grpc.CallOption) (*FilterAddResponse, error)
	// [brief]: This RPC is used to delete Filter on JUNOS device
	// [detail]: This RPC is used to delete complete Filter. Term's are not
	// required to be a part of Filter while deleting. Term's are not validated and
	// untouched, Even if Term's are existing in Filter delete operation.
	FilterDelete(ctx context.Context, in *FilterDeleteRequest, opts ...grpc.CallOption) (*FilterDeleteResponse, error)
	// [brief]: This RPC is to Modify one or more Term's in existing Filter.
	// [detail]: Changes an Filter based on the list of Filter Terms provided,
	// and returns the result. It is advisable to use this API to for small
	// incremental changes. For wholesale changes, it is recommended to use
	// TERM_OPERATION_REPLACE for all the Term's required to replace with same
	// Term names. For replacing all Terms with new set of Terms, use Term operation as
	// TERM_OPERATION_DELETE for existing Terms and TERM_OPERATION_ADD for NEW
	// Term entries and prepend to the existing Terms with in Filter.
	FilterModify(ctx context.Context, in *FilterModifyRequest, opts ...grpc.CallOption) (*FilterModifyResponse, error)
	// [brief]: This RPC used to Add binding of an Filter with given bind object and return the result.
	// [detail]: Binds Filter to the provided bind object if exists in the device
	// and provides the result. Note that the device can also have native cli
	// Filters configured. Then the order of exection of Filter will follow as
	// mentioned here:
	// In Ingress direction:
	// input_interface-> Client Filter -> CLI Filter -> route_lookup
	// In Egress direction:
	// route_lookup -> CLI Filter -> Client Filter -> output_interface.
	FilterBindAdd(ctx context.Context, in *FilterObjBindAddRequest, opts ...grpc.CallOption) (*FilterBindAddResponse, error)
	// [brief]: This RPC Deletes a binding of an Filter with mentioned bind object and return the result.
	// [detail]: Deletes a binding of an Filter with mentioned bind object and return the result.
	FilterBindDelete(ctx context.Context, in *FilterObjBindDeleteRequest, opts ...grpc.CallOption) (*FilterBindDeleteResponse, error)
	// [brief]: This RPC Adds a policer and returns the result.
	// [detail]: This RPC Adds a policer and returns the result.
	PolicerAdd(ctx context.Context, in *PolicerAddRequest, opts ...grpc.CallOption) (*PolicerAddResponse, error)
	// [brief]: This RPC Modifies the existing policer and returns the result.
	// [detail]: This RPC Modifies the existing policer and returns the result.
	PolicerModify(ctx context.Context, in *PolicerModifyRequest, opts ...grpc.CallOption) (*PolicerModifyResponse, error)
	// [brief]: This RPC deletes the existing policer and returns the result.
	// [detail]: This RPC deletes the existing policer and returns the result.
	PolicerDelete(ctx context.Context, in *PolicerDeleteRequest, opts ...grpc.CallOption) (*PolicerDeleteResponse, error)
	// [brief]: This RPC is used to get the counter value of specified Filter counter
	// [detail]: This RPC is used to get the counter value of specified counter
	// in given Filter. Also few points to note with this API. Currently only 1
	// counter get is supported.
	// This call is going to be blocking for worst case of 10 seconds which is non configurable.
	// The counter name is expected to be fully resolved.
	FilterCounterGet(ctx context.Context, in *FilterCounterGetRequest, opts ...grpc.CallOption) (*FilterCounterGetResponse, error)
	// [brief]: This RPC is used to get the counter value of specified policer counter of given Filter
	// [detail]: This RPC is used to get the counter value of specified policer counter
	// in given Filter. Also few points to note with this API. Currently only 1 counter get
	// is supported.
	// This call is going to be blocking for worst case of 10 seconds which is non configurable.
	// The counter name is expected to be fully resolved. For eg. for term specific policer counter
	// it is expected to be passed to full counter name as
	// <policer_name-term_name> .
	PolicerCounterGet(ctx context.Context, in *PolicerCounterGetRequest, opts ...grpc.CallOption) (*PolicerCounterGetResponse, error)
	// [brief]: This RPC used to clear filter counter of given Filter.
	// [detail]: Clears a particular counter or policer counter whose fully
	// qualified name is provided along with associated Filter.
	// Few points to note with this API. Currently only 1 counter get is supported.
	// The counter name is expected to be fully resolved. For eg. for term specific policer counter
	// it is expected to be passed to full counter name as
	// <policer_name-term_name> .
	FilterCounterSet(ctx context.Context, in *FilterCounterSetRequest, opts ...grpc.CallOption) (*FilterCounterSetResponse, error)
	// [brief]: This RPC used to clear policer counter of given Filter.
	// [detail]: Clears a particular policer counter whose fully
	// qualified name is provided along with associated.
	// Few points to note with this API. Currently only 1 counter get is supported.
	// The counter name is expected to be fully resolved. For eg. for term specific policer counter
	// it is expected to be passed to full counter name as
	// <policer_name-term_name> .
	PolicerCounterSet(ctx context.Context, in *PolicerCounterSetRequest, opts ...grpc.CallOption) (*PolicerCounterSetResponse, error)
}

type firewallClient struct {
	cc grpc.ClientConnInterface
}

func NewFirewallClient(cc grpc.ClientConnInterface) FirewallClient {
	return &firewallClient{cc}
}

func (c *firewallClient) FilterAdd(ctx context.Context, in *FilterAddRequest, opts ...grpc.CallOption) (*FilterAddResponse, error) {
	out := new(FilterAddResponse)
	err := c.cc.Invoke(ctx, "/jnx.jet.firewall.Firewall/FilterAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firewallClient) FilterDelete(ctx context.Context, in *FilterDeleteRequest, opts ...grpc.CallOption) (*FilterDeleteResponse, error) {
	out := new(FilterDeleteResponse)
	err := c.cc.Invoke(ctx, "/jnx.jet.firewall.Firewall/FilterDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firewallClient) FilterModify(ctx context.Context, in *FilterModifyRequest, opts ...grpc.CallOption) (*FilterModifyResponse, error) {
	out := new(FilterModifyResponse)
	err := c.cc.Invoke(ctx, "/jnx.jet.firewall.Firewall/FilterModify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firewallClient) FilterBindAdd(ctx context.Context, in *FilterObjBindAddRequest, opts ...grpc.CallOption) (*FilterBindAddResponse, error) {
	out := new(FilterBindAddResponse)
	err := c.cc.Invoke(ctx, "/jnx.jet.firewall.Firewall/FilterBindAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firewallClient) FilterBindDelete(ctx context.Context, in *FilterObjBindDeleteRequest, opts ...grpc.CallOption) (*FilterBindDeleteResponse, error) {
	out := new(FilterBindDeleteResponse)
	err := c.cc.Invoke(ctx, "/jnx.jet.firewall.Firewall/FilterBindDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firewallClient) PolicerAdd(ctx context.Context, in *PolicerAddRequest, opts ...grpc.CallOption) (*PolicerAddResponse, error) {
	out := new(PolicerAddResponse)
	err := c.cc.Invoke(ctx, "/jnx.jet.firewall.Firewall/PolicerAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firewallClient) PolicerModify(ctx context.Context, in *PolicerModifyRequest, opts ...grpc.CallOption) (*PolicerModifyResponse, error) {
	out := new(PolicerModifyResponse)
	err := c.cc.Invoke(ctx, "/jnx.jet.firewall.Firewall/PolicerModify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firewallClient) PolicerDelete(ctx context.Context, in *PolicerDeleteRequest, opts ...grpc.CallOption) (*PolicerDeleteResponse, error) {
	out := new(PolicerDeleteResponse)
	err := c.cc.Invoke(ctx, "/jnx.jet.firewall.Firewall/PolicerDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firewallClient) FilterCounterGet(ctx context.Context, in *FilterCounterGetRequest, opts ...grpc.CallOption) (*FilterCounterGetResponse, error) {
	out := new(FilterCounterGetResponse)
	err := c.cc.Invoke(ctx, "/jnx.jet.firewall.Firewall/FilterCounterGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firewallClient) PolicerCounterGet(ctx context.Context, in *PolicerCounterGetRequest, opts ...grpc.CallOption) (*PolicerCounterGetResponse, error) {
	out := new(PolicerCounterGetResponse)
	err := c.cc.Invoke(ctx, "/jnx.jet.firewall.Firewall/PolicerCounterGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firewallClient) FilterCounterSet(ctx context.Context, in *FilterCounterSetRequest, opts ...grpc.CallOption) (*FilterCounterSetResponse, error) {
	out := new(FilterCounterSetResponse)
	err := c.cc.Invoke(ctx, "/jnx.jet.firewall.Firewall/FilterCounterSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firewallClient) PolicerCounterSet(ctx context.Context, in *PolicerCounterSetRequest, opts ...grpc.CallOption) (*PolicerCounterSetResponse, error) {
	out := new(PolicerCounterSetResponse)
	err := c.cc.Invoke(ctx, "/jnx.jet.firewall.Firewall/PolicerCounterSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FirewallServer is the server API for Firewall service.
// All implementations must embed UnimplementedFirewallServer
// for forward compatibility
type FirewallServer interface {
	// [brief]: This RPC is used to add Filter onto a JUNOS device
	// [detail]: This RPC is used to add complete Filter with provided
	// all terms and returns the response with appropriate status.
	FilterAdd(context.Context, *FilterAddRequest) (*FilterAddResponse, error)
	// [brief]: This RPC is used to delete Filter on JUNOS device
	// [detail]: This RPC is used to delete complete Filter. Term's are not
	// required to be a part of Filter while deleting. Term's are not validated and
	// untouched, Even if Term's are existing in Filter delete operation.
	FilterDelete(context.Context, *FilterDeleteRequest) (*FilterDeleteResponse, error)
	// [brief]: This RPC is to Modify one or more Term's in existing Filter.
	// [detail]: Changes an Filter based on the list of Filter Terms provided,
	// and returns the result. It is advisable to use this API to for small
	// incremental changes. For wholesale changes, it is recommended to use
	// TERM_OPERATION_REPLACE for all the Term's required to replace with same
	// Term names. For replacing all Terms with new set of Terms, use Term operation as
	// TERM_OPERATION_DELETE for existing Terms and TERM_OPERATION_ADD for NEW
	// Term entries and prepend to the existing Terms with in Filter.
	FilterModify(context.Context, *FilterModifyRequest) (*FilterModifyResponse, error)
	// [brief]: This RPC used to Add binding of an Filter with given bind object and return the result.
	// [detail]: Binds Filter to the provided bind object if exists in the device
	// and provides the result. Note that the device can also have native cli
	// Filters configured. Then the order of exection of Filter will follow as
	// mentioned here:
	// In Ingress direction:
	// input_interface-> Client Filter -> CLI Filter -> route_lookup
	// In Egress direction:
	// route_lookup -> CLI Filter -> Client Filter -> output_interface.
	FilterBindAdd(context.Context, *FilterObjBindAddRequest) (*FilterBindAddResponse, error)
	// [brief]: This RPC Deletes a binding of an Filter with mentioned bind object and return the result.
	// [detail]: Deletes a binding of an Filter with mentioned bind object and return the result.
	FilterBindDelete(context.Context, *FilterObjBindDeleteRequest) (*FilterBindDeleteResponse, error)
	// [brief]: This RPC Adds a policer and returns the result.
	// [detail]: This RPC Adds a policer and returns the result.
	PolicerAdd(context.Context, *PolicerAddRequest) (*PolicerAddResponse, error)
	// [brief]: This RPC Modifies the existing policer and returns the result.
	// [detail]: This RPC Modifies the existing policer and returns the result.
	PolicerModify(context.Context, *PolicerModifyRequest) (*PolicerModifyResponse, error)
	// [brief]: This RPC deletes the existing policer and returns the result.
	// [detail]: This RPC deletes the existing policer and returns the result.
	PolicerDelete(context.Context, *PolicerDeleteRequest) (*PolicerDeleteResponse, error)
	// [brief]: This RPC is used to get the counter value of specified Filter counter
	// [detail]: This RPC is used to get the counter value of specified counter
	// in given Filter. Also few points to note with this API. Currently only 1
	// counter get is supported.
	// This call is going to be blocking for worst case of 10 seconds which is non configurable.
	// The counter name is expected to be fully resolved.
	FilterCounterGet(context.Context, *FilterCounterGetRequest) (*FilterCounterGetResponse, error)
	// [brief]: This RPC is used to get the counter value of specified policer counter of given Filter
	// [detail]: This RPC is used to get the counter value of specified policer counter
	// in given Filter. Also few points to note with this API. Currently only 1 counter get
	// is supported.
	// This call is going to be blocking for worst case of 10 seconds which is non configurable.
	// The counter name is expected to be fully resolved. For eg. for term specific policer counter
	// it is expected to be passed to full counter name as
	// <policer_name-term_name> .
	PolicerCounterGet(context.Context, *PolicerCounterGetRequest) (*PolicerCounterGetResponse, error)
	// [brief]: This RPC used to clear filter counter of given Filter.
	// [detail]: Clears a particular counter or policer counter whose fully
	// qualified name is provided along with associated Filter.
	// Few points to note with this API. Currently only 1 counter get is supported.
	// The counter name is expected to be fully resolved. For eg. for term specific policer counter
	// it is expected to be passed to full counter name as
	// <policer_name-term_name> .
	FilterCounterSet(context.Context, *FilterCounterSetRequest) (*FilterCounterSetResponse, error)
	// [brief]: This RPC used to clear policer counter of given Filter.
	// [detail]: Clears a particular policer counter whose fully
	// qualified name is provided along with associated.
	// Few points to note with this API. Currently only 1 counter get is supported.
	// The counter name is expected to be fully resolved. For eg. for term specific policer counter
	// it is expected to be passed to full counter name as
	// <policer_name-term_name> .
	PolicerCounterSet(context.Context, *PolicerCounterSetRequest) (*PolicerCounterSetResponse, error)
	mustEmbedUnimplementedFirewallServer()
}

// UnimplementedFirewallServer must be embedded to have forward compatible implementations.
type UnimplementedFirewallServer struct {
}

func (UnimplementedFirewallServer) FilterAdd(context.Context, *FilterAddRequest) (*FilterAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterAdd not implemented")
}
func (UnimplementedFirewallServer) FilterDelete(context.Context, *FilterDeleteRequest) (*FilterDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterDelete not implemented")
}
func (UnimplementedFirewallServer) FilterModify(context.Context, *FilterModifyRequest) (*FilterModifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterModify not implemented")
}
func (UnimplementedFirewallServer) FilterBindAdd(context.Context, *FilterObjBindAddRequest) (*FilterBindAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterBindAdd not implemented")
}
func (UnimplementedFirewallServer) FilterBindDelete(context.Context, *FilterObjBindDeleteRequest) (*FilterBindDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterBindDelete not implemented")
}
func (UnimplementedFirewallServer) PolicerAdd(context.Context, *PolicerAddRequest) (*PolicerAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PolicerAdd not implemented")
}
func (UnimplementedFirewallServer) PolicerModify(context.Context, *PolicerModifyRequest) (*PolicerModifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PolicerModify not implemented")
}
func (UnimplementedFirewallServer) PolicerDelete(context.Context, *PolicerDeleteRequest) (*PolicerDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PolicerDelete not implemented")
}
func (UnimplementedFirewallServer) FilterCounterGet(context.Context, *FilterCounterGetRequest) (*FilterCounterGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterCounterGet not implemented")
}
func (UnimplementedFirewallServer) PolicerCounterGet(context.Context, *PolicerCounterGetRequest) (*PolicerCounterGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PolicerCounterGet not implemented")
}
func (UnimplementedFirewallServer) FilterCounterSet(context.Context, *FilterCounterSetRequest) (*FilterCounterSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterCounterSet not implemented")
}
func (UnimplementedFirewallServer) PolicerCounterSet(context.Context, *PolicerCounterSetRequest) (*PolicerCounterSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PolicerCounterSet not implemented")
}
func (UnimplementedFirewallServer) mustEmbedUnimplementedFirewallServer() {}

// UnsafeFirewallServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FirewallServer will
// result in compilation errors.
type UnsafeFirewallServer interface {
	mustEmbedUnimplementedFirewallServer()
}

func RegisterFirewallServer(s grpc.ServiceRegistrar, srv FirewallServer) {
	s.RegisterService(&Firewall_ServiceDesc, srv)
}

func _Firewall_FilterAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirewallServer).FilterAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnx.jet.firewall.Firewall/FilterAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirewallServer).FilterAdd(ctx, req.(*FilterAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Firewall_FilterDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirewallServer).FilterDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnx.jet.firewall.Firewall/FilterDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirewallServer).FilterDelete(ctx, req.(*FilterDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Firewall_FilterModify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterModifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirewallServer).FilterModify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnx.jet.firewall.Firewall/FilterModify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirewallServer).FilterModify(ctx, req.(*FilterModifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Firewall_FilterBindAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterObjBindAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirewallServer).FilterBindAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnx.jet.firewall.Firewall/FilterBindAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirewallServer).FilterBindAdd(ctx, req.(*FilterObjBindAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Firewall_FilterBindDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterObjBindDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirewallServer).FilterBindDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnx.jet.firewall.Firewall/FilterBindDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirewallServer).FilterBindDelete(ctx, req.(*FilterObjBindDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Firewall_PolicerAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicerAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirewallServer).PolicerAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnx.jet.firewall.Firewall/PolicerAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirewallServer).PolicerAdd(ctx, req.(*PolicerAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Firewall_PolicerModify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicerModifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirewallServer).PolicerModify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnx.jet.firewall.Firewall/PolicerModify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirewallServer).PolicerModify(ctx, req.(*PolicerModifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Firewall_PolicerDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicerDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirewallServer).PolicerDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnx.jet.firewall.Firewall/PolicerDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirewallServer).PolicerDelete(ctx, req.(*PolicerDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Firewall_FilterCounterGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterCounterGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirewallServer).FilterCounterGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnx.jet.firewall.Firewall/FilterCounterGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirewallServer).FilterCounterGet(ctx, req.(*FilterCounterGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Firewall_PolicerCounterGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicerCounterGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirewallServer).PolicerCounterGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnx.jet.firewall.Firewall/PolicerCounterGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirewallServer).PolicerCounterGet(ctx, req.(*PolicerCounterGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Firewall_FilterCounterSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterCounterSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirewallServer).FilterCounterSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnx.jet.firewall.Firewall/FilterCounterSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirewallServer).FilterCounterSet(ctx, req.(*FilterCounterSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Firewall_PolicerCounterSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicerCounterSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirewallServer).PolicerCounterSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnx.jet.firewall.Firewall/PolicerCounterSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirewallServer).PolicerCounterSet(ctx, req.(*PolicerCounterSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Firewall_ServiceDesc is the grpc.ServiceDesc for Firewall service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Firewall_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jnx.jet.firewall.Firewall",
	HandlerType: (*FirewallServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FilterAdd",
			Handler:    _Firewall_FilterAdd_Handler,
		},
		{
			MethodName: "FilterDelete",
			Handler:    _Firewall_FilterDelete_Handler,
		},
		{
			MethodName: "FilterModify",
			Handler:    _Firewall_FilterModify_Handler,
		},
		{
			MethodName: "FilterBindAdd",
			Handler:    _Firewall_FilterBindAdd_Handler,
		},
		{
			MethodName: "FilterBindDelete",
			Handler:    _Firewall_FilterBindDelete_Handler,
		},
		{
			MethodName: "PolicerAdd",
			Handler:    _Firewall_PolicerAdd_Handler,
		},
		{
			MethodName: "PolicerModify",
			Handler:    _Firewall_PolicerModify_Handler,
		},
		{
			MethodName: "PolicerDelete",
			Handler:    _Firewall_PolicerDelete_Handler,
		},
		{
			MethodName: "FilterCounterGet",
			Handler:    _Firewall_FilterCounterGet_Handler,
		},
		{
			MethodName: "PolicerCounterGet",
			Handler:    _Firewall_PolicerCounterGet_Handler,
		},
		{
			MethodName: "FilterCounterSet",
			Handler:    _Firewall_FilterCounterSet_Handler,
		},
		{
			MethodName: "PolicerCounterSet",
			Handler:    _Firewall_PolicerCounterSet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jnx_firewall_service.proto",
}
