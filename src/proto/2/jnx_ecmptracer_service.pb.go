//
// Copyright 2019, Juniper Networks, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// [detail]: This file provides services for ecmp-tracer flow management
// It provides APIs to:
// - Add new flows
// - Get Counter stats for the added flows
// - Delete the added flows

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: jnx_ecmptracer_service.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// [brief]: Enum for server side input validation
// [detail]: Enum carrying success or failure reasons returned from a GET rpc call
// [default]: SUCCESS
type EcmptracerFlowMonitorStatus int32

const (
	// [brief]: Request successfully completed
	EcmptracerFlowMonitorStatus_SUCCESS EcmptracerFlowMonitorStatus = 0
	// [brief]: Request failed
	EcmptracerFlowMonitorStatus_FAILURE EcmptracerFlowMonitorStatus = 1
	// [brief]: Server not running
	EcmptracerFlowMonitorStatus_SERVER_NOT_RUNNING EcmptracerFlowMonitorStatus = 2
	// [brief]: Invalid input entered
	EcmptracerFlowMonitorStatus_EINVALID_INPUT EcmptracerFlowMonitorStatus = 3
	// [brief]: Missing mandatory input
	EcmptracerFlowMonitorStatus_EMISSING_MANDATORY_INPUT EcmptracerFlowMonitorStatus = 4
	// [brief]: Wrong family entered
	EcmptracerFlowMonitorStatus_EINVALID_FAMILY EcmptracerFlowMonitorStatus = 5
	// [brief]: Invalid sip
	EcmptracerFlowMonitorStatus_EINVALID_SIP EcmptracerFlowMonitorStatus = 6
	// [brief]: Invalid dip
	EcmptracerFlowMonitorStatus_EINVALID_DIP EcmptracerFlowMonitorStatus = 7
	// [brief]: Invalid src prefix len
	EcmptracerFlowMonitorStatus_EINVALID_SRC_PLEN EcmptracerFlowMonitorStatus = 8
	// [brief]: Invalid dest pref len
	EcmptracerFlowMonitorStatus_EINVALID_DEST_PLEN EcmptracerFlowMonitorStatus = 9
	// [brief]: Invalid src port
	EcmptracerFlowMonitorStatus_EINVALID_SPORT EcmptracerFlowMonitorStatus = 10
	// [brief]: Invalid dest port
	EcmptracerFlowMonitorStatus_EINVALID_DPORT EcmptracerFlowMonitorStatus = 11
	// [brief]: Invalid Port range
	EcmptracerFlowMonitorStatus_EINVALID_PORT_RANGE EcmptracerFlowMonitorStatus = 12
	// [brief]: proto not provided
	EcmptracerFlowMonitorStatus_EPROTO_NOT_SPECIFIED EcmptracerFlowMonitorStatus = 13
	// [brief]: Invalid proto entered
	EcmptracerFlowMonitorStatus_EINVALID_PROTO EcmptracerFlowMonitorStatus = 14
	// [brief]: Flow does not exist
	EcmptracerFlowMonitorStatus_EFLOW_DOES_NOT_EXIST EcmptracerFlowMonitorStatus = 15
	// [brief]: When there is an attempt to add flow with same name as an existing flow
	EcmptracerFlowMonitorStatus_EFLOW_EXISTS EcmptracerFlowMonitorStatus = 16
)

// Enum value maps for EcmptracerFlowMonitorStatus.
var (
	EcmptracerFlowMonitorStatus_name = map[int32]string{
		0:  "SUCCESS",
		1:  "FAILURE",
		2:  "SERVER_NOT_RUNNING",
		3:  "EINVALID_INPUT",
		4:  "EMISSING_MANDATORY_INPUT",
		5:  "EINVALID_FAMILY",
		6:  "EINVALID_SIP",
		7:  "EINVALID_DIP",
		8:  "EINVALID_SRC_PLEN",
		9:  "EINVALID_DEST_PLEN",
		10: "EINVALID_SPORT",
		11: "EINVALID_DPORT",
		12: "EINVALID_PORT_RANGE",
		13: "EPROTO_NOT_SPECIFIED",
		14: "EINVALID_PROTO",
		15: "EFLOW_DOES_NOT_EXIST",
		16: "EFLOW_EXISTS",
	}
	EcmptracerFlowMonitorStatus_value = map[string]int32{
		"SUCCESS":                  0,
		"FAILURE":                  1,
		"SERVER_NOT_RUNNING":       2,
		"EINVALID_INPUT":           3,
		"EMISSING_MANDATORY_INPUT": 4,
		"EINVALID_FAMILY":          5,
		"EINVALID_SIP":             6,
		"EINVALID_DIP":             7,
		"EINVALID_SRC_PLEN":        8,
		"EINVALID_DEST_PLEN":       9,
		"EINVALID_SPORT":           10,
		"EINVALID_DPORT":           11,
		"EINVALID_PORT_RANGE":      12,
		"EPROTO_NOT_SPECIFIED":     13,
		"EINVALID_PROTO":           14,
		"EFLOW_DOES_NOT_EXIST":     15,
		"EFLOW_EXISTS":             16,
	}
)

func (x EcmptracerFlowMonitorStatus) Enum() *EcmptracerFlowMonitorStatus {
	p := new(EcmptracerFlowMonitorStatus)
	*p = x
	return p
}

func (x EcmptracerFlowMonitorStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EcmptracerFlowMonitorStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_ecmptracer_service_proto_enumTypes[0].Descriptor()
}

func (EcmptracerFlowMonitorStatus) Type() protoreflect.EnumType {
	return &file_jnx_ecmptracer_service_proto_enumTypes[0]
}

func (x EcmptracerFlowMonitorStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EcmptracerFlowMonitorStatus.Descriptor instead.
func (EcmptracerFlowMonitorStatus) EnumDescriptor() ([]byte, []int) {
	return file_jnx_ecmptracer_service_proto_rawDescGZIP(), []int{0}
}

// [brief]: Enum carrying success or failure reasons returned from a GET rpc call
// [detail]: Enum carrying success or failure reasons returned from a GET rpc call
// [default]: STATUS_SUCCESS
type EcmptracerFlowInfoResponseStatus int32

const (
	// [brief]: Success
	EcmptracerFlowInfoResponseStatus_STATUS_SUCCESS EcmptracerFlowInfoResponseStatus = 0
	// [brief]: Invalid message
	EcmptracerFlowInfoResponseStatus_STATUS_EINVALID_MESSAGE EcmptracerFlowInfoResponseStatus = 1
	// [brief]: Server Internal error
	EcmptracerFlowInfoResponseStatus_STATUS_FAIL EcmptracerFlowInfoResponseStatus = 2
	// [brief]: Operation not supported
	EcmptracerFlowInfoResponseStatus_STATUS_EUNSUPPORTED_OP EcmptracerFlowInfoResponseStatus = 3
	// [brief]: Flow doees not exist
	EcmptracerFlowInfoResponseStatus_STATUS_EFLOW_DOES_NOT_EXIST EcmptracerFlowInfoResponseStatus = 4
	// [brief]: Invalid input entered
	EcmptracerFlowInfoResponseStatus_STATUS_EINVALID_INPUT EcmptracerFlowInfoResponseStatus = 5
	// [brief]: Missing mandatory input
	EcmptracerFlowInfoResponseStatus_STATUS_EMISSING_MANDATORY_INPUT EcmptracerFlowInfoResponseStatus = 6
	// [brief]: Invalid address family entered
	EcmptracerFlowInfoResponseStatus_STATUS_EINVALID_FAMILY EcmptracerFlowInfoResponseStatus = 7
)

// Enum value maps for EcmptracerFlowInfoResponseStatus.
var (
	EcmptracerFlowInfoResponseStatus_name = map[int32]string{
		0: "STATUS_SUCCESS",
		1: "STATUS_EINVALID_MESSAGE",
		2: "STATUS_FAIL",
		3: "STATUS_EUNSUPPORTED_OP",
		4: "STATUS_EFLOW_DOES_NOT_EXIST",
		5: "STATUS_EINVALID_INPUT",
		6: "STATUS_EMISSING_MANDATORY_INPUT",
		7: "STATUS_EINVALID_FAMILY",
	}
	EcmptracerFlowInfoResponseStatus_value = map[string]int32{
		"STATUS_SUCCESS":                  0,
		"STATUS_EINVALID_MESSAGE":         1,
		"STATUS_FAIL":                     2,
		"STATUS_EUNSUPPORTED_OP":          3,
		"STATUS_EFLOW_DOES_NOT_EXIST":     4,
		"STATUS_EINVALID_INPUT":           5,
		"STATUS_EMISSING_MANDATORY_INPUT": 6,
		"STATUS_EINVALID_FAMILY":          7,
	}
)

func (x EcmptracerFlowInfoResponseStatus) Enum() *EcmptracerFlowInfoResponseStatus {
	p := new(EcmptracerFlowInfoResponseStatus)
	*p = x
	return p
}

func (x EcmptracerFlowInfoResponseStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EcmptracerFlowInfoResponseStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_ecmptracer_service_proto_enumTypes[1].Descriptor()
}

func (EcmptracerFlowInfoResponseStatus) Type() protoreflect.EnumType {
	return &file_jnx_ecmptracer_service_proto_enumTypes[1]
}

func (x EcmptracerFlowInfoResponseStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EcmptracerFlowInfoResponseStatus.Descriptor instead.
func (EcmptracerFlowInfoResponseStatus) EnumDescriptor() ([]byte, []int) {
	return file_jnx_ecmptracer_service_proto_rawDescGZIP(), []int{1}
}

// [brief]: Reply carrying a success or failure status
// [detail]: Reply carrying a success or failure status
type EcmptracerFlowMonitorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Flow name in the Response
	FlowName string `protobuf:"bytes,1,opt,name=flow_name,json=flowName,proto3" json:"flow_name,omitempty"`
	// [brief]: Status in the Response
	Status EcmptracerFlowMonitorStatus `protobuf:"varint,2,opt,name=status,proto3,enum=jnx.jet.ecmptracer.EcmptracerFlowMonitorStatus" json:"status,omitempty"`
}

func (x *EcmptracerFlowMonitorResponse) Reset() {
	*x = EcmptracerFlowMonitorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_ecmptracer_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcmptracerFlowMonitorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcmptracerFlowMonitorResponse) ProtoMessage() {}

func (x *EcmptracerFlowMonitorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_ecmptracer_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcmptracerFlowMonitorResponse.ProtoReflect.Descriptor instead.
func (*EcmptracerFlowMonitorResponse) Descriptor() ([]byte, []int) {
	return file_jnx_ecmptracer_service_proto_rawDescGZIP(), []int{0}
}

func (x *EcmptracerFlowMonitorResponse) GetFlowName() string {
	if x != nil {
		return x.FlowName
	}
	return ""
}

func (x *EcmptracerFlowMonitorResponse) GetStatus() EcmptracerFlowMonitorStatus {
	if x != nil {
		return x.Status
	}
	return EcmptracerFlowMonitorStatus_SUCCESS
}

// [brief]: Flow add Request with input parameters
// [detail]: Flow add Request with input parameters
type EcmptracerFlowAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: flow name for add
	FlowName string `protobuf:"bytes,1,opt,name=flow_name,json=flowName,proto3" json:"flow_name,omitempty"`
	// [brief]: addr family for flow
	Family string `protobuf:"bytes,2,opt,name=family,proto3" json:"family,omitempty"`
	// [brief]: source Ip for flow
	SrcIp string `protobuf:"bytes,3,opt,name=src_ip,json=srcIp,proto3" json:"src_ip,omitempty"`
	// [brief]: source prefix len for flow
	SrcPrefixLen uint32 `protobuf:"varint,4,opt,name=src_prefix_len,json=srcPrefixLen,proto3" json:"src_prefix_len,omitempty"`
	// [brief]: Dest ip for flow
	DestIp string `protobuf:"bytes,5,opt,name=dest_ip,json=destIp,proto3" json:"dest_ip,omitempty"`
	// [brief]: Dest pref len for flow
	DestPrefixLen uint32 `protobuf:"varint,6,opt,name=dest_prefix_len,json=destPrefixLen,proto3" json:"dest_prefix_len,omitempty"`
	// [brief]: Min src port for flow
	MinSrcPort uint32 `protobuf:"varint,7,opt,name=min_src_port,json=minSrcPort,proto3" json:"min_src_port,omitempty"`
	// [brief]: Max src port for flow
	MaxSrcPort uint32 `protobuf:"varint,8,opt,name=max_src_port,json=maxSrcPort,proto3" json:"max_src_port,omitempty"`
	// [brief]: Min dest port for flow
	MinDestPort uint32 `protobuf:"varint,9,opt,name=min_dest_port,json=minDestPort,proto3" json:"min_dest_port,omitempty"`
	// [brief]: Max dest port for flow
	MaxDestPort uint32 `protobuf:"varint,10,opt,name=max_dest_port,json=maxDestPort,proto3" json:"max_dest_port,omitempty"`
	// [brief]: Protocol for flow
	Proto uint32 `protobuf:"varint,11,opt,name=proto,proto3" json:"proto,omitempty"`
}

func (x *EcmptracerFlowAddRequest) Reset() {
	*x = EcmptracerFlowAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_ecmptracer_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcmptracerFlowAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcmptracerFlowAddRequest) ProtoMessage() {}

func (x *EcmptracerFlowAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_ecmptracer_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcmptracerFlowAddRequest.ProtoReflect.Descriptor instead.
func (*EcmptracerFlowAddRequest) Descriptor() ([]byte, []int) {
	return file_jnx_ecmptracer_service_proto_rawDescGZIP(), []int{1}
}

func (x *EcmptracerFlowAddRequest) GetFlowName() string {
	if x != nil {
		return x.FlowName
	}
	return ""
}

func (x *EcmptracerFlowAddRequest) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *EcmptracerFlowAddRequest) GetSrcIp() string {
	if x != nil {
		return x.SrcIp
	}
	return ""
}

func (x *EcmptracerFlowAddRequest) GetSrcPrefixLen() uint32 {
	if x != nil {
		return x.SrcPrefixLen
	}
	return 0
}

func (x *EcmptracerFlowAddRequest) GetDestIp() string {
	if x != nil {
		return x.DestIp
	}
	return ""
}

func (x *EcmptracerFlowAddRequest) GetDestPrefixLen() uint32 {
	if x != nil {
		return x.DestPrefixLen
	}
	return 0
}

func (x *EcmptracerFlowAddRequest) GetMinSrcPort() uint32 {
	if x != nil {
		return x.MinSrcPort
	}
	return 0
}

func (x *EcmptracerFlowAddRequest) GetMaxSrcPort() uint32 {
	if x != nil {
		return x.MaxSrcPort
	}
	return 0
}

func (x *EcmptracerFlowAddRequest) GetMinDestPort() uint32 {
	if x != nil {
		return x.MinDestPort
	}
	return 0
}

func (x *EcmptracerFlowAddRequest) GetMaxDestPort() uint32 {
	if x != nil {
		return x.MaxDestPort
	}
	return 0
}

func (x *EcmptracerFlowAddRequest) GetProto() uint32 {
	if x != nil {
		return x.Proto
	}
	return 0
}

// [brief]: Input to be passed to the GET rpc call
// [detail]: Input to be passed to the GET rpc call
type EcmptracerFlowInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: flow name in the Request
	FlowName string `protobuf:"bytes,1,opt,name=flow_name,json=flowName,proto3" json:"flow_name,omitempty"`
	// [brief]: address family in the Request
	Family string `protobuf:"bytes,2,opt,name=family,proto3" json:"family,omitempty"`
}

func (x *EcmptracerFlowInfoRequest) Reset() {
	*x = EcmptracerFlowInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_ecmptracer_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcmptracerFlowInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcmptracerFlowInfoRequest) ProtoMessage() {}

func (x *EcmptracerFlowInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_ecmptracer_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcmptracerFlowInfoRequest.ProtoReflect.Descriptor instead.
func (*EcmptracerFlowInfoRequest) Descriptor() ([]byte, []int) {
	return file_jnx_ecmptracer_service_proto_rawDescGZIP(), []int{2}
}

func (x *EcmptracerFlowInfoRequest) GetFlowName() string {
	if x != nil {
		return x.FlowName
	}
	return ""
}

func (x *EcmptracerFlowInfoRequest) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

// [brief]: Counter information
// [detail]: Counter information along with interface name, pkts and bytes count
type IntfCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Interface name
	IntfName string `protobuf:"bytes,1,opt,name=intf_name,json=intfName,proto3" json:"intf_name,omitempty"`
	// [brief]: Num of bytes
	Bytes uint64 `protobuf:"varint,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
	// [brief]: Num of packets
	Pkts uint64 `protobuf:"varint,3,opt,name=pkts,proto3" json:"pkts,omitempty"`
}

func (x *IntfCounter) Reset() {
	*x = IntfCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_ecmptracer_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntfCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntfCounter) ProtoMessage() {}

func (x *IntfCounter) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_ecmptracer_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntfCounter.ProtoReflect.Descriptor instead.
func (*IntfCounter) Descriptor() ([]byte, []int) {
	return file_jnx_ecmptracer_service_proto_rawDescGZIP(), []int{3}
}

func (x *IntfCounter) GetIntfName() string {
	if x != nil {
		return x.IntfName
	}
	return ""
}

func (x *IntfCounter) GetBytes() uint64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *IntfCounter) GetPkts() uint64 {
	if x != nil {
		return x.Pkts
	}
	return 0
}

// [brief]: Response for a GET rpc call carrying the counter details
// [detail]: Response for a GET rpc call carrying the counter details bifurcated as ingress/egress
type EcmptracerFlowInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: status for the get rpc call
	Status EcmptracerFlowInfoResponseStatus `protobuf:"varint,1,opt,name=status,proto3,enum=jnx.jet.ecmptracer.EcmptracerFlowInfoResponseStatus" json:"status,omitempty"`
	// [brief]: flow name
	FlowName string `protobuf:"bytes,2,opt,name=flow_name,json=flowName,proto3" json:"flow_name,omitempty"`
	// [brief]: ingress counter repeated field
	IngressCtrs []*IntfCounter `protobuf:"bytes,3,rep,name=ingress_ctrs,json=ingressCtrs,proto3" json:"ingress_ctrs,omitempty"`
	// [brief]: egress counter repeated field
	EgressCtrs []*IntfCounter `protobuf:"bytes,4,rep,name=egress_ctrs,json=egressCtrs,proto3" json:"egress_ctrs,omitempty"`
}

func (x *EcmptracerFlowInfoResponse) Reset() {
	*x = EcmptracerFlowInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_ecmptracer_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcmptracerFlowInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcmptracerFlowInfoResponse) ProtoMessage() {}

func (x *EcmptracerFlowInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_ecmptracer_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcmptracerFlowInfoResponse.ProtoReflect.Descriptor instead.
func (*EcmptracerFlowInfoResponse) Descriptor() ([]byte, []int) {
	return file_jnx_ecmptracer_service_proto_rawDescGZIP(), []int{4}
}

func (x *EcmptracerFlowInfoResponse) GetStatus() EcmptracerFlowInfoResponseStatus {
	if x != nil {
		return x.Status
	}
	return EcmptracerFlowInfoResponseStatus_STATUS_SUCCESS
}

func (x *EcmptracerFlowInfoResponse) GetFlowName() string {
	if x != nil {
		return x.FlowName
	}
	return ""
}

func (x *EcmptracerFlowInfoResponse) GetIngressCtrs() []*IntfCounter {
	if x != nil {
		return x.IngressCtrs
	}
	return nil
}

func (x *EcmptracerFlowInfoResponse) GetEgressCtrs() []*IntfCounter {
	if x != nil {
		return x.EgressCtrs
	}
	return nil
}

var File_jnx_ecmptracer_service_proto protoreflect.FileDescriptor

var file_jnx_ecmptracer_service_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x6a, 0x6e, 0x78, 0x5f, 0x65, 0x63, 0x6d, 0x70, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x65, 0x63, 0x6d, 0x70, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x72, 0x1a, 0x1b, 0x6a, 0x6e, 0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x85, 0x01, 0x0a, 0x1d, 0x45, 0x63, 0x6d, 0x70, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x46, 0x6c,
	0x6f, 0x77, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x47,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f,
	0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x65, 0x63, 0x6d, 0x70, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x72, 0x2e, 0x45, 0x63, 0x6d, 0x70, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x46, 0x6c,
	0x6f, 0x77, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xef, 0x02, 0x0a, 0x18, 0x45, 0x63, 0x6d, 0x70,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x72, 0x63,
	0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x72, 0x63, 0x49, 0x70,
	0x12, 0x24, 0x0a, 0x0e, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x73, 0x74, 0x49, 0x70, 0x12,
	0x26, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c,
	0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x73,
	0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d,
	0x69, 0x6e, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x78,
	0x5f, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x6d, 0x61, 0x78, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6d,
	0x69, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x73, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x50, 0x0a, 0x19, 0x45, 0x63, 0x6d,
	0x70, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6c, 0x6f, 0x77, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x22, 0x54, 0x0a, 0x0b, 0x49,
	0x6e, 0x74, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e,
	0x74, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6e, 0x74, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x6b, 0x74,
	0x73, 0x22, 0x8d, 0x02, 0x0a, 0x1a, 0x45, 0x63, 0x6d, 0x70, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72,
	0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x34, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x65, 0x63, 0x6d, 0x70, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x72, 0x2e, 0x45, 0x63, 0x6d, 0x70, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72,
	0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x69,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x74, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x65, 0x63, 0x6d, 0x70,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x52, 0x0b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x74, 0x72, 0x73, 0x12,
	0x40, 0x0a, 0x0b, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x74, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x65,
	0x63, 0x6d, 0x70, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x66, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x74, 0x72,
	0x73, 0x2a, 0x84, 0x03, 0x0a, 0x1b, 0x45, 0x63, 0x6d, 0x70, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72,
	0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e,
	0x47, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x41, 0x4e, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e,
	0x50, 0x55, 0x54, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x49, 0x50, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c,
	0x45, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x50, 0x10, 0x07, 0x12, 0x15,
	0x0a, 0x11, 0x45, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x50,
	0x4c, 0x45, 0x4e, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x4c, 0x45, 0x4e, 0x10, 0x09, 0x12, 0x12, 0x0a,
	0x0e, 0x45, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x10,
	0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x44, 0x50,
	0x4f, 0x52, 0x54, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x0c, 0x12, 0x18,
	0x0a, 0x14, 0x45, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x10, 0x0e, 0x12, 0x18, 0x0a, 0x14,
	0x45, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45,
	0x58, 0x49, 0x53, 0x54, 0x10, 0x0f, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x46, 0x4c, 0x4f, 0x57, 0x5f,
	0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x10, 0x2a, 0xfd, 0x01, 0x0a, 0x20, 0x45, 0x63, 0x6d,
	0x70, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x00, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x02, 0x12,
	0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x55, 0x4e, 0x53, 0x55, 0x50,
	0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x4f, 0x50, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x44, 0x4f, 0x45, 0x53,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x45, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x41, 0x4e, 0x44, 0x41,
	0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x10, 0x07, 0x32, 0xfa, 0x02, 0x0a, 0x0e, 0x45, 0x63, 0x6d,
	0x70, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x76, 0x0a, 0x11, 0x45,
	0x63, 0x6d, 0x70, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x64, 0x64,
	0x12, 0x2c, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x65, 0x63, 0x6d, 0x70, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x72, 0x2e, 0x45, 0x63, 0x6d, 0x70, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72,
	0x46, 0x6c, 0x6f, 0x77, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x65, 0x63, 0x6d, 0x70, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x72, 0x2e, 0x45, 0x63, 0x6d, 0x70, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x46, 0x6c,
	0x6f, 0x77, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x14, 0x45, 0x63, 0x6d, 0x70, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x72, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2d, 0x2e, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x65, 0x63, 0x6d, 0x70, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72,
	0x2e, 0x45, 0x63, 0x6d, 0x70, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x65, 0x63, 0x6d, 0x70, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x2e,
	0x45, 0x63, 0x6d, 0x70, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x74, 0x0a, 0x11, 0x45, 0x63, 0x6d, 0x70, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x46, 0x6c, 0x6f,
	0x77, 0x47, 0x65, 0x74, 0x12, 0x2d, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x65,
	0x63, 0x6d, 0x70, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x2e, 0x45, 0x63, 0x6d, 0x70, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x65, 0x63,
	0x6d, 0x70, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x2e, 0x45, 0x63, 0x6d, 0x70, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x24, 0x5a, 0x11, 0x6c, 0x61, 0x62, 0x6e, 0x65, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x82, 0xb5, 0x18, 0x05, 0x30, 0x2e,
	0x30, 0x2e, 0x30, 0x8a, 0xb5, 0x18, 0x04, 0x31, 0x39, 0x2e, 0x34, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_jnx_ecmptracer_service_proto_rawDescOnce sync.Once
	file_jnx_ecmptracer_service_proto_rawDescData = file_jnx_ecmptracer_service_proto_rawDesc
)

func file_jnx_ecmptracer_service_proto_rawDescGZIP() []byte {
	file_jnx_ecmptracer_service_proto_rawDescOnce.Do(func() {
		file_jnx_ecmptracer_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_jnx_ecmptracer_service_proto_rawDescData)
	})
	return file_jnx_ecmptracer_service_proto_rawDescData
}

var file_jnx_ecmptracer_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_jnx_ecmptracer_service_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_jnx_ecmptracer_service_proto_goTypes = []interface{}{
	(EcmptracerFlowMonitorStatus)(0),      // 0: jnx.jet.ecmptracer.EcmptracerFlowMonitorStatus
	(EcmptracerFlowInfoResponseStatus)(0), // 1: jnx.jet.ecmptracer.EcmptracerFlowInfoResponseStatus
	(*EcmptracerFlowMonitorResponse)(nil), // 2: jnx.jet.ecmptracer.EcmptracerFlowMonitorResponse
	(*EcmptracerFlowAddRequest)(nil),      // 3: jnx.jet.ecmptracer.EcmptracerFlowAddRequest
	(*EcmptracerFlowInfoRequest)(nil),     // 4: jnx.jet.ecmptracer.EcmptracerFlowInfoRequest
	(*IntfCounter)(nil),                   // 5: jnx.jet.ecmptracer.IntfCounter
	(*EcmptracerFlowInfoResponse)(nil),    // 6: jnx.jet.ecmptracer.EcmptracerFlowInfoResponse
}
var file_jnx_ecmptracer_service_proto_depIdxs = []int32{
	0, // 0: jnx.jet.ecmptracer.EcmptracerFlowMonitorResponse.status:type_name -> jnx.jet.ecmptracer.EcmptracerFlowMonitorStatus
	1, // 1: jnx.jet.ecmptracer.EcmptracerFlowInfoResponse.status:type_name -> jnx.jet.ecmptracer.EcmptracerFlowInfoResponseStatus
	5, // 2: jnx.jet.ecmptracer.EcmptracerFlowInfoResponse.ingress_ctrs:type_name -> jnx.jet.ecmptracer.IntfCounter
	5, // 3: jnx.jet.ecmptracer.EcmptracerFlowInfoResponse.egress_ctrs:type_name -> jnx.jet.ecmptracer.IntfCounter
	3, // 4: jnx.jet.ecmptracer.EcmptracerFlow.EcmptracerFlowAdd:input_type -> jnx.jet.ecmptracer.EcmptracerFlowAddRequest
	4, // 5: jnx.jet.ecmptracer.EcmptracerFlow.EcmptracerFlowDelete:input_type -> jnx.jet.ecmptracer.EcmptracerFlowInfoRequest
	4, // 6: jnx.jet.ecmptracer.EcmptracerFlow.EcmptracerFlowGet:input_type -> jnx.jet.ecmptracer.EcmptracerFlowInfoRequest
	2, // 7: jnx.jet.ecmptracer.EcmptracerFlow.EcmptracerFlowAdd:output_type -> jnx.jet.ecmptracer.EcmptracerFlowMonitorResponse
	2, // 8: jnx.jet.ecmptracer.EcmptracerFlow.EcmptracerFlowDelete:output_type -> jnx.jet.ecmptracer.EcmptracerFlowMonitorResponse
	6, // 9: jnx.jet.ecmptracer.EcmptracerFlow.EcmptracerFlowGet:output_type -> jnx.jet.ecmptracer.EcmptracerFlowInfoResponse
	7, // [7:10] is the sub-list for method output_type
	4, // [4:7] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_jnx_ecmptracer_service_proto_init() }
func file_jnx_ecmptracer_service_proto_init() {
	if File_jnx_ecmptracer_service_proto != nil {
		return
	}
	file_jnx_common_base_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_jnx_ecmptracer_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EcmptracerFlowMonitorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_ecmptracer_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EcmptracerFlowAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_ecmptracer_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EcmptracerFlowInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_ecmptracer_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntfCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_ecmptracer_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EcmptracerFlowInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_jnx_ecmptracer_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_jnx_ecmptracer_service_proto_goTypes,
		DependencyIndexes: file_jnx_ecmptracer_service_proto_depIdxs,
		EnumInfos:         file_jnx_ecmptracer_service_proto_enumTypes,
		MessageInfos:      file_jnx_ecmptracer_service_proto_msgTypes,
	}.Build()
	File_jnx_ecmptracer_service_proto = out.File
	file_jnx_ecmptracer_service_proto_rawDesc = nil
	file_jnx_ecmptracer_service_proto_goTypes = nil
	file_jnx_ecmptracer_service_proto_depIdxs = nil
}
