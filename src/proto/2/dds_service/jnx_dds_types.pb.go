//
// Copyright 2018-2019, Juniper Networks, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: jnx_dds_types.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// [brief]: Response status code for a request
// [detail]: Response status code for a request
// [default]: SUCCESS
type ResponseStatus int32

const (
	// [brief]: Ignore the status
	// [detail]: Ignore the status
	ResponseStatus_IGNORE ResponseStatus = 0
	// [brief]: Request was successful
	// [detail]: Request was successful
	ResponseStatus_SUCCESS ResponseStatus = 1
	// [brief]: Bad input from the user
	// [detail]: Bad input from the user
	ResponseStatus_BAD_INPUT ResponseStatus = 2
	// [brief]: Service side error
	// [detail]: Service side error
	ResponseStatus_SERVER_ERROR ResponseStatus = 3
)

// Enum value maps for ResponseStatus.
var (
	ResponseStatus_name = map[int32]string{
		0: "IGNORE",
		1: "SUCCESS",
		2: "BAD_INPUT",
		3: "SERVER_ERROR",
	}
	ResponseStatus_value = map[string]int32{
		"IGNORE":       0,
		"SUCCESS":      1,
		"BAD_INPUT":    2,
		"SERVER_ERROR": 3,
	}
)

func (x ResponseStatus) Enum() *ResponseStatus {
	p := new(ResponseStatus)
	*p = x
	return p
}

func (x ResponseStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_dds_types_proto_enumTypes[0].Descriptor()
}

func (ResponseStatus) Type() protoreflect.EnumType {
	return &file_jnx_dds_types_proto_enumTypes[0]
}

func (x ResponseStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseStatus.Descriptor instead.
func (ResponseStatus) EnumDescriptor() ([]byte, []int) {
	return file_jnx_dds_types_proto_rawDescGZIP(), []int{0}
}

// [brief]: Status of the subscription stream
// [detail]: Status of the subscription stream
// [default]: STATUS_STREAMING
type ObjectStreamStatus int32

const (
	// [brief]: Stream still running
	// [detail]: Stream still running
	ObjectStreamStatus_STATUS_STREAMING ObjectStreamStatus = 0
	// [brief]: Maximum subscriptions reached
	// [detail]: Maximum subscriptions reached
	ObjectStreamStatus_ERROR_MAX_SUBSCRIPTIONS ObjectStreamStatus = 1
	// [brief]: Maximum promiscuous subscriptions reached
	// [detail]: Maximum promiscuous subscriptions reached
	ObjectStreamStatus_ERROR_MAX_PROMISCUOUS_SUBSCRIPTIONS ObjectStreamStatus = 2
	// [brief]: Duplicate subscription from the same client
	// [detail]: Duplicate subscription from the same client
	ObjectStreamStatus_ERROR_DUPLICATE_SUBSCRIPTION ObjectStreamStatus = 3
	// [brief]: Maximum topic limit per subscription reached
	// [detail]: Maximum topic limit per subscription reached
	ObjectStreamStatus_ERROR_MAX_SUBSCRIPTION_TOPICS ObjectStreamStatus = 4
	// [brief]: Invalid subscription topic
	// [detail]: Invalid subscription topic
	ObjectStreamStatus_ERROR_INVALID_SUBSCRIPTION_TOPIC ObjectStreamStatus = 5
	// [brief]: Invalid batch size range
	// [detail]: Invalid batch size range (Allowed 1 - 200)
	ObjectStreamStatus_ERROR_INVALID_BATCH_SIZE_RANGE ObjectStreamStatus = 6
	// [brief]: Invalid batch timeout range
	// [detail]: Invalid batch timeout range (Allowed 1ms - 200ms)
	ObjectStreamStatus_ERROR_INVALID_BATCH_TIMEOUT_RANGE ObjectStreamStatus = 7
	// [brief]: End of the subscription stream
	// [detail]: End of the subscription stream
	ObjectStreamStatus_STATUS_END_OF_STREAM ObjectStreamStatus = 8
)

// Enum value maps for ObjectStreamStatus.
var (
	ObjectStreamStatus_name = map[int32]string{
		0: "STATUS_STREAMING",
		1: "ERROR_MAX_SUBSCRIPTIONS",
		2: "ERROR_MAX_PROMISCUOUS_SUBSCRIPTIONS",
		3: "ERROR_DUPLICATE_SUBSCRIPTION",
		4: "ERROR_MAX_SUBSCRIPTION_TOPICS",
		5: "ERROR_INVALID_SUBSCRIPTION_TOPIC",
		6: "ERROR_INVALID_BATCH_SIZE_RANGE",
		7: "ERROR_INVALID_BATCH_TIMEOUT_RANGE",
		8: "STATUS_END_OF_STREAM",
	}
	ObjectStreamStatus_value = map[string]int32{
		"STATUS_STREAMING":                    0,
		"ERROR_MAX_SUBSCRIPTIONS":             1,
		"ERROR_MAX_PROMISCUOUS_SUBSCRIPTIONS": 2,
		"ERROR_DUPLICATE_SUBSCRIPTION":        3,
		"ERROR_MAX_SUBSCRIPTION_TOPICS":       4,
		"ERROR_INVALID_SUBSCRIPTION_TOPIC":    5,
		"ERROR_INVALID_BATCH_SIZE_RANGE":      6,
		"ERROR_INVALID_BATCH_TIMEOUT_RANGE":   7,
		"STATUS_END_OF_STREAM":                8,
	}
)

func (x ObjectStreamStatus) Enum() *ObjectStreamStatus {
	p := new(ObjectStreamStatus)
	*p = x
	return p
}

func (x ObjectStreamStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObjectStreamStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_dds_types_proto_enumTypes[1].Descriptor()
}

func (ObjectStreamStatus) Type() protoreflect.EnumType {
	return &file_jnx_dds_types_proto_enumTypes[1]
}

func (x ObjectStreamStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObjectStreamStatus.Descriptor instead.
func (ObjectStreamStatus) EnumDescriptor() ([]byte, []int) {
	return file_jnx_dds_types_proto_rawDescGZIP(), []int{1}
}

// [brief]: Fetch type for AppDataRequest
// [detail]: Fetch type for AppDataRequest
// [default]: FETCH_ALL
type DataFetchType int32

const (
	// [brief]: Fetch all data at once
	// [detail]: Fetch all data at once
	DataFetchType_FETCH_ALL DataFetchType = 0
	// [brief]: Fetch first data record
	// [detail]: Fetch first data record
	DataFetchType_FETCH_FIRST DataFetchType = 1
	// [brief]: Fetch the next data record
	// [detail]: Fetch the next data record
	DataFetchType_FETCH_NEXT DataFetchType = 2
)

// Enum value maps for DataFetchType.
var (
	DataFetchType_name = map[int32]string{
		0: "FETCH_ALL",
		1: "FETCH_FIRST",
		2: "FETCH_NEXT",
	}
	DataFetchType_value = map[string]int32{
		"FETCH_ALL":   0,
		"FETCH_FIRST": 1,
		"FETCH_NEXT":  2,
	}
)

func (x DataFetchType) Enum() *DataFetchType {
	p := new(DataFetchType)
	*p = x
	return p
}

func (x DataFetchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataFetchType) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_dds_types_proto_enumTypes[2].Descriptor()
}

func (DataFetchType) Type() protoreflect.EnumType {
	return &file_jnx_dds_types_proto_enumTypes[2]
}

func (x DataFetchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataFetchType.Descriptor instead.
func (DataFetchType) EnumDescriptor() ([]byte, []int) {
	return file_jnx_dds_types_proto_rawDescGZIP(), []int{2}
}

// [brief]: Status of the application data stream
// [detail]: Status of the application data stream
// [default]: NO_ERROR
type DataStreamStatus int32

const (
	// [brief]: More data pending
	// [detail]: More data pending
	DataStreamStatus_DATA_PENDING DataStreamStatus = 0
	// [brief]: End of data stream
	// [detail]: End of data stream
	DataStreamStatus_DATA_FINISHED DataStreamStatus = 1
	// [brief]: Invalid data request
	// [detail]: Invalid data request
	DataStreamStatus_ERROR_INVALID_REQUEST DataStreamStatus = 2
	// [brief]: Invalid/Missing data requested
	// [detail]: Invalid/Missing data requested
	DataStreamStatus_ERROR_DATA_NOT_FOUND DataStreamStatus = 3
	// [brief]: Server side stream disconnect/error
	// [detail]: Server side stream disconnect/error
	DataStreamStatus_ERROR_STREAM_ERROR DataStreamStatus = 4
)

// Enum value maps for DataStreamStatus.
var (
	DataStreamStatus_name = map[int32]string{
		0: "DATA_PENDING",
		1: "DATA_FINISHED",
		2: "ERROR_INVALID_REQUEST",
		3: "ERROR_DATA_NOT_FOUND",
		4: "ERROR_STREAM_ERROR",
	}
	DataStreamStatus_value = map[string]int32{
		"DATA_PENDING":          0,
		"DATA_FINISHED":         1,
		"ERROR_INVALID_REQUEST": 2,
		"ERROR_DATA_NOT_FOUND":  3,
		"ERROR_STREAM_ERROR":    4,
	}
)

func (x DataStreamStatus) Enum() *DataStreamStatus {
	p := new(DataStreamStatus)
	*p = x
	return p
}

func (x DataStreamStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataStreamStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_dds_types_proto_enumTypes[3].Descriptor()
}

func (DataStreamStatus) Type() protoreflect.EnumType {
	return &file_jnx_dds_types_proto_enumTypes[3]
}

func (x DataStreamStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataStreamStatus.Descriptor instead.
func (DataStreamStatus) EnumDescriptor() ([]byte, []int) {
	return file_jnx_dds_types_proto_rawDescGZIP(), []int{3}
}

// [brief]: Operation type enum
// [default]: OPERATION_UNKNOWN
type Operation int32

const (
	// [brief]: Unknown operation
	// [detail]: Unknown operation
	Operation_OPERATION_UNKNOWN Operation = 0
	// [brief]: Object add operation
	// [detail]: Object add operation
	Operation_OPERATION_ADD Operation = 1
	// [brief]: Object modify operation
	// [detail]: Object modify operation
	Operation_OPERATION_MODIFY Operation = 2
	// [brief]: Object add or a modify operation
	// [detail]: Object add or a modify operation
	Operation_OPERATION_ADD_MODIFY Operation = 3
	// [brief]: Object delete operation
	// [detail]: Object delete operation
	Operation_OPERATION_DELETE Operation = 4
)

// Enum value maps for Operation.
var (
	Operation_name = map[int32]string{
		0: "OPERATION_UNKNOWN",
		1: "OPERATION_ADD",
		2: "OPERATION_MODIFY",
		3: "OPERATION_ADD_MODIFY",
		4: "OPERATION_DELETE",
	}
	Operation_value = map[string]int32{
		"OPERATION_UNKNOWN":    0,
		"OPERATION_ADD":        1,
		"OPERATION_MODIFY":     2,
		"OPERATION_ADD_MODIFY": 3,
		"OPERATION_DELETE":     4,
	}
)

func (x Operation) Enum() *Operation {
	p := new(Operation)
	*p = x
	return p
}

func (x Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_dds_types_proto_enumTypes[4].Descriptor()
}

func (Operation) Type() protoreflect.EnumType {
	return &file_jnx_dds_types_proto_enumTypes[4]
}

func (x Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operation.Descriptor instead.
func (Operation) EnumDescriptor() ([]byte, []int) {
	return file_jnx_dds_types_proto_rawDescGZIP(), []int{4}
}

// [brief]: Object class enum
// [default]: CLASS_OBJECT
type ObjectClass int32

const (
	// [brief]: Represents a base object
	// [detail]: Represents a base object
	ObjectClass_CLASS_OBJECT ObjectClass = 0
	// [brief]: Represents a first class object
	// [detail]: Represents a first class object
	ObjectClass_CLASS_FIRST_CLASS_OBJECT ObjectClass = 1
	// [brief]: Represents an attached object
	// [detail]: Represents an attached object
	ObjectClass_CLASS_ATTACHED_OBJECT ObjectClass = 2
	// [brief]: Represents an attached object local to application
	// [detail]: Represents an attached object local to application
	ObjectClass_CLASS_LOCAL_ATTACHED_OBJECT ObjectClass = 3
	// [brief]: Represents an attached object by third-party application
	// [detail]: Represents an attached object by third-party application
	ObjectClass_CLASS_THIRD_PARTY_ATTACHED_OBJECT ObjectClass = 4
	// [brief]: Represents a bundle object
	// [detail]: Represents a bundle object
	ObjectClass_CLASS_BUNDLE_OBJECT ObjectClass = 5
	// [brief]: Represents an internal meta object
	// [detail]: Represents an internal meta object
	ObjectClass_CLASS_BUNDLE_META_OBJECT ObjectClass = 6
)

// Enum value maps for ObjectClass.
var (
	ObjectClass_name = map[int32]string{
		0: "CLASS_OBJECT",
		1: "CLASS_FIRST_CLASS_OBJECT",
		2: "CLASS_ATTACHED_OBJECT",
		3: "CLASS_LOCAL_ATTACHED_OBJECT",
		4: "CLASS_THIRD_PARTY_ATTACHED_OBJECT",
		5: "CLASS_BUNDLE_OBJECT",
		6: "CLASS_BUNDLE_META_OBJECT",
	}
	ObjectClass_value = map[string]int32{
		"CLASS_OBJECT":                      0,
		"CLASS_FIRST_CLASS_OBJECT":          1,
		"CLASS_ATTACHED_OBJECT":             2,
		"CLASS_LOCAL_ATTACHED_OBJECT":       3,
		"CLASS_THIRD_PARTY_ATTACHED_OBJECT": 4,
		"CLASS_BUNDLE_OBJECT":               5,
		"CLASS_BUNDLE_META_OBJECT":          6,
	}
)

func (x ObjectClass) Enum() *ObjectClass {
	p := new(ObjectClass)
	*p = x
	return p
}

func (x ObjectClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObjectClass) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_dds_types_proto_enumTypes[5].Descriptor()
}

func (ObjectClass) Type() protoreflect.EnumType {
	return &file_jnx_dds_types_proto_enumTypes[5]
}

func (x ObjectClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObjectClass.Descriptor instead.
func (ObjectClass) EnumDescriptor() ([]byte, []int) {
	return file_jnx_dds_types_proto_rawDescGZIP(), []int{5}
}

// [brief]: Response stream options
// [detail]: Response stream options
type StreamOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Response batch size
	// [detail]: Batch upto batch_size entries
	// in the response
	// [default_value]: 50
	BatchSize uint32 `protobuf:"varint,1,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	// [brief]: Response batch timeout
	// [detail]: Timeout in ms to wait for accumilating
	// entries in response
	// [default_value]: 50ms
	BatchTimeoutMs uint32 `protobuf:"varint,2,opt,name=batch_timeout_ms,json=batchTimeoutMs,proto3" json:"batch_timeout_ms,omitempty"`
}

func (x *StreamOptions) Reset() {
	*x = StreamOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_dds_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamOptions) ProtoMessage() {}

func (x *StreamOptions) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_dds_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamOptions.ProtoReflect.Descriptor instead.
func (*StreamOptions) Descriptor() ([]byte, []int) {
	return file_jnx_dds_types_proto_rawDescGZIP(), []int{0}
}

func (x *StreamOptions) GetBatchSize() uint32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *StreamOptions) GetBatchTimeoutMs() uint32 {
	if x != nil {
		return x.BatchTimeoutMs
	}
	return 0
}

// [brief]: Request to obtain schema information.
// [detail]: Request to obtain schema information.
type SchemaModelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Identifier sent in request messages.
	RequestId uint64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// [brief]: Forces a rebuild of the schema
	// [detail]: Forces a rebuild of the schema
	// from data stored on disk. Typically not
	// required, but useful after partial upgrade.
	// [default_value]: false
	RebuildSchema bool `protobuf:"varint,2,opt,name=rebuild_schema,json=rebuildSchema,proto3" json:"rebuild_schema,omitempty"`
}

func (x *SchemaModelRequest) Reset() {
	*x = SchemaModelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_dds_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaModelRequest) ProtoMessage() {}

func (x *SchemaModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_dds_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaModelRequest.ProtoReflect.Descriptor instead.
func (*SchemaModelRequest) Descriptor() ([]byte, []int) {
	return file_jnx_dds_types_proto_rawDescGZIP(), []int{1}
}

func (x *SchemaModelRequest) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *SchemaModelRequest) GetRebuildSchema() bool {
	if x != nil {
		return x.RebuildSchema
	}
	return false
}

// [brief]: Response to schema information request
// [detail]: For each type of the object defined in the system,
// all its properties and attributes details are fetched.
type SchemaModelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Identifier sent in request messages.
	ResponseId uint64 `protobuf:"varint,1,opt,name=response_id,json=responseId,proto3" json:"response_id,omitempty"`
	// [brief]: response code
	ResponseCode ResponseStatus `protobuf:"varint,2,opt,name=response_code,json=responseCode,proto3,enum=jnx.jet.dds.ResponseStatus" json:"response_code,omitempty"`
	// [brief]: response message
	ResponseMessage string `protobuf:"bytes,3,opt,name=response_message,json=responseMessage,proto3" json:"response_message,omitempty"`
	// [brief]: Descriptor entry for each type.
	TypesDescriptors []*SchemaModelResponse_TypeDescriptor `protobuf:"bytes,4,rep,name=types_descriptors,json=typesDescriptors,proto3" json:"types_descriptors,omitempty"`
}

func (x *SchemaModelResponse) Reset() {
	*x = SchemaModelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_dds_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaModelResponse) ProtoMessage() {}

func (x *SchemaModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_dds_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaModelResponse.ProtoReflect.Descriptor instead.
func (*SchemaModelResponse) Descriptor() ([]byte, []int) {
	return file_jnx_dds_types_proto_rawDescGZIP(), []int{2}
}

func (x *SchemaModelResponse) GetResponseId() uint64 {
	if x != nil {
		return x.ResponseId
	}
	return 0
}

func (x *SchemaModelResponse) GetResponseCode() ResponseStatus {
	if x != nil {
		return x.ResponseCode
	}
	return ResponseStatus_IGNORE
}

func (x *SchemaModelResponse) GetResponseMessage() string {
	if x != nil {
		return x.ResponseMessage
	}
	return ""
}

func (x *SchemaModelResponse) GetTypesDescriptors() []*SchemaModelResponse_TypeDescriptor {
	if x != nil {
		return x.TypesDescriptors
	}
	return nil
}

// [brief]: Request to obtain type documentation
// [detail]: Clients can request additional
// documentation for a given type or a stream of
// all types.
type TypeDocumentationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Identifier sent in request messages.
	RequestId uint64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// [brief]: Module name for which the documentation
	// is requested.
	ModuleName string `protobuf:"bytes,2,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
}

func (x *TypeDocumentationRequest) Reset() {
	*x = TypeDocumentationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_dds_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeDocumentationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeDocumentationRequest) ProtoMessage() {}

func (x *TypeDocumentationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_dds_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeDocumentationRequest.ProtoReflect.Descriptor instead.
func (*TypeDocumentationRequest) Descriptor() ([]byte, []int) {
	return file_jnx_dds_types_proto_rawDescGZIP(), []int{3}
}

func (x *TypeDocumentationRequest) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *TypeDocumentationRequest) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

// [brief]: Detailed technical information for a given type(s).
// [detail]: Detailed technical information for a given type(s).
type TypeDocumentationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Identifier sent in request messages.
	ResponseId uint64 `protobuf:"varint,1,opt,name=response_id,json=responseId,proto3" json:"response_id,omitempty"`
	// [brief]: response code
	ResponseCode ResponseStatus `protobuf:"varint,2,opt,name=response_code,json=responseCode,proto3,enum=jnx.jet.dds.ResponseStatus" json:"response_code,omitempty"`
	// [brief]: response message
	ResponseMessage string `protobuf:"bytes,3,opt,name=response_message,json=responseMessage,proto3" json:"response_message,omitempty"`
	// [brief]: List of type documentation for each type
	// requested.
	TypeDocumentation []*TypeDocumentationResponse_TypeDocumentation `protobuf:"bytes,4,rep,name=type_documentation,json=typeDocumentation,proto3" json:"type_documentation,omitempty"`
}

func (x *TypeDocumentationResponse) Reset() {
	*x = TypeDocumentationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_dds_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeDocumentationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeDocumentationResponse) ProtoMessage() {}

func (x *TypeDocumentationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_dds_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeDocumentationResponse.ProtoReflect.Descriptor instead.
func (*TypeDocumentationResponse) Descriptor() ([]byte, []int) {
	return file_jnx_dds_types_proto_rawDescGZIP(), []int{4}
}

func (x *TypeDocumentationResponse) GetResponseId() uint64 {
	if x != nil {
		return x.ResponseId
	}
	return 0
}

func (x *TypeDocumentationResponse) GetResponseCode() ResponseStatus {
	if x != nil {
		return x.ResponseCode
	}
	return ResponseStatus_IGNORE
}

func (x *TypeDocumentationResponse) GetResponseMessage() string {
	if x != nil {
		return x.ResponseMessage
	}
	return ""
}

func (x *TypeDocumentationResponse) GetTypeDocumentation() []*TypeDocumentationResponse_TypeDocumentation {
	if x != nil {
		return x.TypeDocumentation
	}
	return nil
}

// [brief]: Topic descriptor structure
// [detail]: Topic descriptor structure
type TopicDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Topic string name
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// [brief]: Scope integer id
	Scope uint32 `protobuf:"varint,2,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *TopicDescriptor) Reset() {
	*x = TopicDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_dds_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopicDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicDescriptor) ProtoMessage() {}

func (x *TopicDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_dds_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicDescriptor.ProtoReflect.Descriptor instead.
func (*TopicDescriptor) Descriptor() ([]byte, []int) {
	return file_jnx_dds_types_proto_rawDescGZIP(), []int{5}
}

func (x *TopicDescriptor) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *TopicDescriptor) GetScope() uint32 {
	if x != nil {
		return x.Scope
	}
	return 0
}

// [brief]: Request to obtain Topic information.
// [detail]: Request to obtain Topic information.
type TopicListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Identifier sent in request messages.
	RequestId uint64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// [brief]: Prefix topic.
	// [optional]: If a prefix topic is provided
	// all the topics under that hierarchy is returned,
	// otherwise all topics in the system are returned.
	// [default_value]: all topics
	PrefixTopic string `protobuf:"bytes,2,opt,name=prefix_topic,json=prefixTopic,proto3" json:"prefix_topic,omitempty"`
}

func (x *TopicListRequest) Reset() {
	*x = TopicListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_dds_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopicListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicListRequest) ProtoMessage() {}

func (x *TopicListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_dds_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicListRequest.ProtoReflect.Descriptor instead.
func (*TopicListRequest) Descriptor() ([]byte, []int) {
	return file_jnx_dds_types_proto_rawDescGZIP(), []int{6}
}

func (x *TopicListRequest) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *TopicListRequest) GetPrefixTopic() string {
	if x != nil {
		return x.PrefixTopic
	}
	return ""
}

// [brief]: Response with a list of Topics in the system.
// [detail]: Response with a list of Topics in the system.
type TopicListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Identifier sent in request messages.
	ResponseId uint64 `protobuf:"varint,1,opt,name=response_id,json=responseId,proto3" json:"response_id,omitempty"`
	// [brief]: response code
	ResponseCode ResponseStatus `protobuf:"varint,2,opt,name=response_code,json=responseCode,proto3,enum=jnx.jet.dds.ResponseStatus" json:"response_code,omitempty"`
	// [brief]: response message
	ResponseMessage string `protobuf:"bytes,3,opt,name=response_message,json=responseMessage,proto3" json:"response_message,omitempty"`
	// [brief]: Topic desciptors, for a given prefix or
	// all the topics in the system. Clients can use
	// the topic string names to subscribe and recieve object
	// stream.
	Topics []*TopicDescriptor `protobuf:"bytes,4,rep,name=topics,proto3" json:"topics,omitempty"`
}

func (x *TopicListResponse) Reset() {
	*x = TopicListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_dds_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopicListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicListResponse) ProtoMessage() {}

func (x *TopicListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_dds_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicListResponse.ProtoReflect.Descriptor instead.
func (*TopicListResponse) Descriptor() ([]byte, []int) {
	return file_jnx_dds_types_proto_rawDescGZIP(), []int{7}
}

func (x *TopicListResponse) GetResponseId() uint64 {
	if x != nil {
		return x.ResponseId
	}
	return 0
}

func (x *TopicListResponse) GetResponseCode() ResponseStatus {
	if x != nil {
		return x.ResponseCode
	}
	return ResponseStatus_IGNORE
}

func (x *TopicListResponse) GetResponseMessage() string {
	if x != nil {
		return x.ResponseMessage
	}
	return ""
}

func (x *TopicListResponse) GetTopics() []*TopicDescriptor {
	if x != nil {
		return x.Topics
	}
	return nil
}

// [brief]: Request to subscribe for a list of topics.
// [detail]: Request to subscribe for a list of topics.
type TopicSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: If true, Continuously sync all the
	// data for the requested topic or end the stream
	// after syncing current set of data
	// [default_value]: false
	ContinuousSync bool `protobuf:"varint,1,opt,name=continuous_sync,json=continuousSync,proto3" json:"continuous_sync,omitempty"`
	// [brief]: List of topics to subscribe.
	// [optional]: Default will subscribe to all topics.
	// [default_value]: all topics will be subscribed
	SubscriptionTopics []string `protobuf:"bytes,2,rep,name=subscription_topics,json=subscriptionTopics,proto3" json:"subscription_topics,omitempty"`
	// [brief]: Response stream options
	// [optional]: Refer StreamOptions for defaults
	StreamOptions *StreamOptions `protobuf:"bytes,3,opt,name=stream_options,json=streamOptions,proto3" json:"stream_options,omitempty"`
}

func (x *TopicSubscribeRequest) Reset() {
	*x = TopicSubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_dds_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopicSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicSubscribeRequest) ProtoMessage() {}

func (x *TopicSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_dds_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicSubscribeRequest.ProtoReflect.Descriptor instead.
func (*TopicSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_jnx_dds_types_proto_rawDescGZIP(), []int{8}
}

func (x *TopicSubscribeRequest) GetContinuousSync() bool {
	if x != nil {
		return x.ContinuousSync
	}
	return false
}

func (x *TopicSubscribeRequest) GetSubscriptionTopics() []string {
	if x != nil {
		return x.SubscriptionTopics
	}
	return nil
}

func (x *TopicSubscribeRequest) GetStreamOptions() *StreamOptions {
	if x != nil {
		return x.StreamOptions
	}
	return nil
}

// [brief]: Descriptor for links of an object
// [detail]: Descriptor for links of an object
type LinkDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Unique identifier for the
	// link object
	LinkGuid uint64 `protobuf:"varint,1,opt,name=link_guid,json=linkGuid,proto3" json:"link_guid,omitempty"`
	// [brief]: Link index for named link
	LinkIndex uint32 `protobuf:"varint,2,opt,name=link_index,json=linkIndex,proto3" json:"link_index,omitempty"`
	// [brief]: true if this is a bundle
	// link to the bundle root
	IsBundled bool `protobuf:"varint,3,opt,name=is_bundled,json=isBundled,proto3" json:"is_bundled,omitempty"`
	// [brief]: link topic desciptors
	LinkTopics []*TopicDescriptor `protobuf:"bytes,4,rep,name=link_topics,json=linkTopics,proto3" json:"link_topics,omitempty"`
}

func (x *LinkDescriptor) Reset() {
	*x = LinkDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_dds_types_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkDescriptor) ProtoMessage() {}

func (x *LinkDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_dds_types_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkDescriptor.ProtoReflect.Descriptor instead.
func (*LinkDescriptor) Descriptor() ([]byte, []int) {
	return file_jnx_dds_types_proto_rawDescGZIP(), []int{9}
}

func (x *LinkDescriptor) GetLinkGuid() uint64 {
	if x != nil {
		return x.LinkGuid
	}
	return 0
}

func (x *LinkDescriptor) GetLinkIndex() uint32 {
	if x != nil {
		return x.LinkIndex
	}
	return 0
}

func (x *LinkDescriptor) GetIsBundled() bool {
	if x != nil {
		return x.IsBundled
	}
	return false
}

func (x *LinkDescriptor) GetLinkTopics() []*TopicDescriptor {
	if x != nil {
		return x.LinkTopics
	}
	return nil
}

// [brief]: Descriptor for attachments of an object
// [detail]: Descriptor for attachments of an object
type AttachmentDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Unique identifier for the
	// attachment object
	AttachmentGuid uint64 `protobuf:"varint,1,opt,name=attachment_guid,json=attachmentGuid,proto3" json:"attachment_guid,omitempty"`
	// [brief]: Attachment index for named attaches
	AttachmentIndex uint32 `protobuf:"varint,2,opt,name=attachment_index,json=attachmentIndex,proto3" json:"attachment_index,omitempty"`
	// [brief]: true if this is a bundle
	// link to the bundle root
	IsBundled bool `protobuf:"varint,3,opt,name=is_bundled,json=isBundled,proto3" json:"is_bundled,omitempty"`
	// [brief]: attachment topic descriptors
	AttachmentTopics []*TopicDescriptor `protobuf:"bytes,4,rep,name=attachment_topics,json=attachmentTopics,proto3" json:"attachment_topics,omitempty"`
}

func (x *AttachmentDescriptor) Reset() {
	*x = AttachmentDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_dds_types_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachmentDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachmentDescriptor) ProtoMessage() {}

func (x *AttachmentDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_dds_types_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachmentDescriptor.ProtoReflect.Descriptor instead.
func (*AttachmentDescriptor) Descriptor() ([]byte, []int) {
	return file_jnx_dds_types_proto_rawDescGZIP(), []int{10}
}

func (x *AttachmentDescriptor) GetAttachmentGuid() uint64 {
	if x != nil {
		return x.AttachmentGuid
	}
	return 0
}

func (x *AttachmentDescriptor) GetAttachmentIndex() uint32 {
	if x != nil {
		return x.AttachmentIndex
	}
	return 0
}

func (x *AttachmentDescriptor) GetIsBundled() bool {
	if x != nil {
		return x.IsBundled
	}
	return false
}

func (x *AttachmentDescriptor) GetAttachmentTopics() []*TopicDescriptor {
	if x != nil {
		return x.AttachmentTopics
	}
	return nil
}

// [brief]: Stream of descriptors for subscribed objects
// [detail]: Stream of descriptors for subscribed objects
type ObjectStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: status of the object stream
	StreamStatus ObjectStreamStatus `protobuf:"varint,1,opt,name=stream_status,json=streamStatus,proto3,enum=jnx.jet.dds.ObjectStreamStatus" json:"stream_status,omitempty"`
	// [brief]: Batch of objects of size
	// upto the batch_size entries.
	Objects []*ObjectStreamEntry `protobuf:"bytes,2,rep,name=objects,proto3" json:"objects,omitempty"`
}

func (x *ObjectStreamResponse) Reset() {
	*x = ObjectStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_dds_types_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectStreamResponse) ProtoMessage() {}

func (x *ObjectStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_dds_types_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectStreamResponse.ProtoReflect.Descriptor instead.
func (*ObjectStreamResponse) Descriptor() ([]byte, []int) {
	return file_jnx_dds_types_proto_rawDescGZIP(), []int{11}
}

func (x *ObjectStreamResponse) GetStreamStatus() ObjectStreamStatus {
	if x != nil {
		return x.StreamStatus
	}
	return ObjectStreamStatus_STATUS_STREAMING
}

func (x *ObjectStreamResponse) GetObjects() []*ObjectStreamEntry {
	if x != nil {
		return x.Objects
	}
	return nil
}

// [brief]: Entry for one object descriptor
// [detail]: Entry for one object descriptor
type ObjectStreamEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: sync timestamp
	Timestamp string `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// [brief]: Operation type of this version
	// of the object
	OperationType Operation `protobuf:"varint,2,opt,name=operation_type,json=operationType,proto3,enum=jnx.jet.dds.Operation" json:"operation_type,omitempty"`
	// [brief]: Unique Hex identifier for
	// the object
	ObjectGuid uint64 `protobuf:"varint,3,opt,name=object_guid,json=objectGuid,proto3" json:"object_guid,omitempty"`
	// [brief]: Object logical clock of the
	// object
	ObjectOlc uint64 `protobuf:"varint,4,opt,name=object_olc,json=objectOlc,proto3" json:"object_olc,omitempty"`
	// [brief]: If this is an attach, then
	// guid of its base object
	BaseObjectGuid uint64 `protobuf:"varint,5,opt,name=base_object_guid,json=baseObjectGuid,proto3" json:"base_object_guid,omitempty"`
	// [brief]: Type name of this object
	ObjectType string `protobuf:"bytes,6,opt,name=object_type,json=objectType,proto3" json:"object_type,omitempty"`
	// [brief]: Node on which this object
	// was published
	ProducerNode string `protobuf:"bytes,7,opt,name=producer_node,json=producerNode,proto3" json:"producer_node,omitempty"`
	// [brief]: Name of the application
	// which published this object
	ProducerName string `protobuf:"bytes,8,opt,name=producer_name,json=producerName,proto3" json:"producer_name,omitempty"`
	// [brief]: Unique production id
	// for the producer application
	ProducerId uint32 `protobuf:"varint,9,opt,name=producer_id,json=producerId,proto3" json:"producer_id,omitempty"`
	// [brief]: Object class
	ObjectClass ObjectClass `protobuf:"varint,10,opt,name=object_class,json=objectClass,proto3,enum=jnx.jet.dds.ObjectClass" json:"object_class,omitempty"`
	// [brief]: Object publish topic descriptors
	ObjectTopics []*TopicDescriptor `protobuf:"bytes,11,rep,name=object_topics,json=objectTopics,proto3" json:"object_topics,omitempty"`
	// [brief]: Metadata of links
	Links []*LinkDescriptor `protobuf:"bytes,12,rep,name=links,proto3" json:"links,omitempty"`
	// [brief]: Metadata of attachments
	Attachments []*AttachmentDescriptor `protobuf:"bytes,13,rep,name=attachments,proto3" json:"attachments,omitempty"`
	// [brief]: Object attributes
	Attributes *structpb.Struct `protobuf:"bytes,14,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *ObjectStreamEntry) Reset() {
	*x = ObjectStreamEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_dds_types_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectStreamEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectStreamEntry) ProtoMessage() {}

func (x *ObjectStreamEntry) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_dds_types_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectStreamEntry.ProtoReflect.Descriptor instead.
func (*ObjectStreamEntry) Descriptor() ([]byte, []int) {
	return file_jnx_dds_types_proto_rawDescGZIP(), []int{12}
}

func (x *ObjectStreamEntry) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *ObjectStreamEntry) GetOperationType() Operation {
	if x != nil {
		return x.OperationType
	}
	return Operation_OPERATION_UNKNOWN
}

func (x *ObjectStreamEntry) GetObjectGuid() uint64 {
	if x != nil {
		return x.ObjectGuid
	}
	return 0
}

func (x *ObjectStreamEntry) GetObjectOlc() uint64 {
	if x != nil {
		return x.ObjectOlc
	}
	return 0
}

func (x *ObjectStreamEntry) GetBaseObjectGuid() uint64 {
	if x != nil {
		return x.BaseObjectGuid
	}
	return 0
}

func (x *ObjectStreamEntry) GetObjectType() string {
	if x != nil {
		return x.ObjectType
	}
	return ""
}

func (x *ObjectStreamEntry) GetProducerNode() string {
	if x != nil {
		return x.ProducerNode
	}
	return ""
}

func (x *ObjectStreamEntry) GetProducerName() string {
	if x != nil {
		return x.ProducerName
	}
	return ""
}

func (x *ObjectStreamEntry) GetProducerId() uint32 {
	if x != nil {
		return x.ProducerId
	}
	return 0
}

func (x *ObjectStreamEntry) GetObjectClass() ObjectClass {
	if x != nil {
		return x.ObjectClass
	}
	return ObjectClass_CLASS_OBJECT
}

func (x *ObjectStreamEntry) GetObjectTopics() []*TopicDescriptor {
	if x != nil {
		return x.ObjectTopics
	}
	return nil
}

func (x *ObjectStreamEntry) GetLinks() []*LinkDescriptor {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *ObjectStreamEntry) GetAttachments() []*AttachmentDescriptor {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *ObjectStreamEntry) GetAttributes() *structpb.Struct {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// [brief]: Request to fetch application data
// [detail]: Request to fetch application data
type ApplicationDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Application data path
	// [detail]: Valid data paths are available
	// via Advertisement DDS subscription
	// [mandatory]: Must include the data path
	DataPath string `protobuf:"bytes,1,opt,name=data_path,json=dataPath,proto3" json:"data_path,omitempty"`
	// [brief]: Indicate how to fetch the data
	// [note]: Not yet implemented
	FetchType DataFetchType `protobuf:"varint,2,opt,name=fetch_type,json=fetchType,proto3,enum=jnx.jet.dds.DataFetchType" json:"fetch_type,omitempty"`
	// [brief]: Optional arguments to the data request.
	// Read as a map of <key,value> pairs. Expects a string
	// key and either a string, numeric or a boolean value
	Arguments *structpb.Struct `protobuf:"bytes,4,opt,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *ApplicationDataRequest) Reset() {
	*x = ApplicationDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_dds_types_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationDataRequest) ProtoMessage() {}

func (x *ApplicationDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_dds_types_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationDataRequest.ProtoReflect.Descriptor instead.
func (*ApplicationDataRequest) Descriptor() ([]byte, []int) {
	return file_jnx_dds_types_proto_rawDescGZIP(), []int{13}
}

func (x *ApplicationDataRequest) GetDataPath() string {
	if x != nil {
		return x.DataPath
	}
	return ""
}

func (x *ApplicationDataRequest) GetFetchType() DataFetchType {
	if x != nil {
		return x.FetchType
	}
	return DataFetchType_FETCH_ALL
}

func (x *ApplicationDataRequest) GetArguments() *structpb.Struct {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type DataStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Data stream status
	StreamStatus DataStreamStatus `protobuf:"varint,1,opt,name=stream_status,json=streamStatus,proto3,enum=jnx.jet.dds.DataStreamStatus" json:"stream_status,omitempty"`
	// [brief]: Array of application data
	// output stream contents
	StreamData *structpb.Struct `protobuf:"bytes,2,opt,name=stream_data,json=streamData,proto3" json:"stream_data,omitempty"`
}

func (x *DataStreamResponse) Reset() {
	*x = DataStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_dds_types_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataStreamResponse) ProtoMessage() {}

func (x *DataStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_dds_types_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataStreamResponse.ProtoReflect.Descriptor instead.
func (*DataStreamResponse) Descriptor() ([]byte, []int) {
	return file_jnx_dds_types_proto_rawDescGZIP(), []int{14}
}

func (x *DataStreamResponse) GetStreamStatus() DataStreamStatus {
	if x != nil {
		return x.StreamStatus
	}
	return DataStreamStatus_DATA_PENDING
}

func (x *DataStreamResponse) GetStreamData() *structpb.Struct {
	if x != nil {
		return x.StreamData
	}
	return nil
}

// [brief]: Meta description for each field.
type SchemaModelResponse_FieldDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Data type of the field
	DataType string `protobuf:"bytes,1,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	// [brief]: This field can either be singular
	// value or an array of values.
	IsArray bool `protobuf:"varint,2,opt,name=is_array,json=isArray,proto3" json:"is_array,omitempty"`
	// [brief]: If is_array is true, then this
	// represents the size of the declared array
	// -1 is for dynamic array
	ArrayLen uint32 `protobuf:"varint,3,opt,name=array_len,json=arrayLen,proto3" json:"array_len,omitempty"`
	// [brief]: If type is enum, then this lists
	// all possible enum values
	EnumType []*SchemaModelResponse_FieldDescriptor_EnumBitsetDescriptor `protobuf:"bytes,4,rep,name=enum_type,json=enumType,proto3" json:"enum_type,omitempty"`
	// [brief]: If type is bitset, then this lists
	// all possible bitset values
	BitsetType []*SchemaModelResponse_FieldDescriptor_EnumBitsetDescriptor `protobuf:"bytes,5,rep,name=bitset_type,json=bitsetType,proto3" json:"bitset_type,omitempty"`
	// [brief]: If this is inner type, then this
	// populates the inner type details
	Fields map[string]*SchemaModelResponse_FieldDescriptor `protobuf:"bytes,6,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SchemaModelResponse_FieldDescriptor) Reset() {
	*x = SchemaModelResponse_FieldDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_dds_types_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaModelResponse_FieldDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaModelResponse_FieldDescriptor) ProtoMessage() {}

func (x *SchemaModelResponse_FieldDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_dds_types_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaModelResponse_FieldDescriptor.ProtoReflect.Descriptor instead.
func (*SchemaModelResponse_FieldDescriptor) Descriptor() ([]byte, []int) {
	return file_jnx_dds_types_proto_rawDescGZIP(), []int{2, 0}
}

func (x *SchemaModelResponse_FieldDescriptor) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *SchemaModelResponse_FieldDescriptor) GetIsArray() bool {
	if x != nil {
		return x.IsArray
	}
	return false
}

func (x *SchemaModelResponse_FieldDescriptor) GetArrayLen() uint32 {
	if x != nil {
		return x.ArrayLen
	}
	return 0
}

func (x *SchemaModelResponse_FieldDescriptor) GetEnumType() []*SchemaModelResponse_FieldDescriptor_EnumBitsetDescriptor {
	if x != nil {
		return x.EnumType
	}
	return nil
}

func (x *SchemaModelResponse_FieldDescriptor) GetBitsetType() []*SchemaModelResponse_FieldDescriptor_EnumBitsetDescriptor {
	if x != nil {
		return x.BitsetType
	}
	return nil
}

func (x *SchemaModelResponse_FieldDescriptor) GetFields() map[string]*SchemaModelResponse_FieldDescriptor {
	if x != nil {
		return x.Fields
	}
	return nil
}

// [brief]: Natural name info for the type
type SchemaModelResponse_NaturalNameDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: type_guid of the parent
	// type in hierarchy
	ParentType string `protobuf:"bytes,1,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty"`
	// [brief]: storage_type in the database
	// [detail]: Internal data
	StorageType string `protobuf:"bytes,2,opt,name=storage_type,json=storageType,proto3" json:"storage_type,omitempty"`
	// [brief]: one or more fields in this
	// type that make up the natural name
	NaturalFields []string `protobuf:"bytes,3,rep,name=natural_fields,json=naturalFields,proto3" json:"natural_fields,omitempty"`
}

func (x *SchemaModelResponse_NaturalNameDescriptor) Reset() {
	*x = SchemaModelResponse_NaturalNameDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_dds_types_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaModelResponse_NaturalNameDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaModelResponse_NaturalNameDescriptor) ProtoMessage() {}

func (x *SchemaModelResponse_NaturalNameDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_dds_types_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaModelResponse_NaturalNameDescriptor.ProtoReflect.Descriptor instead.
func (*SchemaModelResponse_NaturalNameDescriptor) Descriptor() ([]byte, []int) {
	return file_jnx_dds_types_proto_rawDescGZIP(), []int{2, 1}
}

func (x *SchemaModelResponse_NaturalNameDescriptor) GetParentType() string {
	if x != nil {
		return x.ParentType
	}
	return ""
}

func (x *SchemaModelResponse_NaturalNameDescriptor) GetStorageType() string {
	if x != nil {
		return x.StorageType
	}
	return ""
}

func (x *SchemaModelResponse_NaturalNameDescriptor) GetNaturalFields() []string {
	if x != nil {
		return x.NaturalFields
	}
	return nil
}

// [detail]: Descriptor for each type of the object in
// the system along with all necessary metadata.
type SchemaModelResponse_TypeDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Globally unique Hex identifier
	// for this type, to be used as a key for
	// lookup purposes.
	TypeGuid string `protobuf:"bytes,1,opt,name=type_guid,json=typeGuid,proto3" json:"type_guid,omitempty"`
	// [brief]: Name of the module this type
	// belongs to. There could be objects of
	// same type name in different modules.
	ModuleName string `protobuf:"bytes,2,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	// [brief]: Package name of this type in
	// this module. There could be objects of
	// same type name in differnt packages.
	PackageName string `protobuf:"bytes,3,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	// [brief]: Name of the type of the object.
	TypeName string `protobuf:"bytes,4,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	// [brief]: Object type class
	TypeClass ObjectClass `protobuf:"varint,5,opt,name=type_class,json=typeClass,proto3,enum=jnx.jet.dds.ObjectClass" json:"type_class,omitempty"`
	// [brief]: Information about each field
	// and nested fields of this type.
	Fields map[string]*SchemaModelResponse_FieldDescriptor `protobuf:"bytes,6,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// [brief]: Natural names are unique semantic
	// primary keys for this type of object
	NaturalNames map[string]*SchemaModelResponse_NaturalNameDescriptor `protobuf:"bytes,7,rep,name=natural_names,json=naturalNames,proto3" json:"natural_names,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// [brief]: type_guid for other type
	// descriptors which can be linked from this
	// type.
	Links []string `protobuf:"bytes,8,rep,name=links,proto3" json:"links,omitempty"`
	// [brief]: type_guid for other type
	// descriptors which can be linked to
	// this type.
	Children []string `protobuf:"bytes,9,rep,name=children,proto3" json:"children,omitempty"`
	// [brief]: If this type is a bundle
	// content, then a list of bundle root
	// link type_guids
	BundleLinks []string `protobuf:"bytes,10,rep,name=bundle_links,json=bundleLinks,proto3" json:"bundle_links,omitempty"`
	// [brief]: If this type a bundle root,
	// then a list of bundle content
	// type_guids
	BundleContents []string `protobuf:"bytes,11,rep,name=bundle_contents,json=bundleContents,proto3" json:"bundle_contents,omitempty"`
	// [brief]: type_guid for other type
	// descriptors which can be attached
	// to this type
	Attachments []string `protobuf:"bytes,12,rep,name=attachments,proto3" json:"attachments,omitempty"`
	// [brief]: type_guid for other type
	// descriptors, this type can attach
	// to. This is populated if this type
	// is of 'attached-object' class.
	BaseTypes []string `protobuf:"bytes,13,rep,name=base_types,json=baseTypes,proto3" json:"base_types,omitempty"`
}

func (x *SchemaModelResponse_TypeDescriptor) Reset() {
	*x = SchemaModelResponse_TypeDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_dds_types_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaModelResponse_TypeDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaModelResponse_TypeDescriptor) ProtoMessage() {}

func (x *SchemaModelResponse_TypeDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_dds_types_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaModelResponse_TypeDescriptor.ProtoReflect.Descriptor instead.
func (*SchemaModelResponse_TypeDescriptor) Descriptor() ([]byte, []int) {
	return file_jnx_dds_types_proto_rawDescGZIP(), []int{2, 2}
}

func (x *SchemaModelResponse_TypeDescriptor) GetTypeGuid() string {
	if x != nil {
		return x.TypeGuid
	}
	return ""
}

func (x *SchemaModelResponse_TypeDescriptor) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *SchemaModelResponse_TypeDescriptor) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *SchemaModelResponse_TypeDescriptor) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *SchemaModelResponse_TypeDescriptor) GetTypeClass() ObjectClass {
	if x != nil {
		return x.TypeClass
	}
	return ObjectClass_CLASS_OBJECT
}

func (x *SchemaModelResponse_TypeDescriptor) GetFields() map[string]*SchemaModelResponse_FieldDescriptor {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *SchemaModelResponse_TypeDescriptor) GetNaturalNames() map[string]*SchemaModelResponse_NaturalNameDescriptor {
	if x != nil {
		return x.NaturalNames
	}
	return nil
}

func (x *SchemaModelResponse_TypeDescriptor) GetLinks() []string {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *SchemaModelResponse_TypeDescriptor) GetChildren() []string {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *SchemaModelResponse_TypeDescriptor) GetBundleLinks() []string {
	if x != nil {
		return x.BundleLinks
	}
	return nil
}

func (x *SchemaModelResponse_TypeDescriptor) GetBundleContents() []string {
	if x != nil {
		return x.BundleContents
	}
	return nil
}

func (x *SchemaModelResponse_TypeDescriptor) GetAttachments() []string {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *SchemaModelResponse_TypeDescriptor) GetBaseTypes() []string {
	if x != nil {
		return x.BaseTypes
	}
	return nil
}

// [brief]: Enum/Bitset type information
type SchemaModelResponse_FieldDescriptor_EnumBitsetDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Name of the enum field
	// [detail]: Name of the enum field
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// [brief]: Description of the enum field
	// [detail]: Description of the enum field
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// [brief]: Ordinal value of the enum field
	// [detail]: Ordinal value of the enum field
	Value uint32 `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SchemaModelResponse_FieldDescriptor_EnumBitsetDescriptor) Reset() {
	*x = SchemaModelResponse_FieldDescriptor_EnumBitsetDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_dds_types_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaModelResponse_FieldDescriptor_EnumBitsetDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaModelResponse_FieldDescriptor_EnumBitsetDescriptor) ProtoMessage() {}

func (x *SchemaModelResponse_FieldDescriptor_EnumBitsetDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_dds_types_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaModelResponse_FieldDescriptor_EnumBitsetDescriptor.ProtoReflect.Descriptor instead.
func (*SchemaModelResponse_FieldDescriptor_EnumBitsetDescriptor) Descriptor() ([]byte, []int) {
	return file_jnx_dds_types_proto_rawDescGZIP(), []int{2, 0, 0}
}

func (x *SchemaModelResponse_FieldDescriptor_EnumBitsetDescriptor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SchemaModelResponse_FieldDescriptor_EnumBitsetDescriptor) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SchemaModelResponse_FieldDescriptor_EnumBitsetDescriptor) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// [brief]: Documentation per type
type TypeDocumentationResponse_TypeDocumentation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: type_guid of the type
	TypeGuid string `protobuf:"bytes,1,opt,name=type_guid,json=typeGuid,proto3" json:"type_guid,omitempty"`
	// [brief]: Short single line descrption of the type.
	Brief string `protobuf:"bytes,2,opt,name=brief,proto3" json:"brief,omitempty"`
	// [brief]: Detailed description of the type.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// [brief]: Reason for deprecation.
	Deprecated string `protobuf:"bytes,4,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// [brief]: Other resources to look for.
	SeeAlso string `protobuf:"bytes,5,opt,name=see_also,json=seeAlso,proto3" json:"see_also,omitempty"`
	// [brief]: Per field, description based on field name.
	FieldInfo map[string]string `protobuf:"bytes,6,rep,name=field_info,json=fieldInfo,proto3" json:"field_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TypeDocumentationResponse_TypeDocumentation) Reset() {
	*x = TypeDocumentationResponse_TypeDocumentation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_dds_types_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeDocumentationResponse_TypeDocumentation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeDocumentationResponse_TypeDocumentation) ProtoMessage() {}

func (x *TypeDocumentationResponse_TypeDocumentation) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_dds_types_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeDocumentationResponse_TypeDocumentation.ProtoReflect.Descriptor instead.
func (*TypeDocumentationResponse_TypeDocumentation) Descriptor() ([]byte, []int) {
	return file_jnx_dds_types_proto_rawDescGZIP(), []int{4, 0}
}

func (x *TypeDocumentationResponse_TypeDocumentation) GetTypeGuid() string {
	if x != nil {
		return x.TypeGuid
	}
	return ""
}

func (x *TypeDocumentationResponse_TypeDocumentation) GetBrief() string {
	if x != nil {
		return x.Brief
	}
	return ""
}

func (x *TypeDocumentationResponse_TypeDocumentation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TypeDocumentationResponse_TypeDocumentation) GetDeprecated() string {
	if x != nil {
		return x.Deprecated
	}
	return ""
}

func (x *TypeDocumentationResponse_TypeDocumentation) GetSeeAlso() string {
	if x != nil {
		return x.SeeAlso
	}
	return ""
}

func (x *TypeDocumentationResponse_TypeDocumentation) GetFieldInfo() map[string]string {
	if x != nil {
		return x.FieldInfo
	}
	return nil
}

var File_jnx_dds_types_proto protoreflect.FileDescriptor

var file_jnx_dds_types_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6a, 0x6e, 0x78, 0x5f, 0x64, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x64,
	0x64, 0x73, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x58, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x22, 0x5a, 0x0a, 0x12, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x8e, 0x0e, 0x0a, 0x13, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x12,
	0x40, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74,
	0x2e, 0x64, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5c, 0x0a, 0x11,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65,
	0x74, 0x2e, 0x64, 0x64, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x10, 0x74, 0x79, 0x70, 0x65, 0x73, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x1a, 0xd9, 0x04, 0x0a, 0x0f, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x73, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f,
	0x6c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x4c, 0x65, 0x6e, 0x12, 0x62, 0x0a, 0x09, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74,
	0x2e, 0x64, 0x64, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x69, 0x74,
	0x73, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x65,
	0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x66, 0x0a, 0x0b, 0x62, 0x69, 0x74, 0x73, 0x65,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6a,
	0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x64, 0x64, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x42, 0x69, 0x74, 0x73, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x52, 0x0a, 0x62, 0x69, 0x74, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x54, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x64, 0x64, 0x73, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x62, 0x0a, 0x14, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x69, 0x74,
	0x73, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x6b, 0x0a, 0x0b, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6a, 0x6e, 0x78, 0x2e,
	0x6a, 0x65, 0x74, 0x2e, 0x64, 0x64, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x82, 0x01, 0x0a, 0x15, 0x4e, 0x61, 0x74, 0x75, 0x72,
	0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0xa9, 0x06, 0x0a, 0x0e,
	0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x47, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0a,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x64, 0x64, 0x73, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x53, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e,
	0x64, 0x64, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x66, 0x0a, 0x0d, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x41, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x64, 0x64, 0x73, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x2e, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x1a, 0x6b, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x64, 0x64, 0x73, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x77,
	0x0a, 0x11, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x64,
	0x64, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5a, 0x0a, 0x18, 0x54, 0x79, 0x70, 0x65, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xde, 0x04, 0x0a, 0x19, 0x54, 0x79, 0x70, 0x65, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x49, 0x64, 0x12, 0x40, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6a, 0x6e, 0x78, 0x2e,
	0x6a, 0x65, 0x74, 0x2e, 0x64, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x67, 0x0a, 0x12, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x64, 0x64, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x74, 0x79, 0x70, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xc9, 0x02, 0x0a, 0x11, 0x54, 0x79, 0x70,
	0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x47, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x72, 0x69, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x72, 0x69, 0x65,
	0x66, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x65, 0x5f, 0x61, 0x6c, 0x73, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x65, 0x41, 0x6c, 0x73, 0x6f, 0x12, 0x66,
	0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x64, 0x64, 0x73,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x3c, 0x0a, 0x0e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x3d, 0x0a, 0x0f, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x22, 0x54, 0x0a, 0x10, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x22, 0xd7, 0x01, 0x0a, 0x11, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x64,
	0x12, 0x40, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65,
	0x74, 0x2e, 0x64, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a,
	0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x64, 0x64, 0x73, 0x2e, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x15, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x79, 0x6e, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f,
	0x75, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x12, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x64, 0x64, 0x73, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xaa, 0x01, 0x0a, 0x0e, 0x4c,
	0x69, 0x6e, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x47, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x64, 0x64, 0x73, 0x2e, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x6c, 0x69, 0x6e,
	0x6b, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x22, 0xd4, 0x01, 0x0a, 0x14, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x12, 0x27, 0x0a, 0x0f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x11, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x64, 0x64, 0x73, 0x2e, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x10, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x22, 0x96,
	0x01, 0x0a, 0x14, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x64, 0x64, 0x73, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a,
	0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x64, 0x64, 0x73, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x97, 0x05, 0x0a, 0x11, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3d, 0x0a, 0x0e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x64, 0x64,
	0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6f, 0x6c, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x6c, 0x63, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x47, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x3b, 0x0a, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74,
	0x2e, 0x64, 0x64, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x52, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x41, 0x0a,
	0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x64,
	0x64, 0x73, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x52, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73,
	0x12, 0x31, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x64, 0x64, 0x73, 0x2e, 0x4c, 0x69,
	0x6e, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x6c, 0x69,
	0x6e, 0x6b, 0x73, 0x12, 0x43, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a,
	0x65, 0x74, 0x2e, 0x64, 0x64, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x22, 0xa7, 0x01, 0x0a, 0x16, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x50, 0x61, 0x74, 0x68, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x64, 0x64, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x12,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6a, 0x6e, 0x78, 0x2e,
	0x6a, 0x65, 0x74, 0x2e, 0x64, 0x64, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x2a, 0x4a, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x42,
	0x41, 0x44, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x2a, 0xc0, 0x02, 0x0a,
	0x12, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54,
	0x52, 0x45, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x53, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x4d, 0x41, 0x58, 0x5f, 0x50, 0x52, 0x4f, 0x4d, 0x49, 0x53, 0x43, 0x55, 0x4f, 0x55, 0x53, 0x5f,
	0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x02, 0x12,
	0x20, 0x0a, 0x1c, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41,
	0x54, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x03, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x53,
	0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x50, 0x49,
	0x43, 0x53, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x50, 0x49, 0x43, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x06, 0x12, 0x25,
	0x0a, 0x21, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x5f, 0x52, 0x41,
	0x4e, 0x47, 0x45, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x45, 0x4e, 0x44, 0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0x08, 0x2a,
	0x3f, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x46, 0x65, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0d, 0x0a, 0x09, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x10, 0x02,
	0x2a, 0x84, 0x01, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x50, 0x45,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x12,
	0x16, 0x0a, 0x12, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x2a, 0x7b, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x49,
	0x46, 0x59, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x10, 0x03, 0x12, 0x14,
	0x0a, 0x10, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0x04, 0x2a, 0xd7, 0x01, 0x0a, 0x0b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x4f, 0x42,
	0x4a, 0x45, 0x43, 0x54, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x4f, 0x42, 0x4a, 0x45,
	0x43, 0x54, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x41, 0x54,
	0x54, 0x41, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x02, 0x12,
	0x1f, 0x0a, 0x1b, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x41,
	0x54, 0x54, 0x41, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x03,
	0x12, 0x25, 0x0a, 0x21, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x49, 0x52, 0x44, 0x5f,
	0x50, 0x41, 0x52, 0x54, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x4f,
	0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x5f, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x05,
	0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45,
	0x5f, 0x4d, 0x45, 0x54, 0x41, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x06, 0x42, 0x13,
	0x5a, 0x11, 0x6c, 0x61, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_jnx_dds_types_proto_rawDescOnce sync.Once
	file_jnx_dds_types_proto_rawDescData = file_jnx_dds_types_proto_rawDesc
)

func file_jnx_dds_types_proto_rawDescGZIP() []byte {
	file_jnx_dds_types_proto_rawDescOnce.Do(func() {
		file_jnx_dds_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_jnx_dds_types_proto_rawDescData)
	})
	return file_jnx_dds_types_proto_rawDescData
}

var file_jnx_dds_types_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_jnx_dds_types_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_jnx_dds_types_proto_goTypes = []interface{}{
	(ResponseStatus)(0),                                              // 0: jnx.jet.dds.ResponseStatus
	(ObjectStreamStatus)(0),                                          // 1: jnx.jet.dds.ObjectStreamStatus
	(DataFetchType)(0),                                               // 2: jnx.jet.dds.DataFetchType
	(DataStreamStatus)(0),                                            // 3: jnx.jet.dds.DataStreamStatus
	(Operation)(0),                                                   // 4: jnx.jet.dds.Operation
	(ObjectClass)(0),                                                 // 5: jnx.jet.dds.ObjectClass
	(*StreamOptions)(nil),                                            // 6: jnx.jet.dds.StreamOptions
	(*SchemaModelRequest)(nil),                                       // 7: jnx.jet.dds.SchemaModelRequest
	(*SchemaModelResponse)(nil),                                      // 8: jnx.jet.dds.SchemaModelResponse
	(*TypeDocumentationRequest)(nil),                                 // 9: jnx.jet.dds.TypeDocumentationRequest
	(*TypeDocumentationResponse)(nil),                                // 10: jnx.jet.dds.TypeDocumentationResponse
	(*TopicDescriptor)(nil),                                          // 11: jnx.jet.dds.TopicDescriptor
	(*TopicListRequest)(nil),                                         // 12: jnx.jet.dds.TopicListRequest
	(*TopicListResponse)(nil),                                        // 13: jnx.jet.dds.TopicListResponse
	(*TopicSubscribeRequest)(nil),                                    // 14: jnx.jet.dds.TopicSubscribeRequest
	(*LinkDescriptor)(nil),                                           // 15: jnx.jet.dds.LinkDescriptor
	(*AttachmentDescriptor)(nil),                                     // 16: jnx.jet.dds.AttachmentDescriptor
	(*ObjectStreamResponse)(nil),                                     // 17: jnx.jet.dds.ObjectStreamResponse
	(*ObjectStreamEntry)(nil),                                        // 18: jnx.jet.dds.ObjectStreamEntry
	(*ApplicationDataRequest)(nil),                                   // 19: jnx.jet.dds.ApplicationDataRequest
	(*DataStreamResponse)(nil),                                       // 20: jnx.jet.dds.DataStreamResponse
	(*SchemaModelResponse_FieldDescriptor)(nil),                      // 21: jnx.jet.dds.SchemaModelResponse.FieldDescriptor
	(*SchemaModelResponse_NaturalNameDescriptor)(nil),                // 22: jnx.jet.dds.SchemaModelResponse.NaturalNameDescriptor
	(*SchemaModelResponse_TypeDescriptor)(nil),                       // 23: jnx.jet.dds.SchemaModelResponse.TypeDescriptor
	(*SchemaModelResponse_FieldDescriptor_EnumBitsetDescriptor)(nil), // 24: jnx.jet.dds.SchemaModelResponse.FieldDescriptor.EnumBitsetDescriptor
	nil, // 25: jnx.jet.dds.SchemaModelResponse.FieldDescriptor.FieldsEntry
	nil, // 26: jnx.jet.dds.SchemaModelResponse.TypeDescriptor.FieldsEntry
	nil, // 27: jnx.jet.dds.SchemaModelResponse.TypeDescriptor.NaturalNamesEntry
	(*TypeDocumentationResponse_TypeDocumentation)(nil), // 28: jnx.jet.dds.TypeDocumentationResponse.TypeDocumentation
	nil,                     // 29: jnx.jet.dds.TypeDocumentationResponse.TypeDocumentation.FieldInfoEntry
	(*structpb.Struct)(nil), // 30: google.protobuf.Struct
}
var file_jnx_dds_types_proto_depIdxs = []int32{
	0,  // 0: jnx.jet.dds.SchemaModelResponse.response_code:type_name -> jnx.jet.dds.ResponseStatus
	23, // 1: jnx.jet.dds.SchemaModelResponse.types_descriptors:type_name -> jnx.jet.dds.SchemaModelResponse.TypeDescriptor
	0,  // 2: jnx.jet.dds.TypeDocumentationResponse.response_code:type_name -> jnx.jet.dds.ResponseStatus
	28, // 3: jnx.jet.dds.TypeDocumentationResponse.type_documentation:type_name -> jnx.jet.dds.TypeDocumentationResponse.TypeDocumentation
	0,  // 4: jnx.jet.dds.TopicListResponse.response_code:type_name -> jnx.jet.dds.ResponseStatus
	11, // 5: jnx.jet.dds.TopicListResponse.topics:type_name -> jnx.jet.dds.TopicDescriptor
	6,  // 6: jnx.jet.dds.TopicSubscribeRequest.stream_options:type_name -> jnx.jet.dds.StreamOptions
	11, // 7: jnx.jet.dds.LinkDescriptor.link_topics:type_name -> jnx.jet.dds.TopicDescriptor
	11, // 8: jnx.jet.dds.AttachmentDescriptor.attachment_topics:type_name -> jnx.jet.dds.TopicDescriptor
	1,  // 9: jnx.jet.dds.ObjectStreamResponse.stream_status:type_name -> jnx.jet.dds.ObjectStreamStatus
	18, // 10: jnx.jet.dds.ObjectStreamResponse.objects:type_name -> jnx.jet.dds.ObjectStreamEntry
	4,  // 11: jnx.jet.dds.ObjectStreamEntry.operation_type:type_name -> jnx.jet.dds.Operation
	5,  // 12: jnx.jet.dds.ObjectStreamEntry.object_class:type_name -> jnx.jet.dds.ObjectClass
	11, // 13: jnx.jet.dds.ObjectStreamEntry.object_topics:type_name -> jnx.jet.dds.TopicDescriptor
	15, // 14: jnx.jet.dds.ObjectStreamEntry.links:type_name -> jnx.jet.dds.LinkDescriptor
	16, // 15: jnx.jet.dds.ObjectStreamEntry.attachments:type_name -> jnx.jet.dds.AttachmentDescriptor
	30, // 16: jnx.jet.dds.ObjectStreamEntry.attributes:type_name -> google.protobuf.Struct
	2,  // 17: jnx.jet.dds.ApplicationDataRequest.fetch_type:type_name -> jnx.jet.dds.DataFetchType
	30, // 18: jnx.jet.dds.ApplicationDataRequest.arguments:type_name -> google.protobuf.Struct
	3,  // 19: jnx.jet.dds.DataStreamResponse.stream_status:type_name -> jnx.jet.dds.DataStreamStatus
	30, // 20: jnx.jet.dds.DataStreamResponse.stream_data:type_name -> google.protobuf.Struct
	24, // 21: jnx.jet.dds.SchemaModelResponse.FieldDescriptor.enum_type:type_name -> jnx.jet.dds.SchemaModelResponse.FieldDescriptor.EnumBitsetDescriptor
	24, // 22: jnx.jet.dds.SchemaModelResponse.FieldDescriptor.bitset_type:type_name -> jnx.jet.dds.SchemaModelResponse.FieldDescriptor.EnumBitsetDescriptor
	25, // 23: jnx.jet.dds.SchemaModelResponse.FieldDescriptor.fields:type_name -> jnx.jet.dds.SchemaModelResponse.FieldDescriptor.FieldsEntry
	5,  // 24: jnx.jet.dds.SchemaModelResponse.TypeDescriptor.type_class:type_name -> jnx.jet.dds.ObjectClass
	26, // 25: jnx.jet.dds.SchemaModelResponse.TypeDescriptor.fields:type_name -> jnx.jet.dds.SchemaModelResponse.TypeDescriptor.FieldsEntry
	27, // 26: jnx.jet.dds.SchemaModelResponse.TypeDescriptor.natural_names:type_name -> jnx.jet.dds.SchemaModelResponse.TypeDescriptor.NaturalNamesEntry
	21, // 27: jnx.jet.dds.SchemaModelResponse.FieldDescriptor.FieldsEntry.value:type_name -> jnx.jet.dds.SchemaModelResponse.FieldDescriptor
	21, // 28: jnx.jet.dds.SchemaModelResponse.TypeDescriptor.FieldsEntry.value:type_name -> jnx.jet.dds.SchemaModelResponse.FieldDescriptor
	22, // 29: jnx.jet.dds.SchemaModelResponse.TypeDescriptor.NaturalNamesEntry.value:type_name -> jnx.jet.dds.SchemaModelResponse.NaturalNameDescriptor
	29, // 30: jnx.jet.dds.TypeDocumentationResponse.TypeDocumentation.field_info:type_name -> jnx.jet.dds.TypeDocumentationResponse.TypeDocumentation.FieldInfoEntry
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_jnx_dds_types_proto_init() }
func file_jnx_dds_types_proto_init() {
	if File_jnx_dds_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_jnx_dds_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_dds_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaModelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_dds_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaModelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_dds_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeDocumentationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_dds_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeDocumentationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_dds_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopicDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_dds_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopicListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_dds_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopicListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_dds_types_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopicSubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_dds_types_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_dds_types_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttachmentDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_dds_types_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_dds_types_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectStreamEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_dds_types_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_dds_types_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_dds_types_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaModelResponse_FieldDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_dds_types_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaModelResponse_NaturalNameDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_dds_types_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaModelResponse_TypeDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_dds_types_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaModelResponse_FieldDescriptor_EnumBitsetDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_dds_types_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeDocumentationResponse_TypeDocumentation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_jnx_dds_types_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_jnx_dds_types_proto_goTypes,
		DependencyIndexes: file_jnx_dds_types_proto_depIdxs,
		EnumInfos:         file_jnx_dds_types_proto_enumTypes,
		MessageInfos:      file_jnx_dds_types_proto_msgTypes,
	}.Build()
	File_jnx_dds_types_proto = out.File
	file_jnx_dds_types_proto_rawDesc = nil
	file_jnx_dds_types_proto_goTypes = nil
	file_jnx_dds_types_proto_depIdxs = nil
}
