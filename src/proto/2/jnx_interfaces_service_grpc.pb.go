// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InterfacesClient is the client API for Interfaces service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InterfacesClient interface {
	// [brief]:  RPC for adding an interface object
	// [detail]: The interface object could be interface, unit, family, address or
	// ARP/NDP object
	//
	// The InterfaceAddRequest message would be populated with the config details and
	// the InterfaceType  field would be set in the config message by the client to
	// identify the interface object that is being configured.
	InterfaceAdd(ctx context.Context, in *InterfaceAddRequest, opts ...grpc.CallOption) (*InterfaceAddResponse, error)
	// [brief]:  RPC for updating the attributes/properties of an interface object
	// [detail]: If the interface object is not yet created, then this RPC would perform
	// the add operation with the attributes configured.
	//
	// The interface object could be interface, unit, family, address or ARP/NDP object
	//
	// The InterfaceUpdateRequest message would be populated with the config details
	// and the InterfaceType field would be set in the config message by the client
	// to identify the interface object that is being configured.
	//
	// For updating the attributes of the object, the attributes that need to be updated
	// would be populated in the InterfaceUpdateRequest message with the new values
	// that need to be updated.
	//
	// For resetting the values for an attribute (string or integer attribute) the attribute
	// information would be populated with the attribute name and the value would be
	// updated as below
	//
	// String attributes: No value would be set the for attribute
	// Integer attributes: Invalid value would be sent for the attribute
	//
	//
	InterfaceUpdate(ctx context.Context, in *InterfaceUpdateRequest, opts ...grpc.CallOption) (*InterfaceUpdateResponse, error)
	// [brief]:  RPC for deleting an interface object
	// [detail]: The interface object could be interface, unit, family, address or
	// ARP/NDP object
	//
	// Using this RPC, the required interface object config could be removed. It is
	// to be noted when an interface object is deleted, its child objects would be
	// deleted, but the parent objects would not be deleted.
	//
	// Eg: When the interface family object is deleted, the following child objects
	// would also be deleted, if present
	//     interface address object
	//     interface arp object
	//
	// The following parent objects would still be present
	//     interface object
	//     interface unit object
	//
	// The InterfaceDeleteRequest message would be populated with the config details
	// and the InterfaceType field would be set in the config message by the client
	// to identify the interface object that is being configured.
	InterfaceDelete(ctx context.Context, in *InterfaceDeleteRequest, opts ...grpc.CallOption) (*InterfaceDeleteResponse, error)
	// [brief]:  RPC for reading back the details of  an interface object.
	// [detail]: The interface object could be interface, unit, family, address or
	// ARP/NDP object
	//
	// Using this RPC, the attribute values that are configured on the interface object
	// could be obtained. Only the attributes that could be configured using RPCs would
	// be returned as part of this RPC.
	//
	// The InterfaceGetRequest  message would be populated with the object details and
	// the InterfaceType field would be set in the config message by the client to
	// identify the interface object that is being configured.
	InterfaceGet(ctx context.Context, in *InterfaceGetRequest, opts ...grpc.CallOption) (*InterfaceGetResponse, error)
	// [brief]:  RPC for checking owner/creator/permission of the object
	// [detail]: RPC for checking for the following
	//   -  if the specified interface object is owned/created by the client performing
	//      this query
	//   -  unit interface object is a public object if it is created from CLI not updated
	//      by  any clients.
	//
	// The interface object should be an Interface Unit object
	//
	// When an interface object is configured by a client, the whole of the interface
	// tree would be owned by the client. Any other client would not be able to make
	// any configuration changes on the interface tree till the current owner releases
	// the configurations on the interface tree.
	InterfaceUnitPermissionsGet(ctx context.Context, in *InterfaceUnitPermissionsGetRequest, opts ...grpc.CallOption) (*InterfaceUnitPermissionsGetResponse, error)
}

type interfacesClient struct {
	cc grpc.ClientConnInterface
}

func NewInterfacesClient(cc grpc.ClientConnInterface) InterfacesClient {
	return &interfacesClient{cc}
}

func (c *interfacesClient) InterfaceAdd(ctx context.Context, in *InterfaceAddRequest, opts ...grpc.CallOption) (*InterfaceAddResponse, error) {
	out := new(InterfaceAddResponse)
	err := c.cc.Invoke(ctx, "/jnx.jet.interfaces.Interfaces/InterfaceAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfacesClient) InterfaceUpdate(ctx context.Context, in *InterfaceUpdateRequest, opts ...grpc.CallOption) (*InterfaceUpdateResponse, error) {
	out := new(InterfaceUpdateResponse)
	err := c.cc.Invoke(ctx, "/jnx.jet.interfaces.Interfaces/InterfaceUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfacesClient) InterfaceDelete(ctx context.Context, in *InterfaceDeleteRequest, opts ...grpc.CallOption) (*InterfaceDeleteResponse, error) {
	out := new(InterfaceDeleteResponse)
	err := c.cc.Invoke(ctx, "/jnx.jet.interfaces.Interfaces/InterfaceDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfacesClient) InterfaceGet(ctx context.Context, in *InterfaceGetRequest, opts ...grpc.CallOption) (*InterfaceGetResponse, error) {
	out := new(InterfaceGetResponse)
	err := c.cc.Invoke(ctx, "/jnx.jet.interfaces.Interfaces/InterfaceGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfacesClient) InterfaceUnitPermissionsGet(ctx context.Context, in *InterfaceUnitPermissionsGetRequest, opts ...grpc.CallOption) (*InterfaceUnitPermissionsGetResponse, error) {
	out := new(InterfaceUnitPermissionsGetResponse)
	err := c.cc.Invoke(ctx, "/jnx.jet.interfaces.Interfaces/InterfaceUnitPermissionsGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InterfacesServer is the server API for Interfaces service.
// All implementations must embed UnimplementedInterfacesServer
// for forward compatibility
type InterfacesServer interface {
	// [brief]:  RPC for adding an interface object
	// [detail]: The interface object could be interface, unit, family, address or
	// ARP/NDP object
	//
	// The InterfaceAddRequest message would be populated with the config details and
	// the InterfaceType  field would be set in the config message by the client to
	// identify the interface object that is being configured.
	InterfaceAdd(context.Context, *InterfaceAddRequest) (*InterfaceAddResponse, error)
	// [brief]:  RPC for updating the attributes/properties of an interface object
	// [detail]: If the interface object is not yet created, then this RPC would perform
	// the add operation with the attributes configured.
	//
	// The interface object could be interface, unit, family, address or ARP/NDP object
	//
	// The InterfaceUpdateRequest message would be populated with the config details
	// and the InterfaceType field would be set in the config message by the client
	// to identify the interface object that is being configured.
	//
	// For updating the attributes of the object, the attributes that need to be updated
	// would be populated in the InterfaceUpdateRequest message with the new values
	// that need to be updated.
	//
	// For resetting the values for an attribute (string or integer attribute) the attribute
	// information would be populated with the attribute name and the value would be
	// updated as below
	//
	// String attributes: No value would be set the for attribute
	// Integer attributes: Invalid value would be sent for the attribute
	//
	//
	InterfaceUpdate(context.Context, *InterfaceUpdateRequest) (*InterfaceUpdateResponse, error)
	// [brief]:  RPC for deleting an interface object
	// [detail]: The interface object could be interface, unit, family, address or
	// ARP/NDP object
	//
	// Using this RPC, the required interface object config could be removed. It is
	// to be noted when an interface object is deleted, its child objects would be
	// deleted, but the parent objects would not be deleted.
	//
	// Eg: When the interface family object is deleted, the following child objects
	// would also be deleted, if present
	//     interface address object
	//     interface arp object
	//
	// The following parent objects would still be present
	//     interface object
	//     interface unit object
	//
	// The InterfaceDeleteRequest message would be populated with the config details
	// and the InterfaceType field would be set in the config message by the client
	// to identify the interface object that is being configured.
	InterfaceDelete(context.Context, *InterfaceDeleteRequest) (*InterfaceDeleteResponse, error)
	// [brief]:  RPC for reading back the details of  an interface object.
	// [detail]: The interface object could be interface, unit, family, address or
	// ARP/NDP object
	//
	// Using this RPC, the attribute values that are configured on the interface object
	// could be obtained. Only the attributes that could be configured using RPCs would
	// be returned as part of this RPC.
	//
	// The InterfaceGetRequest  message would be populated with the object details and
	// the InterfaceType field would be set in the config message by the client to
	// identify the interface object that is being configured.
	InterfaceGet(context.Context, *InterfaceGetRequest) (*InterfaceGetResponse, error)
	// [brief]:  RPC for checking owner/creator/permission of the object
	// [detail]: RPC for checking for the following
	//   -  if the specified interface object is owned/created by the client performing
	//      this query
	//   -  unit interface object is a public object if it is created from CLI not updated
	//      by  any clients.
	//
	// The interface object should be an Interface Unit object
	//
	// When an interface object is configured by a client, the whole of the interface
	// tree would be owned by the client. Any other client would not be able to make
	// any configuration changes on the interface tree till the current owner releases
	// the configurations on the interface tree.
	InterfaceUnitPermissionsGet(context.Context, *InterfaceUnitPermissionsGetRequest) (*InterfaceUnitPermissionsGetResponse, error)
	mustEmbedUnimplementedInterfacesServer()
}

// UnimplementedInterfacesServer must be embedded to have forward compatible implementations.
type UnimplementedInterfacesServer struct {
}

func (UnimplementedInterfacesServer) InterfaceAdd(context.Context, *InterfaceAddRequest) (*InterfaceAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InterfaceAdd not implemented")
}
func (UnimplementedInterfacesServer) InterfaceUpdate(context.Context, *InterfaceUpdateRequest) (*InterfaceUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InterfaceUpdate not implemented")
}
func (UnimplementedInterfacesServer) InterfaceDelete(context.Context, *InterfaceDeleteRequest) (*InterfaceDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InterfaceDelete not implemented")
}
func (UnimplementedInterfacesServer) InterfaceGet(context.Context, *InterfaceGetRequest) (*InterfaceGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InterfaceGet not implemented")
}
func (UnimplementedInterfacesServer) InterfaceUnitPermissionsGet(context.Context, *InterfaceUnitPermissionsGetRequest) (*InterfaceUnitPermissionsGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InterfaceUnitPermissionsGet not implemented")
}
func (UnimplementedInterfacesServer) mustEmbedUnimplementedInterfacesServer() {}

// UnsafeInterfacesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InterfacesServer will
// result in compilation errors.
type UnsafeInterfacesServer interface {
	mustEmbedUnimplementedInterfacesServer()
}

func RegisterInterfacesServer(s grpc.ServiceRegistrar, srv InterfacesServer) {
	s.RegisterService(&Interfaces_ServiceDesc, srv)
}

func _Interfaces_InterfaceAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfacesServer).InterfaceAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnx.jet.interfaces.Interfaces/InterfaceAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfacesServer).InterfaceAdd(ctx, req.(*InterfaceAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interfaces_InterfaceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfacesServer).InterfaceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnx.jet.interfaces.Interfaces/InterfaceUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfacesServer).InterfaceUpdate(ctx, req.(*InterfaceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interfaces_InterfaceDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfacesServer).InterfaceDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnx.jet.interfaces.Interfaces/InterfaceDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfacesServer).InterfaceDelete(ctx, req.(*InterfaceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interfaces_InterfaceGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfacesServer).InterfaceGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnx.jet.interfaces.Interfaces/InterfaceGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfacesServer).InterfaceGet(ctx, req.(*InterfaceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interfaces_InterfaceUnitPermissionsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceUnitPermissionsGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfacesServer).InterfaceUnitPermissionsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jnx.jet.interfaces.Interfaces/InterfaceUnitPermissionsGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfacesServer).InterfaceUnitPermissionsGet(ctx, req.(*InterfaceUnitPermissionsGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Interfaces_ServiceDesc is the grpc.ServiceDesc for Interfaces service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Interfaces_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jnx.jet.interfaces.Interfaces",
	HandlerType: (*InterfacesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InterfaceAdd",
			Handler:    _Interfaces_InterfaceAdd_Handler,
		},
		{
			MethodName: "InterfaceUpdate",
			Handler:    _Interfaces_InterfaceUpdate_Handler,
		},
		{
			MethodName: "InterfaceDelete",
			Handler:    _Interfaces_InterfaceDelete_Handler,
		},
		{
			MethodName: "InterfaceGet",
			Handler:    _Interfaces_InterfaceGet_Handler,
		},
		{
			MethodName: "InterfaceUnitPermissionsGet",
			Handler:    _Interfaces_InterfaceUnitPermissionsGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jnx_interfaces_service.proto",
}
