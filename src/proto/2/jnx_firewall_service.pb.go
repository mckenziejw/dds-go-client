//
//
// Copyright 2018, Juniper Networks, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// [detail]: This file defines the firewall package for JUNOS.
//
// Brief Description of the key concepts associated with this package and functionality is
// as follows:
//
// Filter is a basic stateless forwarding construct to match on packet content
// and take a set of actions if packet passes the matching criteria.
//
// A Filter is made up of a ordered set of terms, which defines how a packet is matched
// against configured criteria and be treated.
//
// Each Term defines a set of packet matching criteria and a set of action to take
// on the packet if the matching criteria is true. A packets needs to match ALL the matches in
// an term to be considered a match.
//
// A Match is defined by an operation, packet field and value to be matched against. For details
// on the operations supported and various packet fields that could be matched, refer the
// corresponding Enum/Message structure below.
//
// An action determines what to do with the packet on meeting the matching criteria. There are two
// types of actions, viz. terminating and non-terminating. Each term can have zero or more
// non-terminating actions and zero or exactly one terminating action. A non-terminating action is
// one that does not stop the packet to undergo the rest of the Filter processing. An terminating action
// is one, that stops the packet to undergo any further Filter processing.
//
// An attachment point or a bind point is the point in path of packet processing where the packet is
// subjected to Filter processing. An attachment point is defined by attachment entity and direction in
// which the Filter is applied. For eg. a typical bind point is an interface where a packet is subjected
// to Filter.
//
// Diagram below depicts an object diagram for a typical Filter.
// Legends:
//           Term-1 is the ordered Term at position 1.
//           Term-n is the ordered Term at position n.
//             M-n is the match number n in list of matching criteria in a given Term.
//             A-n is the action number n in the list of actions for a given Term.
//                    No no more than 1 action could be a terminating action.
//
//           +-------+-------+-----+------+
// Filter -> | Term-1 | Term-2 | ... | Term-n|
//           +-------+-------+-----+------+
//            |
//            |
//            |      +-----+
//            +----->| M-1 |
//                   +-----+
//                   | M-2 |
//                   +-----+
//                   | ... |
//                   +-----+
//                   | M-n |
//                   +-----+
//                      |
//                      |           +-----+
//                      +---------->| A-1 |
//                                  +-----+
//                                  | A-2 |
//                                  +-----+
//                                  | ... |
//                                  +-----+
//                                  | A-n |
//                                  +-----+
//
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: jnx_firewall_service.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// [brief]: Supported Match Operations
// [default]: OP_INVALID
type MatchOperation int32

const (
	// [brief]: Invalid Filter Match operation
	MatchOperation_OP_INVALID MatchOperation = 0
	// [brief]: Match operation equal
	MatchOperation_OP_EQUAL MatchOperation = 1
	// [brief]: Match operation not equal
	MatchOperation_OP_NOT_EQUAL MatchOperation = 2
)

// Enum value maps for MatchOperation.
var (
	MatchOperation_name = map[int32]string{
		0: "OP_INVALID",
		1: "OP_EQUAL",
		2: "OP_NOT_EQUAL",
	}
	MatchOperation_value = map[string]int32{
		"OP_INVALID":   0,
		"OP_EQUAL":     1,
		"OP_NOT_EQUAL": 2,
	}
)

func (x MatchOperation) Enum() *MatchOperation {
	p := new(MatchOperation)
	*p = x
	return p
}

func (x MatchOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_firewall_service_proto_enumTypes[0].Descriptor()
}

func (MatchOperation) Type() protoreflect.EnumType {
	return &file_jnx_firewall_service_proto_enumTypes[0]
}

func (x MatchOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchOperation.Descriptor instead.
func (MatchOperation) EnumDescriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{0}
}

// [brief]: Policer types which can be configured.
// [default]: POLICER_INVALID
type PolicerType int32

const (
	// [brief]: Invalid policer type
	PolicerType_POLICER_INVALID PolicerType = 0
	// [brief]: Single rate two color
	PolicerType_TWO_COLOR_POLICER PolicerType = 1
	// [brief]: Singel rate three color
	PolicerType_SINGLE_RATE_THREE_COLOR_POLICER PolicerType = 2
	// [brief]: Two rate three color
	PolicerType_TWO_RATE_THREE_COLOR_POLICER PolicerType = 3
	// [brief]: Hierarchical
	PolicerType_HIERARCHICAL_POLICER PolicerType = 4
)

// Enum value maps for PolicerType.
var (
	PolicerType_name = map[int32]string{
		0: "POLICER_INVALID",
		1: "TWO_COLOR_POLICER",
		2: "SINGLE_RATE_THREE_COLOR_POLICER",
		3: "TWO_RATE_THREE_COLOR_POLICER",
		4: "HIERARCHICAL_POLICER",
	}
	PolicerType_value = map[string]int32{
		"POLICER_INVALID":                 0,
		"TWO_COLOR_POLICER":               1,
		"SINGLE_RATE_THREE_COLOR_POLICER": 2,
		"TWO_RATE_THREE_COLOR_POLICER":    3,
		"HIERARCHICAL_POLICER":            4,
	}
)

func (x PolicerType) Enum() *PolicerType {
	p := new(PolicerType)
	*p = x
	return p
}

func (x PolicerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicerType) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_firewall_service_proto_enumTypes[1].Descriptor()
}

func (PolicerType) Type() protoreflect.EnumType {
	return &file_jnx_firewall_service_proto_enumTypes[1]
}

func (x PolicerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicerType.Descriptor instead.
func (PolicerType) EnumDescriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{1}
}

// [brief]: Policer Flags to define scope of policer in Filter
// [default]: POLICER_FLAG_INVALID
type PolicerFlag int32

const (
	// [brief]: Invalid Flag
	PolicerFlag_POLICER_FLAG_INVALID PolicerFlag = 0
	// [brief]: The policer instance is activated for each Term its referenced.
	PolicerFlag_POLICER_FLAG_TERM_SPECIFIC PolicerFlag = 1
	// [brief]: The policer instance is activated at global Filter level.
	PolicerFlag_POLICER_FLAG_FILTER_SPECIFIC PolicerFlag = 2
)

// Enum value maps for PolicerFlag.
var (
	PolicerFlag_name = map[int32]string{
		0: "POLICER_FLAG_INVALID",
		1: "POLICER_FLAG_TERM_SPECIFIC",
		2: "POLICER_FLAG_FILTER_SPECIFIC",
	}
	PolicerFlag_value = map[string]int32{
		"POLICER_FLAG_INVALID":         0,
		"POLICER_FLAG_TERM_SPECIFIC":   1,
		"POLICER_FLAG_FILTER_SPECIFIC": 2,
	}
)

func (x PolicerFlag) Enum() *PolicerFlag {
	p := new(PolicerFlag)
	*p = x
	return p
}

func (x PolicerFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicerFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_firewall_service_proto_enumTypes[2].Descriptor()
}

func (PolicerFlag) Type() protoreflect.EnumType {
	return &file_jnx_firewall_service_proto_enumTypes[2]
}

func (x PolicerFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicerFlag.Descriptor instead.
func (PolicerFlag) EnumDescriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{2}
}

// [brief]: Color mode for SRTCM and TRTCM
// [default]: COLOR_MODE_INVALID
type PolicerColorModeType int32

const (
	// [brief]: Invalid type
	PolicerColorModeType_COLOR_MODE_INVALID PolicerColorModeType = 0
	// [brief]: Color Blind
	PolicerColorModeType_COLOR_MODE_COLOR_BLIND PolicerColorModeType = 1
	// [brief]: Color Aware
	PolicerColorModeType_COLOR_MODE_COLOR_AWARE PolicerColorModeType = 2
)

// Enum value maps for PolicerColorModeType.
var (
	PolicerColorModeType_name = map[int32]string{
		0: "COLOR_MODE_INVALID",
		1: "COLOR_MODE_COLOR_BLIND",
		2: "COLOR_MODE_COLOR_AWARE",
	}
	PolicerColorModeType_value = map[string]int32{
		"COLOR_MODE_INVALID":     0,
		"COLOR_MODE_COLOR_BLIND": 1,
		"COLOR_MODE_COLOR_AWARE": 2,
	}
)

func (x PolicerColorModeType) Enum() *PolicerColorModeType {
	p := new(PolicerColorModeType)
	*p = x
	return p
}

func (x PolicerColorModeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicerColorModeType) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_firewall_service_proto_enumTypes[3].Descriptor()
}

func (PolicerColorModeType) Type() protoreflect.EnumType {
	return &file_jnx_firewall_service_proto_enumTypes[3]
}

func (x PolicerColorModeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicerColorModeType.Descriptor instead.
func (PolicerColorModeType) EnumDescriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{3}
}

// [brief]: Loss Priority values
// [default]: LOSS_PRIORITY_INVALID
type FilterLossPriority int32

const (
	// [brief]: Invalid
	FilterLossPriority_LOSS_PRIORITY_INVALID FilterLossPriority = 0
	// [brief]: High
	FilterLossPriority_LOSS_PRIORITY_HIGH FilterLossPriority = 1
	// [brief]: Medium High
	FilterLossPriority_LOSS_PRIORITY_MEDIUM_HIGH FilterLossPriority = 2
	// [brief]: Medium low
	FilterLossPriority_LOSS_PRIORITY_MEDIUM_LOW FilterLossPriority = 3
	// [brief]: low
	FilterLossPriority_LOSS_PRIORITY_LOW FilterLossPriority = 4
)

// Enum value maps for FilterLossPriority.
var (
	FilterLossPriority_name = map[int32]string{
		0: "LOSS_PRIORITY_INVALID",
		1: "LOSS_PRIORITY_HIGH",
		2: "LOSS_PRIORITY_MEDIUM_HIGH",
		3: "LOSS_PRIORITY_MEDIUM_LOW",
		4: "LOSS_PRIORITY_LOW",
	}
	FilterLossPriority_value = map[string]int32{
		"LOSS_PRIORITY_INVALID":     0,
		"LOSS_PRIORITY_HIGH":        1,
		"LOSS_PRIORITY_MEDIUM_HIGH": 2,
		"LOSS_PRIORITY_MEDIUM_LOW":  3,
		"LOSS_PRIORITY_LOW":         4,
	}
)

func (x FilterLossPriority) Enum() *FilterLossPriority {
	p := new(FilterLossPriority)
	*p = x
	return p
}

func (x FilterLossPriority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterLossPriority) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_firewall_service_proto_enumTypes[4].Descriptor()
}

func (FilterLossPriority) Type() protoreflect.EnumType {
	return &file_jnx_firewall_service_proto_enumTypes[4]
}

func (x FilterLossPriority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterLossPriority.Descriptor instead.
func (FilterLossPriority) EnumDescriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{4}
}

// [brief]: Forwarding Class
// [default]: FORWARDING_CLASS_INVALID
type FilterForwardingClass int32

const (
	// [brief]: Invalid
	FilterForwardingClass_FORWARDING_CLASS_INVALID FilterForwardingClass = 0
	// [brief]: Assured
	FilterForwardingClass_FORWARDING_CLASS_ASSURED FilterForwardingClass = 1
	// [brief]: Best Effort
	FilterForwardingClass_FORWARDING_CLASS_BEST_EFFORT FilterForwardingClass = 2
	// [brief]: Expedited
	FilterForwardingClass_FORWARDING_CLASS_EXPEDITED FilterForwardingClass = 3
	// [brief]: Network Control
	FilterForwardingClass_FORWARDING_CLASS_NETWORK_CONTROL FilterForwardingClass = 4
)

// Enum value maps for FilterForwardingClass.
var (
	FilterForwardingClass_name = map[int32]string{
		0: "FORWARDING_CLASS_INVALID",
		1: "FORWARDING_CLASS_ASSURED",
		2: "FORWARDING_CLASS_BEST_EFFORT",
		3: "FORWARDING_CLASS_EXPEDITED",
		4: "FORWARDING_CLASS_NETWORK_CONTROL",
	}
	FilterForwardingClass_value = map[string]int32{
		"FORWARDING_CLASS_INVALID":         0,
		"FORWARDING_CLASS_ASSURED":         1,
		"FORWARDING_CLASS_BEST_EFFORT":     2,
		"FORWARDING_CLASS_EXPEDITED":       3,
		"FORWARDING_CLASS_NETWORK_CONTROL": 4,
	}
)

func (x FilterForwardingClass) Enum() *FilterForwardingClass {
	p := new(FilterForwardingClass)
	*p = x
	return p
}

func (x FilterForwardingClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterForwardingClass) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_firewall_service_proto_enumTypes[5].Descriptor()
}

func (FilterForwardingClass) Type() protoreflect.EnumType {
	return &file_jnx_firewall_service_proto_enumTypes[5]
}

func (x FilterForwardingClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterForwardingClass.Descriptor instead.
func (FilterForwardingClass) EnumDescriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{5}
}

// [brief]: STP match Flags
// [default]: STP_FLAG_INVALID
type FilterStpMatchFlags int32

const (
	// [brief]: Invalid
	FilterStpMatchFlags_STP_FLAG_INVALID FilterStpMatchFlags = 0
	// [brief]: Blocking
	FilterStpMatchFlags_STP_FLAG_BLOCKING FilterStpMatchFlags = 1
	// [brief]: Forwarding
	FilterStpMatchFlags_STP_FLAG_FORWARDING FilterStpMatchFlags = 2
)

// Enum value maps for FilterStpMatchFlags.
var (
	FilterStpMatchFlags_name = map[int32]string{
		0: "STP_FLAG_INVALID",
		1: "STP_FLAG_BLOCKING",
		2: "STP_FLAG_FORWARDING",
	}
	FilterStpMatchFlags_value = map[string]int32{
		"STP_FLAG_INVALID":    0,
		"STP_FLAG_BLOCKING":   1,
		"STP_FLAG_FORWARDING": 2,
	}
)

func (x FilterStpMatchFlags) Enum() *FilterStpMatchFlags {
	p := new(FilterStpMatchFlags)
	*p = x
	return p
}

func (x FilterStpMatchFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterStpMatchFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_firewall_service_proto_enumTypes[6].Descriptor()
}

func (FilterStpMatchFlags) Type() protoreflect.EnumType {
	return &file_jnx_firewall_service_proto_enumTypes[6]
}

func (x FilterStpMatchFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterStpMatchFlags.Descriptor instead.
func (FilterStpMatchFlags) EnumDescriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{6}
}

// [brief]: Various Icmp Reject Action Reasons.
// [default]: ICMP_ADMINISTRATIVELY_PROHIBITED
type ActionIcmpRejectReason int32

const (
	// [brief]: Send ICMP Administratively Prohibited message
	ActionIcmpRejectReason_ICMP_ADMINISTRATIVELY_PROHIBITED ActionIcmpRejectReason = 0
	// [brief]: Send ICMP Bad Host ToS message
	ActionIcmpRejectReason_ICMP_BAD_HOST_TOS ActionIcmpRejectReason = 1
	// [brief]: Send ICMP Bad Network ToS message
	ActionIcmpRejectReason_ICMP_BAD_NETWORK_TOS ActionIcmpRejectReason = 2
	// [brief]: Send ICMP Fragmentation Needed message
	ActionIcmpRejectReason_ICMP_FRAGMENTATION_NEEDED ActionIcmpRejectReason = 3
	// [brief]: Send ICMP Host Prohibited message
	ActionIcmpRejectReason_ICMP_HOST_PROHIBITED ActionIcmpRejectReason = 4
	// [brief]: Send ICMP Host Unknown message
	ActionIcmpRejectReason_ICMP_HOST_UNKNOWN ActionIcmpRejectReason = 5
	// [brief]: Send ICMP Host Unreachable message
	ActionIcmpRejectReason_ICMP_HOST_UNREACHABLE ActionIcmpRejectReason = 6
	// [brief]: Send ICMP Network Prohibited message
	ActionIcmpRejectReason_ICMP_NETWORK_PROHIBITED ActionIcmpRejectReason = 7
	// [brief]: Send ICMP Network Unknown message
	ActionIcmpRejectReason_ICMP_NETWORK_UNKNOWN ActionIcmpRejectReason = 8
	// [brief]: Send ICMP Network Unreachable message
	ActionIcmpRejectReason_ICMP_NETWORK_UNREACHABLE ActionIcmpRejectReason = 9
	// [brief]: Send ICMP Port Unreachable message
	ActionIcmpRejectReason_ICMP_PORT_UNREACHABLE ActionIcmpRejectReason = 10
	// [brief]: Send ICMP Precedence Cutoff message
	ActionIcmpRejectReason_ICMP_PRECEDENCE_CUTOFF ActionIcmpRejectReason = 11
	// [brief]: Send ICMP Precedence Violation message
	ActionIcmpRejectReason_ICMP_PRECEDENCE_VIOLATION ActionIcmpRejectReason = 12
	// [brief]: Send ICMP Protocol Unreachable message
	ActionIcmpRejectReason_ICMP_PROTOCOL_UNREACHABLE ActionIcmpRejectReason = 13
	// [brief]: Send ICMP Source Host Isolated message
	ActionIcmpRejectReason_ICMP_SOURCE_HOST_ISOLATED ActionIcmpRejectReason = 14
	// [brief]: Send ICMP Source Route Failed message
	ActionIcmpRejectReason_ICMP_SOURCE_ROUTE_FAILED ActionIcmpRejectReason = 15
	// [brief]: Send TCP Reset message
	ActionIcmpRejectReason_ICMP_TCP_RESET ActionIcmpRejectReason = 16
)

// Enum value maps for ActionIcmpRejectReason.
var (
	ActionIcmpRejectReason_name = map[int32]string{
		0:  "ICMP_ADMINISTRATIVELY_PROHIBITED",
		1:  "ICMP_BAD_HOST_TOS",
		2:  "ICMP_BAD_NETWORK_TOS",
		3:  "ICMP_FRAGMENTATION_NEEDED",
		4:  "ICMP_HOST_PROHIBITED",
		5:  "ICMP_HOST_UNKNOWN",
		6:  "ICMP_HOST_UNREACHABLE",
		7:  "ICMP_NETWORK_PROHIBITED",
		8:  "ICMP_NETWORK_UNKNOWN",
		9:  "ICMP_NETWORK_UNREACHABLE",
		10: "ICMP_PORT_UNREACHABLE",
		11: "ICMP_PRECEDENCE_CUTOFF",
		12: "ICMP_PRECEDENCE_VIOLATION",
		13: "ICMP_PROTOCOL_UNREACHABLE",
		14: "ICMP_SOURCE_HOST_ISOLATED",
		15: "ICMP_SOURCE_ROUTE_FAILED",
		16: "ICMP_TCP_RESET",
	}
	ActionIcmpRejectReason_value = map[string]int32{
		"ICMP_ADMINISTRATIVELY_PROHIBITED": 0,
		"ICMP_BAD_HOST_TOS":                1,
		"ICMP_BAD_NETWORK_TOS":             2,
		"ICMP_FRAGMENTATION_NEEDED":        3,
		"ICMP_HOST_PROHIBITED":             4,
		"ICMP_HOST_UNKNOWN":                5,
		"ICMP_HOST_UNREACHABLE":            6,
		"ICMP_NETWORK_PROHIBITED":          7,
		"ICMP_NETWORK_UNKNOWN":             8,
		"ICMP_NETWORK_UNREACHABLE":         9,
		"ICMP_PORT_UNREACHABLE":            10,
		"ICMP_PRECEDENCE_CUTOFF":           11,
		"ICMP_PRECEDENCE_VIOLATION":        12,
		"ICMP_PROTOCOL_UNREACHABLE":        13,
		"ICMP_SOURCE_HOST_ISOLATED":        14,
		"ICMP_SOURCE_ROUTE_FAILED":         15,
		"ICMP_TCP_RESET":                   16,
	}
)

func (x ActionIcmpRejectReason) Enum() *ActionIcmpRejectReason {
	p := new(ActionIcmpRejectReason)
	*p = x
	return p
}

func (x ActionIcmpRejectReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionIcmpRejectReason) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_firewall_service_proto_enumTypes[7].Descriptor()
}

func (ActionIcmpRejectReason) Type() protoreflect.EnumType {
	return &file_jnx_firewall_service_proto_enumTypes[7]
}

func (x ActionIcmpRejectReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionIcmpRejectReason.Descriptor instead.
func (ActionIcmpRejectReason) EnumDescriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{7}
}

// [brief]: Various Icmp6 Reject Action Reasons.
// [default]: ICMP6_ADMINISTRATIVELY_PROHIBITED
type ActionIcmp6RejectReason int32

const (
	// [brief]: Send Administratively Prohibited message
	ActionIcmp6RejectReason_ICMP6_ADMINISTRATIVELY_PROHIBITED ActionIcmp6RejectReason = 0
	// [brief]: Send No route to destination message
	ActionIcmp6RejectReason_ICMP6_NO_ROUTE_TO_DESTINATION ActionIcmp6RejectReason = 1
	// [brief]: Send Beyond scope message
	ActionIcmp6RejectReason_ICMP6_BEYOND_SCOPE ActionIcmp6RejectReason = 2
	// [brief]: Send Address unreachable message
	ActionIcmp6RejectReason_ICMP6_ADDRESS_UNREACHABLE ActionIcmp6RejectReason = 3
	// [brief]: Send "Port unreachable" message
	ActionIcmp6RejectReason_ICMP6_PORT_UNREACHABLE ActionIcmp6RejectReason = 4
	// [brief]: Send "TTL is Zero during transit" message
	ActionIcmp6RejectReason_ICMP6_TTL_EQUAL_TO_ZERO_DURING_TRANSIT ActionIcmp6RejectReason = 5
	// [brief]: Send "TTL is Zero during reassembly" message
	ActionIcmp6RejectReason_ICMP6_TTL_EQUAL_TO_ZERO_DURING_REASSEMBLY ActionIcmp6RejectReason = 6
	// [brief]: Send "Ip6 header bad" message
	ActionIcmp6RejectReason_ICMP6_IP6_HEADER_BAD ActionIcmp6RejectReason = 7
	// [brief]: Send "Unrecognized option" message
	ActionIcmp6RejectReason_ICMP6_UNRECOGNIZED_OPTION ActionIcmp6RejectReason = 8
	// [brief]: Send "Unrecognized Next Header" message
	ActionIcmp6RejectReason_ICMP6_UNRECOGNIZED_NEXT_HEADER ActionIcmp6RejectReason = 9
	// [brief]: Send "Router renumbering command" message
	ActionIcmp6RejectReason_ICMP6_ROUTER_RENUMBERING_COMMAND ActionIcmp6RejectReason = 10
	// [brief]: Send "Router renumbering result" message
	ActionIcmp6RejectReason_ICMP6_ROUTER_RENUMBERING_RESULT ActionIcmp6RejectReason = 11
	// [brief]: Send "Sequence number reset" message
	ActionIcmp6RejectReason_ICMP6_SEQUENCE_NUMBER_RESET ActionIcmp6RejectReason = 12
)

// Enum value maps for ActionIcmp6RejectReason.
var (
	ActionIcmp6RejectReason_name = map[int32]string{
		0:  "ICMP6_ADMINISTRATIVELY_PROHIBITED",
		1:  "ICMP6_NO_ROUTE_TO_DESTINATION",
		2:  "ICMP6_BEYOND_SCOPE",
		3:  "ICMP6_ADDRESS_UNREACHABLE",
		4:  "ICMP6_PORT_UNREACHABLE",
		5:  "ICMP6_TTL_EQUAL_TO_ZERO_DURING_TRANSIT",
		6:  "ICMP6_TTL_EQUAL_TO_ZERO_DURING_REASSEMBLY",
		7:  "ICMP6_IP6_HEADER_BAD",
		8:  "ICMP6_UNRECOGNIZED_OPTION",
		9:  "ICMP6_UNRECOGNIZED_NEXT_HEADER",
		10: "ICMP6_ROUTER_RENUMBERING_COMMAND",
		11: "ICMP6_ROUTER_RENUMBERING_RESULT",
		12: "ICMP6_SEQUENCE_NUMBER_RESET",
	}
	ActionIcmp6RejectReason_value = map[string]int32{
		"ICMP6_ADMINISTRATIVELY_PROHIBITED":         0,
		"ICMP6_NO_ROUTE_TO_DESTINATION":             1,
		"ICMP6_BEYOND_SCOPE":                        2,
		"ICMP6_ADDRESS_UNREACHABLE":                 3,
		"ICMP6_PORT_UNREACHABLE":                    4,
		"ICMP6_TTL_EQUAL_TO_ZERO_DURING_TRANSIT":    5,
		"ICMP6_TTL_EQUAL_TO_ZERO_DURING_REASSEMBLY": 6,
		"ICMP6_IP6_HEADER_BAD":                      7,
		"ICMP6_UNRECOGNIZED_OPTION":                 8,
		"ICMP6_UNRECOGNIZED_NEXT_HEADER":            9,
		"ICMP6_ROUTER_RENUMBERING_COMMAND":          10,
		"ICMP6_ROUTER_RENUMBERING_RESULT":           11,
		"ICMP6_SEQUENCE_NUMBER_RESET":               12,
	}
)

func (x ActionIcmp6RejectReason) Enum() *ActionIcmp6RejectReason {
	p := new(ActionIcmp6RejectReason)
	*p = x
	return p
}

func (x ActionIcmp6RejectReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionIcmp6RejectReason) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_firewall_service_proto_enumTypes[8].Descriptor()
}

func (ActionIcmp6RejectReason) Type() protoreflect.EnumType {
	return &file_jnx_firewall_service_proto_enumTypes[8]
}

func (x ActionIcmp6RejectReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionIcmp6RejectReason.Descriptor instead.
func (ActionIcmp6RejectReason) EnumDescriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{8}
}

// [brief]: Fragment Flags
// [default]: FRAGMENT_NONE
type FilterFragmentFlags int32

const (
	// [brief]: None
	FilterFragmentFlags_FRAGMENT_NONE FilterFragmentFlags = 0
	// [brief]: Dont fragment flag
	FilterFragmentFlags_DONT_FRAGMENT FilterFragmentFlags = 1
	// [brief]: Is fragment flag
	FilterFragmentFlags_IS_FRAGMENT FilterFragmentFlags = 2
	// [brief]: First fragment flag
	FilterFragmentFlags_FIRST_FRAGMENT FilterFragmentFlags = 3
	// [brief]: More last fragment flag
	FilterFragmentFlags_LAST_FRAGMENT FilterFragmentFlags = 4
)

// Enum value maps for FilterFragmentFlags.
var (
	FilterFragmentFlags_name = map[int32]string{
		0: "FRAGMENT_NONE",
		1: "DONT_FRAGMENT",
		2: "IS_FRAGMENT",
		3: "FIRST_FRAGMENT",
		4: "LAST_FRAGMENT",
	}
	FilterFragmentFlags_value = map[string]int32{
		"FRAGMENT_NONE":  0,
		"DONT_FRAGMENT":  1,
		"IS_FRAGMENT":    2,
		"FIRST_FRAGMENT": 3,
		"LAST_FRAGMENT":  4,
	}
)

func (x FilterFragmentFlags) Enum() *FilterFragmentFlags {
	p := new(FilterFragmentFlags)
	*p = x
	return p
}

func (x FilterFragmentFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterFragmentFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_firewall_service_proto_enumTypes[9].Descriptor()
}

func (FilterFragmentFlags) Type() protoreflect.EnumType {
	return &file_jnx_firewall_service_proto_enumTypes[9]
}

func (x FilterFragmentFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterFragmentFlags.Descriptor instead.
func (FilterFragmentFlags) EnumDescriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{9}
}

// [brief]: Precedence
// [default]: PRECEDENCE_ROUTINE
type FilterPrecedence int32

const (
	// [brief]: Routine precedence
	FilterPrecedence_PRECEDENCE_ROUTINE FilterPrecedence = 0
	// [brief]: Priority precedence
	FilterPrecedence_PRECENCE_PRIORITY FilterPrecedence = 1
	// [brief]: Immediate precedence
	FilterPrecedence_PRECENCE_IMMEDIATE FilterPrecedence = 2
	// [brief]: Flash precedence
	FilterPrecedence_PRECENCE_FLASH FilterPrecedence = 3
	// [brief]: Flash override precedence
	FilterPrecedence_PRECENCE_FLASH_OVERRIDE FilterPrecedence = 4
	// [brief]: Critical ecp precedence
	FilterPrecedence_PRECENCE_CRITICAL_ECP FilterPrecedence = 5
	// [brief]: Internet control precedence
	FilterPrecedence_PRECENCE_INTERNET_CONTROL FilterPrecedence = 6
	// [brief]: Network control precedence
	FilterPrecedence_PRECENCE_NET_CONTROL FilterPrecedence = 7
)

// Enum value maps for FilterPrecedence.
var (
	FilterPrecedence_name = map[int32]string{
		0: "PRECEDENCE_ROUTINE",
		1: "PRECENCE_PRIORITY",
		2: "PRECENCE_IMMEDIATE",
		3: "PRECENCE_FLASH",
		4: "PRECENCE_FLASH_OVERRIDE",
		5: "PRECENCE_CRITICAL_ECP",
		6: "PRECENCE_INTERNET_CONTROL",
		7: "PRECENCE_NET_CONTROL",
	}
	FilterPrecedence_value = map[string]int32{
		"PRECEDENCE_ROUTINE":        0,
		"PRECENCE_PRIORITY":         1,
		"PRECENCE_IMMEDIATE":        2,
		"PRECENCE_FLASH":            3,
		"PRECENCE_FLASH_OVERRIDE":   4,
		"PRECENCE_CRITICAL_ECP":     5,
		"PRECENCE_INTERNET_CONTROL": 6,
		"PRECENCE_NET_CONTROL":      7,
	}
)

func (x FilterPrecedence) Enum() *FilterPrecedence {
	p := new(FilterPrecedence)
	*p = x
	return p
}

func (x FilterPrecedence) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterPrecedence) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_firewall_service_proto_enumTypes[10].Descriptor()
}

func (FilterPrecedence) Type() protoreflect.EnumType {
	return &file_jnx_firewall_service_proto_enumTypes[10]
}

func (x FilterPrecedence) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterPrecedence.Descriptor instead.
func (FilterPrecedence) EnumDescriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{10}
}

// [brief]: Filter Term operation
// [default]: TERM_OPERATION_INVALID
type FilterTermOperation int32

const (
	// [brief]: Invalid Term operation
	FilterTermOperation_TERM_OPERATION_INVALID FilterTermOperation = 0
	// [brief]: Can be used Add Term in Filter
	FilterTermOperation_TERM_OPERATION_ADD FilterTermOperation = 1
	// [brief]: Delete a existing term in given Filter.
	FilterTermOperation_TERM_OPERATION_DELETE FilterTermOperation = 2
	// [brief]: Replace an existing term. Must provide adjacency details to
	// preserve the order of the term. Can be used with Change Filter API
	FilterTermOperation_TERM_OPERATION_REPLACE FilterTermOperation = 3
)

// Enum value maps for FilterTermOperation.
var (
	FilterTermOperation_name = map[int32]string{
		0: "TERM_OPERATION_INVALID",
		1: "TERM_OPERATION_ADD",
		2: "TERM_OPERATION_DELETE",
		3: "TERM_OPERATION_REPLACE",
	}
	FilterTermOperation_value = map[string]int32{
		"TERM_OPERATION_INVALID": 0,
		"TERM_OPERATION_ADD":     1,
		"TERM_OPERATION_DELETE":  2,
		"TERM_OPERATION_REPLACE": 3,
	}
)

func (x FilterTermOperation) Enum() *FilterTermOperation {
	p := new(FilterTermOperation)
	*p = x
	return p
}

func (x FilterTermOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterTermOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_firewall_service_proto_enumTypes[11].Descriptor()
}

func (FilterTermOperation) Type() protoreflect.EnumType {
	return &file_jnx_firewall_service_proto_enumTypes[11]
}

func (x FilterTermOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterTermOperation.Descriptor instead.
func (FilterTermOperation) EnumDescriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{11}
}

// [brief]: Adjacency Type which determines the Term order in an Filter
// [default]: ADJACENCY_AFTER
type FilterAdjacencyType int32

const (
	// [brief]: Add next to the given term
	FilterAdjacencyType_TERM_AFTER FilterAdjacencyType = 0
	// [brief]: Add before the given term
	FilterAdjacencyType_TERM_BEFORE FilterAdjacencyType = 1
)

// Enum value maps for FilterAdjacencyType.
var (
	FilterAdjacencyType_name = map[int32]string{
		0: "TERM_AFTER",
		1: "TERM_BEFORE",
	}
	FilterAdjacencyType_value = map[string]int32{
		"TERM_AFTER":  0,
		"TERM_BEFORE": 1,
	}
)

func (x FilterAdjacencyType) Enum() *FilterAdjacencyType {
	p := new(FilterAdjacencyType)
	*p = x
	return p
}

func (x FilterAdjacencyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterAdjacencyType) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_firewall_service_proto_enumTypes[12].Descriptor()
}

func (FilterAdjacencyType) Type() protoreflect.EnumType {
	return &file_jnx_firewall_service_proto_enumTypes[12]
}

func (x FilterAdjacencyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterAdjacencyType.Descriptor instead.
func (FilterAdjacencyType) EnumDescriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{12}
}

// [brief]: Start offet used in match MatchFlexibleRange
// [default]: FLEX_OFFSET_INVALID
type FilterTermMatchFlexStartOffest int32

const (
	// [brief]: Invalid Flex match start offset
	FilterTermMatchFlexStartOffest_FLEX_OFFSET_INVALID FilterTermMatchFlexStartOffest = 0
	// [brief]: Layer-3 Flex match start offset
	FilterTermMatchFlexStartOffest_FLEX_OFFSET_LAYER_THREE FilterTermMatchFlexStartOffest = 1
	// [brief]: Layer-4 Flex match start offset
	FilterTermMatchFlexStartOffest_FLEX_OFFSET_LAYER_FOUR FilterTermMatchFlexStartOffest = 2
	// [brief]: Payload Flex match start offset
	FilterTermMatchFlexStartOffest_FLEX_OFFSET_PAYLOAD FilterTermMatchFlexStartOffest = 3
)

// Enum value maps for FilterTermMatchFlexStartOffest.
var (
	FilterTermMatchFlexStartOffest_name = map[int32]string{
		0: "FLEX_OFFSET_INVALID",
		1: "FLEX_OFFSET_LAYER_THREE",
		2: "FLEX_OFFSET_LAYER_FOUR",
		3: "FLEX_OFFSET_PAYLOAD",
	}
	FilterTermMatchFlexStartOffest_value = map[string]int32{
		"FLEX_OFFSET_INVALID":     0,
		"FLEX_OFFSET_LAYER_THREE": 1,
		"FLEX_OFFSET_LAYER_FOUR":  2,
		"FLEX_OFFSET_PAYLOAD":     3,
	}
)

func (x FilterTermMatchFlexStartOffest) Enum() *FilterTermMatchFlexStartOffest {
	p := new(FilterTermMatchFlexStartOffest)
	*p = x
	return p
}

func (x FilterTermMatchFlexStartOffest) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterTermMatchFlexStartOffest) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_firewall_service_proto_enumTypes[13].Descriptor()
}

func (FilterTermMatchFlexStartOffest) Type() protoreflect.EnumType {
	return &file_jnx_firewall_service_proto_enumTypes[13]
}

func (x FilterTermMatchFlexStartOffest) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterTermMatchFlexStartOffest.Descriptor instead.
func (FilterTermMatchFlexStartOffest) EnumDescriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{13}
}

// [brief]: Filter types.
// [default]: TYPE_INVALID
type FilterTypes int32

const (
	// [brief]: Invalid Filter type
	FilterTypes_TYPE_INVALID FilterTypes = 0
	// [brief]: Classic Filter type
	FilterTypes_TYPE_CLASSIC FilterTypes = 1
)

// Enum value maps for FilterTypes.
var (
	FilterTypes_name = map[int32]string{
		0: "TYPE_INVALID",
		1: "TYPE_CLASSIC",
	}
	FilterTypes_value = map[string]int32{
		"TYPE_INVALID": 0,
		"TYPE_CLASSIC": 1,
	}
)

func (x FilterTypes) Enum() *FilterTypes {
	p := new(FilterTypes)
	*p = x
	return p
}

func (x FilterTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_firewall_service_proto_enumTypes[14].Descriptor()
}

func (FilterTypes) Type() protoreflect.EnumType {
	return &file_jnx_firewall_service_proto_enumTypes[14]
}

func (x FilterTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterTypes.Descriptor instead.
func (FilterTypes) EnumDescriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{14}
}

// [brief]: Filter Families.
// [default]: FAMILY_INVALID
type FilterFamilies int32

const (
	// [brief]: Invalid
	FilterFamilies_FAMILY_INVALID FilterFamilies = 0
	// [brief]: IPv4 family
	FilterFamilies_FAMILY_INET FilterFamilies = 1
	// [brief]: IPv6 family
	FilterFamilies_FAMILY_INET6 FilterFamilies = 2
	// [brief]: Ethernet Switching family
	FilterFamilies_FAMILY_ES FilterFamilies = 3
	// [brief]: VPLS family
	FilterFamilies_FAMILY_VPLS FilterFamilies = 4
	// [brief]: MULTISERVICE family
	FilterFamilies_FAMILY_MULTISERVICE FilterFamilies = 5
	// [brief]: CCC family
	FilterFamilies_FAMILY_CCC FilterFamilies = 6
	// [brief]: MPLS family
	FilterFamilies_FAMILY_MPLS FilterFamilies = 7
)

// Enum value maps for FilterFamilies.
var (
	FilterFamilies_name = map[int32]string{
		0: "FAMILY_INVALID",
		1: "FAMILY_INET",
		2: "FAMILY_INET6",
		3: "FAMILY_ES",
		4: "FAMILY_VPLS",
		5: "FAMILY_MULTISERVICE",
		6: "FAMILY_CCC",
		7: "FAMILY_MPLS",
	}
	FilterFamilies_value = map[string]int32{
		"FAMILY_INVALID":      0,
		"FAMILY_INET":         1,
		"FAMILY_INET6":        2,
		"FAMILY_ES":           3,
		"FAMILY_VPLS":         4,
		"FAMILY_MULTISERVICE": 5,
		"FAMILY_CCC":          6,
		"FAMILY_MPLS":         7,
	}
)

func (x FilterFamilies) Enum() *FilterFamilies {
	p := new(FilterFamilies)
	*p = x
	return p
}

func (x FilterFamilies) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterFamilies) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_firewall_service_proto_enumTypes[15].Descriptor()
}

func (FilterFamilies) Type() protoreflect.EnumType {
	return &file_jnx_firewall_service_proto_enumTypes[15]
}

func (x FilterFamilies) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterFamilies.Descriptor instead.
func (FilterFamilies) EnumDescriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{15}
}

// [brief]: Any filter property flag to be enabled at the Filter level.
// [default]: FLAGS_NONE
type FilterFlags int32

const (
	// [brief]: None
	FilterFlags_FLAGS_NONE FilterFlags = 0
)

// Enum value maps for FilterFlags.
var (
	FilterFlags_name = map[int32]string{
		0: "FLAGS_NONE",
	}
	FilterFlags_value = map[string]int32{
		"FLAGS_NONE": 0,
	}
)

func (x FilterFlags) Enum() *FilterFlags {
	p := new(FilterFlags)
	*p = x
	return p
}

func (x FilterFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_firewall_service_proto_enumTypes[16].Descriptor()
}

func (FilterFlags) Type() protoreflect.EnumType {
	return &file_jnx_firewall_service_proto_enumTypes[16]
}

func (x FilterFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterFlags.Descriptor instead.
func (FilterFlags) EnumDescriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{16}
}

// [brief]: Filter bind direction on bind object.
// [detail]: Direction, input or output in which an Filter is bound.
// Higher priority to the Filter bound as compared to cli configured filter if
// exists.
// The order of filters execution as shown below
// In Input direction:
// input_interface-> Client Filter -> CLI Filter -> route_lookup
// In Output direction:
// route_lookup -> CLI Filter -> Client Filter -> output_interface.
// [default]: BIND_DIRECTION_INVALID
type FilterBindDirection int32

const (
	// [brief]: Invalid bind direction
	FilterBindDirection_BIND_DIRECTION_INVALID FilterBindDirection = 0
	// [brief]: Bind on ingress before cli filter.
	FilterBindDirection_BIND_DIRECTION_INPUT FilterBindDirection = 1
	// [brief]: Bind on egress after cli filters.
	FilterBindDirection_BIND_DIRECTION_OUTPUT FilterBindDirection = 2
)

// Enum value maps for FilterBindDirection.
var (
	FilterBindDirection_name = map[int32]string{
		0: "BIND_DIRECTION_INVALID",
		1: "BIND_DIRECTION_INPUT",
		2: "BIND_DIRECTION_OUTPUT",
	}
	FilterBindDirection_value = map[string]int32{
		"BIND_DIRECTION_INVALID": 0,
		"BIND_DIRECTION_INPUT":   1,
		"BIND_DIRECTION_OUTPUT":  2,
	}
)

func (x FilterBindDirection) Enum() *FilterBindDirection {
	p := new(FilterBindDirection)
	*p = x
	return p
}

func (x FilterBindDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterBindDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_firewall_service_proto_enumTypes[17].Descriptor()
}

func (FilterBindDirection) Type() protoreflect.EnumType {
	return &file_jnx_firewall_service_proto_enumTypes[17]
}

func (x FilterBindDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterBindDirection.Descriptor instead.
func (FilterBindDirection) EnumDescriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{17}
}

// [brief]: Filter Bind object type
// [default]: BIND_OBJ_TYPE_INVALID
type FilterBindObjType int32

const (
	// [brief]: Invalid
	FilterBindObjType_BIND_OBJ_TYPE_INVALID FilterBindObjType = 0
	// [brief]: Interface
	FilterBindObjType_BIND_OBJ_TYPE_INTERFACE FilterBindObjType = 1
	// [brief]: Forwarding table
	FilterBindObjType_BIND_OBJ_TYPE_FWD_TABLE FilterBindObjType = 2
	// [brief]: Forwarding table
	FilterBindObjType_BIND_OBJ_TYPE_VLAN FilterBindObjType = 3
	// [brief]: Bridge domain
	FilterBindObjType_BIND_OBJ_TYPE_BRG_DOMAIN FilterBindObjType = 4
)

// Enum value maps for FilterBindObjType.
var (
	FilterBindObjType_name = map[int32]string{
		0: "BIND_OBJ_TYPE_INVALID",
		1: "BIND_OBJ_TYPE_INTERFACE",
		2: "BIND_OBJ_TYPE_FWD_TABLE",
		3: "BIND_OBJ_TYPE_VLAN",
		4: "BIND_OBJ_TYPE_BRG_DOMAIN",
	}
	FilterBindObjType_value = map[string]int32{
		"BIND_OBJ_TYPE_INVALID":    0,
		"BIND_OBJ_TYPE_INTERFACE":  1,
		"BIND_OBJ_TYPE_FWD_TABLE":  2,
		"BIND_OBJ_TYPE_VLAN":       3,
		"BIND_OBJ_TYPE_BRG_DOMAIN": 4,
	}
)

func (x FilterBindObjType) Enum() *FilterBindObjType {
	p := new(FilterBindObjType)
	*p = x
	return p
}

func (x FilterBindObjType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterBindObjType) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_firewall_service_proto_enumTypes[18].Descriptor()
}

func (FilterBindObjType) Type() protoreflect.EnumType {
	return &file_jnx_firewall_service_proto_enumTypes[18]
}

func (x FilterBindObjType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterBindObjType.Descriptor instead.
func (FilterBindObjType) EnumDescriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{18}
}

// [brief]: Filter counter set response internal status codes
// [default]: EOK
type FilterCounterSetResponse_StatusCode int32

const (
	// [brief]: Success
	FilterCounterSetResponse_EOK FilterCounterSetResponse_StatusCode = 0
	// [brief]: Wrong input
	FilterCounterSetResponse_EINVALID_MESSAGE FilterCounterSetResponse_StatusCode = 1
	// [brief]: Server Internal error
	FilterCounterSetResponse_EINTERNAL FilterCounterSetResponse_StatusCode = 2
	// [brief]: Operation not supported
	FilterCounterSetResponse_EUNSUPPORTED_OP FilterCounterSetResponse_StatusCode = 3
	// [brief]: Resource not available at server
	FilterCounterSetResponse_NO_RESOURCE FilterCounterSetResponse_StatusCode = 4
)

// Enum value maps for FilterCounterSetResponse_StatusCode.
var (
	FilterCounterSetResponse_StatusCode_name = map[int32]string{
		0: "EOK",
		1: "EINVALID_MESSAGE",
		2: "EINTERNAL",
		3: "EUNSUPPORTED_OP",
		4: "NO_RESOURCE",
	}
	FilterCounterSetResponse_StatusCode_value = map[string]int32{
		"EOK":              0,
		"EINVALID_MESSAGE": 1,
		"EINTERNAL":        2,
		"EUNSUPPORTED_OP":  3,
		"NO_RESOURCE":      4,
	}
)

func (x FilterCounterSetResponse_StatusCode) Enum() *FilterCounterSetResponse_StatusCode {
	p := new(FilterCounterSetResponse_StatusCode)
	*p = x
	return p
}

func (x FilterCounterSetResponse_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterCounterSetResponse_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_firewall_service_proto_enumTypes[19].Descriptor()
}

func (FilterCounterSetResponse_StatusCode) Type() protoreflect.EnumType {
	return &file_jnx_firewall_service_proto_enumTypes[19]
}

func (x FilterCounterSetResponse_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterCounterSetResponse_StatusCode.Descriptor instead.
func (FilterCounterSetResponse_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{97, 0}
}

// [brief]: Policer counter set response internal status codes
// [default]: EOK
type PolicerCounterSetResponse_StatusCode int32

const (
	// [brief]: Success
	PolicerCounterSetResponse_EOK PolicerCounterSetResponse_StatusCode = 0
	// [brief]: Wrong input
	PolicerCounterSetResponse_EINVALID_MESSAGE PolicerCounterSetResponse_StatusCode = 1
	// [brief]: Server Internal error
	PolicerCounterSetResponse_EINTERNAL PolicerCounterSetResponse_StatusCode = 2
	// [brief]: Operation not supported
	PolicerCounterSetResponse_EUNSUPPORTED_OP PolicerCounterSetResponse_StatusCode = 3
	// [brief]: Resource not available at server
	PolicerCounterSetResponse_NO_RESOURCE PolicerCounterSetResponse_StatusCode = 4
)

// Enum value maps for PolicerCounterSetResponse_StatusCode.
var (
	PolicerCounterSetResponse_StatusCode_name = map[int32]string{
		0: "EOK",
		1: "EINVALID_MESSAGE",
		2: "EINTERNAL",
		3: "EUNSUPPORTED_OP",
		4: "NO_RESOURCE",
	}
	PolicerCounterSetResponse_StatusCode_value = map[string]int32{
		"EOK":              0,
		"EINVALID_MESSAGE": 1,
		"EINTERNAL":        2,
		"EUNSUPPORTED_OP":  3,
		"NO_RESOURCE":      4,
	}
)

func (x PolicerCounterSetResponse_StatusCode) Enum() *PolicerCounterSetResponse_StatusCode {
	p := new(PolicerCounterSetResponse_StatusCode)
	*p = x
	return p
}

func (x PolicerCounterSetResponse_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicerCounterSetResponse_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_firewall_service_proto_enumTypes[20].Descriptor()
}

func (PolicerCounterSetResponse_StatusCode) Type() protoreflect.EnumType {
	return &file_jnx_firewall_service_proto_enumTypes[20]
}

func (x PolicerCounterSetResponse_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicerCounterSetResponse_StatusCode.Descriptor instead.
func (PolicerCounterSetResponse_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{99, 0}
}

// [brief]: Filter Add response internal status codes
// [default]: EOK
type FilterAddResponse_StatusCode int32

const (
	// [brief]: Success
	FilterAddResponse_EOK FilterAddResponse_StatusCode = 0
	// [brief]: Wrong input
	FilterAddResponse_EINVALID_MESSAGE FilterAddResponse_StatusCode = 1
	// [brief]: Server Internal error
	FilterAddResponse_EINTERNAL FilterAddResponse_StatusCode = 2
	// [brief]: Operation not supported
	FilterAddResponse_EUNSUPPORTED_OP FilterAddResponse_StatusCode = 3
	// [brief]: Resource not available at server
	FilterAddResponse_NO_RESOURCE FilterAddResponse_StatusCode = 4
)

// Enum value maps for FilterAddResponse_StatusCode.
var (
	FilterAddResponse_StatusCode_name = map[int32]string{
		0: "EOK",
		1: "EINVALID_MESSAGE",
		2: "EINTERNAL",
		3: "EUNSUPPORTED_OP",
		4: "NO_RESOURCE",
	}
	FilterAddResponse_StatusCode_value = map[string]int32{
		"EOK":              0,
		"EINVALID_MESSAGE": 1,
		"EINTERNAL":        2,
		"EUNSUPPORTED_OP":  3,
		"NO_RESOURCE":      4,
	}
)

func (x FilterAddResponse_StatusCode) Enum() *FilterAddResponse_StatusCode {
	p := new(FilterAddResponse_StatusCode)
	*p = x
	return p
}

func (x FilterAddResponse_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterAddResponse_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_firewall_service_proto_enumTypes[21].Descriptor()
}

func (FilterAddResponse_StatusCode) Type() protoreflect.EnumType {
	return &file_jnx_firewall_service_proto_enumTypes[21]
}

func (x FilterAddResponse_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterAddResponse_StatusCode.Descriptor instead.
func (FilterAddResponse_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{100, 0}
}

// [brief]: Filter Delete response internal status codes
// [default]: EOK
type FilterDeleteResponse_StatusCode int32

const (
	// [brief]: Success
	FilterDeleteResponse_EOK FilterDeleteResponse_StatusCode = 0
	// [brief]: Wrong input
	FilterDeleteResponse_EINVALID_MESSAGE FilterDeleteResponse_StatusCode = 1
	// [brief]: Server Internal error
	FilterDeleteResponse_EINTERNAL FilterDeleteResponse_StatusCode = 2
	// [brief]: Operation not supported
	FilterDeleteResponse_EUNSUPPORTED_OP FilterDeleteResponse_StatusCode = 3
	// [brief]: Resource not available at server
	FilterDeleteResponse_NO_RESOURCE FilterDeleteResponse_StatusCode = 4
)

// Enum value maps for FilterDeleteResponse_StatusCode.
var (
	FilterDeleteResponse_StatusCode_name = map[int32]string{
		0: "EOK",
		1: "EINVALID_MESSAGE",
		2: "EINTERNAL",
		3: "EUNSUPPORTED_OP",
		4: "NO_RESOURCE",
	}
	FilterDeleteResponse_StatusCode_value = map[string]int32{
		"EOK":              0,
		"EINVALID_MESSAGE": 1,
		"EINTERNAL":        2,
		"EUNSUPPORTED_OP":  3,
		"NO_RESOURCE":      4,
	}
)

func (x FilterDeleteResponse_StatusCode) Enum() *FilterDeleteResponse_StatusCode {
	p := new(FilterDeleteResponse_StatusCode)
	*p = x
	return p
}

func (x FilterDeleteResponse_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterDeleteResponse_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_firewall_service_proto_enumTypes[22].Descriptor()
}

func (FilterDeleteResponse_StatusCode) Type() protoreflect.EnumType {
	return &file_jnx_firewall_service_proto_enumTypes[22]
}

func (x FilterDeleteResponse_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterDeleteResponse_StatusCode.Descriptor instead.
func (FilterDeleteResponse_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{101, 0}
}

// [brief]: Filter Modify response internal status codes
// [default]: EOK
type FilterModifyResponse_StatusCode int32

const (
	// [brief]: Success
	FilterModifyResponse_EOK FilterModifyResponse_StatusCode = 0
	// [brief]: Wrong input
	FilterModifyResponse_EINVALID_MESSAGE FilterModifyResponse_StatusCode = 1
	// [brief]: Server Internal error
	FilterModifyResponse_EINTERNAL FilterModifyResponse_StatusCode = 2
	// [brief]: Operation not supported
	FilterModifyResponse_EUNSUPPORTED_OP FilterModifyResponse_StatusCode = 3
	// [brief]: Resource not available at server
	FilterModifyResponse_NO_RESOURCE FilterModifyResponse_StatusCode = 4
)

// Enum value maps for FilterModifyResponse_StatusCode.
var (
	FilterModifyResponse_StatusCode_name = map[int32]string{
		0: "EOK",
		1: "EINVALID_MESSAGE",
		2: "EINTERNAL",
		3: "EUNSUPPORTED_OP",
		4: "NO_RESOURCE",
	}
	FilterModifyResponse_StatusCode_value = map[string]int32{
		"EOK":              0,
		"EINVALID_MESSAGE": 1,
		"EINTERNAL":        2,
		"EUNSUPPORTED_OP":  3,
		"NO_RESOURCE":      4,
	}
)

func (x FilterModifyResponse_StatusCode) Enum() *FilterModifyResponse_StatusCode {
	p := new(FilterModifyResponse_StatusCode)
	*p = x
	return p
}

func (x FilterModifyResponse_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterModifyResponse_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_firewall_service_proto_enumTypes[23].Descriptor()
}

func (FilterModifyResponse_StatusCode) Type() protoreflect.EnumType {
	return &file_jnx_firewall_service_proto_enumTypes[23]
}

func (x FilterModifyResponse_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterModifyResponse_StatusCode.Descriptor instead.
func (FilterModifyResponse_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{102, 0}
}

// [brief]: Filter Bind Add response internal status codes
// [default]: EOK
type FilterBindAddResponse_StatusCode int32

const (
	// [brief]: Success
	FilterBindAddResponse_EOK FilterBindAddResponse_StatusCode = 0
	// [brief]: Wrong input
	FilterBindAddResponse_EINVALID_MESSAGE FilterBindAddResponse_StatusCode = 1
	// [brief]: Server Internal error
	FilterBindAddResponse_EINTERNAL FilterBindAddResponse_StatusCode = 2
	// [brief]: Operation not supported
	FilterBindAddResponse_EUNSUPPORTED_OP FilterBindAddResponse_StatusCode = 3
	// [brief]: Resource not available at server
	FilterBindAddResponse_NO_RESOURCE FilterBindAddResponse_StatusCode = 4
)

// Enum value maps for FilterBindAddResponse_StatusCode.
var (
	FilterBindAddResponse_StatusCode_name = map[int32]string{
		0: "EOK",
		1: "EINVALID_MESSAGE",
		2: "EINTERNAL",
		3: "EUNSUPPORTED_OP",
		4: "NO_RESOURCE",
	}
	FilterBindAddResponse_StatusCode_value = map[string]int32{
		"EOK":              0,
		"EINVALID_MESSAGE": 1,
		"EINTERNAL":        2,
		"EUNSUPPORTED_OP":  3,
		"NO_RESOURCE":      4,
	}
)

func (x FilterBindAddResponse_StatusCode) Enum() *FilterBindAddResponse_StatusCode {
	p := new(FilterBindAddResponse_StatusCode)
	*p = x
	return p
}

func (x FilterBindAddResponse_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterBindAddResponse_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_firewall_service_proto_enumTypes[24].Descriptor()
}

func (FilterBindAddResponse_StatusCode) Type() protoreflect.EnumType {
	return &file_jnx_firewall_service_proto_enumTypes[24]
}

func (x FilterBindAddResponse_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterBindAddResponse_StatusCode.Descriptor instead.
func (FilterBindAddResponse_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{103, 0}
}

// [brief]: Filter Bind delete response internal status codes
// [default]: EOK
type FilterBindDeleteResponse_StatusCode int32

const (
	// [brief]: Success
	FilterBindDeleteResponse_EOK FilterBindDeleteResponse_StatusCode = 0
	// [brief]: Wrong input
	FilterBindDeleteResponse_EINVALID_MESSAGE FilterBindDeleteResponse_StatusCode = 1
	// [brief]: Server Internal error
	FilterBindDeleteResponse_EINTERNAL FilterBindDeleteResponse_StatusCode = 2
	// [brief]: Operation not supported
	FilterBindDeleteResponse_EUNSUPPORTED_OP FilterBindDeleteResponse_StatusCode = 3
	// [brief]: Resource not available at server
	FilterBindDeleteResponse_NO_RESOURCE FilterBindDeleteResponse_StatusCode = 4
)

// Enum value maps for FilterBindDeleteResponse_StatusCode.
var (
	FilterBindDeleteResponse_StatusCode_name = map[int32]string{
		0: "EOK",
		1: "EINVALID_MESSAGE",
		2: "EINTERNAL",
		3: "EUNSUPPORTED_OP",
		4: "NO_RESOURCE",
	}
	FilterBindDeleteResponse_StatusCode_value = map[string]int32{
		"EOK":              0,
		"EINVALID_MESSAGE": 1,
		"EINTERNAL":        2,
		"EUNSUPPORTED_OP":  3,
		"NO_RESOURCE":      4,
	}
)

func (x FilterBindDeleteResponse_StatusCode) Enum() *FilterBindDeleteResponse_StatusCode {
	p := new(FilterBindDeleteResponse_StatusCode)
	*p = x
	return p
}

func (x FilterBindDeleteResponse_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterBindDeleteResponse_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_firewall_service_proto_enumTypes[25].Descriptor()
}

func (FilterBindDeleteResponse_StatusCode) Type() protoreflect.EnumType {
	return &file_jnx_firewall_service_proto_enumTypes[25]
}

func (x FilterBindDeleteResponse_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterBindDeleteResponse_StatusCode.Descriptor instead.
func (FilterBindDeleteResponse_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{104, 0}
}

// [brief]: Policer Add response internal status codes
// [default]: EOK
type PolicerAddResponse_StatusCode int32

const (
	// [brief]: Success
	PolicerAddResponse_EOK PolicerAddResponse_StatusCode = 0
	// [brief]: Wrong input
	PolicerAddResponse_EINVALID_MESSAGE PolicerAddResponse_StatusCode = 1
	// [brief]: Server Internal error
	PolicerAddResponse_EINTERNAL PolicerAddResponse_StatusCode = 2
	// [brief]: Operation not supported
	PolicerAddResponse_EUNSUPPORTED_OP PolicerAddResponse_StatusCode = 3
	// [brief]: Resource not available at server
	PolicerAddResponse_NO_RESOURCE PolicerAddResponse_StatusCode = 4
)

// Enum value maps for PolicerAddResponse_StatusCode.
var (
	PolicerAddResponse_StatusCode_name = map[int32]string{
		0: "EOK",
		1: "EINVALID_MESSAGE",
		2: "EINTERNAL",
		3: "EUNSUPPORTED_OP",
		4: "NO_RESOURCE",
	}
	PolicerAddResponse_StatusCode_value = map[string]int32{
		"EOK":              0,
		"EINVALID_MESSAGE": 1,
		"EINTERNAL":        2,
		"EUNSUPPORTED_OP":  3,
		"NO_RESOURCE":      4,
	}
)

func (x PolicerAddResponse_StatusCode) Enum() *PolicerAddResponse_StatusCode {
	p := new(PolicerAddResponse_StatusCode)
	*p = x
	return p
}

func (x PolicerAddResponse_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicerAddResponse_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_firewall_service_proto_enumTypes[26].Descriptor()
}

func (PolicerAddResponse_StatusCode) Type() protoreflect.EnumType {
	return &file_jnx_firewall_service_proto_enumTypes[26]
}

func (x PolicerAddResponse_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicerAddResponse_StatusCode.Descriptor instead.
func (PolicerAddResponse_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{105, 0}
}

// [brief]: Policer Delete response internal status codes
// [default]: EOK
type PolicerDeleteResponse_StatusCode int32

const (
	// [brief]: Success
	PolicerDeleteResponse_EOK PolicerDeleteResponse_StatusCode = 0
	// [brief]: Wrong input
	PolicerDeleteResponse_EINVALID_MESSAGE PolicerDeleteResponse_StatusCode = 1
	// [brief]: Server Internal error
	PolicerDeleteResponse_EINTERNAL PolicerDeleteResponse_StatusCode = 2
	// [brief]: Operation not supported
	PolicerDeleteResponse_EUNSUPPORTED_OP PolicerDeleteResponse_StatusCode = 3
	// [brief]: Resource not available at server
	PolicerDeleteResponse_NO_RESOURCE PolicerDeleteResponse_StatusCode = 4
)

// Enum value maps for PolicerDeleteResponse_StatusCode.
var (
	PolicerDeleteResponse_StatusCode_name = map[int32]string{
		0: "EOK",
		1: "EINVALID_MESSAGE",
		2: "EINTERNAL",
		3: "EUNSUPPORTED_OP",
		4: "NO_RESOURCE",
	}
	PolicerDeleteResponse_StatusCode_value = map[string]int32{
		"EOK":              0,
		"EINVALID_MESSAGE": 1,
		"EINTERNAL":        2,
		"EUNSUPPORTED_OP":  3,
		"NO_RESOURCE":      4,
	}
)

func (x PolicerDeleteResponse_StatusCode) Enum() *PolicerDeleteResponse_StatusCode {
	p := new(PolicerDeleteResponse_StatusCode)
	*p = x
	return p
}

func (x PolicerDeleteResponse_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicerDeleteResponse_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_firewall_service_proto_enumTypes[27].Descriptor()
}

func (PolicerDeleteResponse_StatusCode) Type() protoreflect.EnumType {
	return &file_jnx_firewall_service_proto_enumTypes[27]
}

func (x PolicerDeleteResponse_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicerDeleteResponse_StatusCode.Descriptor instead.
func (PolicerDeleteResponse_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{106, 0}
}

// [brief]: Policer Modify response internal status codes
// [default]: EOK
type PolicerModifyResponse_StatusCode int32

const (
	// [brief]: Success
	PolicerModifyResponse_EOK PolicerModifyResponse_StatusCode = 0
	// [brief]: Wrong input
	PolicerModifyResponse_EINVALID_MESSAGE PolicerModifyResponse_StatusCode = 1
	// [brief]: Server Internal error
	PolicerModifyResponse_EINTERNAL PolicerModifyResponse_StatusCode = 2
	// [brief]: Operation not supported
	PolicerModifyResponse_EUNSUPPORTED_OP PolicerModifyResponse_StatusCode = 3
	// [brief]: Resource not available at server
	PolicerModifyResponse_NO_RESOURCE PolicerModifyResponse_StatusCode = 4
)

// Enum value maps for PolicerModifyResponse_StatusCode.
var (
	PolicerModifyResponse_StatusCode_name = map[int32]string{
		0: "EOK",
		1: "EINVALID_MESSAGE",
		2: "EINTERNAL",
		3: "EUNSUPPORTED_OP",
		4: "NO_RESOURCE",
	}
	PolicerModifyResponse_StatusCode_value = map[string]int32{
		"EOK":              0,
		"EINVALID_MESSAGE": 1,
		"EINTERNAL":        2,
		"EUNSUPPORTED_OP":  3,
		"NO_RESOURCE":      4,
	}
)

func (x PolicerModifyResponse_StatusCode) Enum() *PolicerModifyResponse_StatusCode {
	p := new(PolicerModifyResponse_StatusCode)
	*p = x
	return p
}

func (x PolicerModifyResponse_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicerModifyResponse_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_firewall_service_proto_enumTypes[28].Descriptor()
}

func (PolicerModifyResponse_StatusCode) Type() protoreflect.EnumType {
	return &file_jnx_firewall_service_proto_enumTypes[28]
}

func (x PolicerModifyResponse_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicerModifyResponse_StatusCode.Descriptor instead.
func (PolicerModifyResponse_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{107, 0}
}

// [brief]: Filter counter get response internal status codes
// [default]: EOK
type FilterCounterGetResponse_StatusCode int32

const (
	// [brief]: Success
	FilterCounterGetResponse_EOK FilterCounterGetResponse_StatusCode = 0
	// [brief]: Wrong input
	FilterCounterGetResponse_EINVALID_MESSAGE FilterCounterGetResponse_StatusCode = 1
	// [brief]: Server Internal error
	FilterCounterGetResponse_EINTERNAL FilterCounterGetResponse_StatusCode = 2
	// [brief]: Operation not supported
	FilterCounterGetResponse_EUNSUPPORTED_OP FilterCounterGetResponse_StatusCode = 3
	// [brief]: Resource not available at server
	FilterCounterGetResponse_NO_RESOURCE FilterCounterGetResponse_StatusCode = 4
	// [brief]: Stats timeout
	FilterCounterGetResponse_TIMEOUT FilterCounterGetResponse_StatusCode = 5
)

// Enum value maps for FilterCounterGetResponse_StatusCode.
var (
	FilterCounterGetResponse_StatusCode_name = map[int32]string{
		0: "EOK",
		1: "EINVALID_MESSAGE",
		2: "EINTERNAL",
		3: "EUNSUPPORTED_OP",
		4: "NO_RESOURCE",
		5: "TIMEOUT",
	}
	FilterCounterGetResponse_StatusCode_value = map[string]int32{
		"EOK":              0,
		"EINVALID_MESSAGE": 1,
		"EINTERNAL":        2,
		"EUNSUPPORTED_OP":  3,
		"NO_RESOURCE":      4,
		"TIMEOUT":          5,
	}
)

func (x FilterCounterGetResponse_StatusCode) Enum() *FilterCounterGetResponse_StatusCode {
	p := new(FilterCounterGetResponse_StatusCode)
	*p = x
	return p
}

func (x FilterCounterGetResponse_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterCounterGetResponse_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_firewall_service_proto_enumTypes[29].Descriptor()
}

func (FilterCounterGetResponse_StatusCode) Type() protoreflect.EnumType {
	return &file_jnx_firewall_service_proto_enumTypes[29]
}

func (x FilterCounterGetResponse_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterCounterGetResponse_StatusCode.Descriptor instead.
func (FilterCounterGetResponse_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{108, 0}
}

// [brief]: Filter policer counter get response internal status codes
// [default]: EOK
type PolicerCounterGetResponse_StatusCode int32

const (
	// [brief]: Success
	PolicerCounterGetResponse_EOK PolicerCounterGetResponse_StatusCode = 0
	// [brief]: Wrong input
	PolicerCounterGetResponse_EINVALID_MESSAGE PolicerCounterGetResponse_StatusCode = 1
	// [brief]: Server Internal error
	PolicerCounterGetResponse_EINTERNAL PolicerCounterGetResponse_StatusCode = 2
	// [brief]: Operation not supported
	PolicerCounterGetResponse_EUNSUPPORTED_OP PolicerCounterGetResponse_StatusCode = 3
	// [brief]: Resource not available at server
	PolicerCounterGetResponse_NO_RESOURCE PolicerCounterGetResponse_StatusCode = 4
	// [brief]: Stats timeout
	PolicerCounterGetResponse_TIMEOUT PolicerCounterGetResponse_StatusCode = 5
)

// Enum value maps for PolicerCounterGetResponse_StatusCode.
var (
	PolicerCounterGetResponse_StatusCode_name = map[int32]string{
		0: "EOK",
		1: "EINVALID_MESSAGE",
		2: "EINTERNAL",
		3: "EUNSUPPORTED_OP",
		4: "NO_RESOURCE",
		5: "TIMEOUT",
	}
	PolicerCounterGetResponse_StatusCode_value = map[string]int32{
		"EOK":              0,
		"EINVALID_MESSAGE": 1,
		"EINTERNAL":        2,
		"EUNSUPPORTED_OP":  3,
		"NO_RESOURCE":      4,
		"TIMEOUT":          5,
	}
)

func (x PolicerCounterGetResponse_StatusCode) Enum() *PolicerCounterGetResponse_StatusCode {
	p := new(PolicerCounterGetResponse_StatusCode)
	*p = x
	return p
}

func (x PolicerCounterGetResponse_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicerCounterGetResponse_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_firewall_service_proto_enumTypes[30].Descriptor()
}

func (PolicerCounterGetResponse_StatusCode) Type() protoreflect.EnumType {
	return &file_jnx_firewall_service_proto_enumTypes[30]
}

func (x PolicerCounterGetResponse_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicerCounterGetResponse_StatusCode.Descriptor instead.
func (PolicerCounterGetResponse_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{109, 0}
}

// [brief]: Policer parameter for two color policer
// [detail]: Policer parameter for two color policer
type PolicerTwoColor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Bandwidth rate in bits per second
	// [range]: [1000:12500000000]
	Bandwidth uint64 `protobuf:"varint,2,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	// [brief]: Burst size, in bits per second
	// [range]: [1500:100000000000]
	BurstSize uint64 `protobuf:"varint,4,opt,name=burst_size,json=burstSize,proto3" json:"burst_size,omitempty"`
	// [brief]: Loss priority
	LossPriority FilterLossPriority `protobuf:"varint,5,opt,name=loss_priority,json=lossPriority,proto3,enum=jnx.jet.firewall.FilterLossPriority" json:"loss_priority,omitempty"`
	// [brief]: Forwarding class, user configured forwarding class name
	ForwardingClassName string `protobuf:"bytes,6,opt,name=forwarding_class_name,json=forwardingClassName,proto3" json:"forwarding_class_name,omitempty"`
	// [brief]: Discard action
	Discard bool `protobuf:"varint,7,opt,name=discard,proto3" json:"discard,omitempty"`
}

func (x *PolicerTwoColor) Reset() {
	*x = PolicerTwoColor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicerTwoColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicerTwoColor) ProtoMessage() {}

func (x *PolicerTwoColor) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicerTwoColor.ProtoReflect.Descriptor instead.
func (*PolicerTwoColor) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{0}
}

func (x *PolicerTwoColor) GetBandwidth() uint64 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

func (x *PolicerTwoColor) GetBurstSize() uint64 {
	if x != nil {
		return x.BurstSize
	}
	return 0
}

func (x *PolicerTwoColor) GetLossPriority() FilterLossPriority {
	if x != nil {
		return x.LossPriority
	}
	return FilterLossPriority_LOSS_PRIORITY_INVALID
}

func (x *PolicerTwoColor) GetForwardingClassName() string {
	if x != nil {
		return x.ForwardingClassName
	}
	return ""
}

func (x *PolicerTwoColor) GetDiscard() bool {
	if x != nil {
		return x.Discard
	}
	return false
}

// [brief]: Policer parameter for single rate three color policer
// [detail]: Policer parameter for single rate three color policer
type PolicerSingleRateThreeColor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Bandwidth rate in bits per second
	// [range]: [1000:12500000000]
	CommittedRate uint64 `protobuf:"varint,2,opt,name=committed_rate,json=committedRate,proto3" json:"committed_rate,omitempty"`
	// [brief]: Burst size in bits per second
	// [range]: [1500:100000000000]
	CommittedBurstSize uint64 `protobuf:"varint,4,opt,name=committed_burst_size,json=committedBurstSize,proto3" json:"committed_burst_size,omitempty"`
	// [brief]: Burst size in bits per second
	// [range]: [1500:100000000000]
	ExcessBurstSize uint64 `protobuf:"varint,5,opt,name=excess_burst_size,json=excessBurstSize,proto3" json:"excess_burst_size,omitempty"`
	// [brief]: Discard action
	Discard bool `protobuf:"varint,7,opt,name=discard,proto3" json:"discard,omitempty"`
	// [brief]: Color mode
	ColorMode PolicerColorModeType `protobuf:"varint,8,opt,name=color_mode,json=colorMode,proto3,enum=jnx.jet.firewall.PolicerColorModeType" json:"color_mode,omitempty"`
}

func (x *PolicerSingleRateThreeColor) Reset() {
	*x = PolicerSingleRateThreeColor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicerSingleRateThreeColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicerSingleRateThreeColor) ProtoMessage() {}

func (x *PolicerSingleRateThreeColor) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicerSingleRateThreeColor.ProtoReflect.Descriptor instead.
func (*PolicerSingleRateThreeColor) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{1}
}

func (x *PolicerSingleRateThreeColor) GetCommittedRate() uint64 {
	if x != nil {
		return x.CommittedRate
	}
	return 0
}

func (x *PolicerSingleRateThreeColor) GetCommittedBurstSize() uint64 {
	if x != nil {
		return x.CommittedBurstSize
	}
	return 0
}

func (x *PolicerSingleRateThreeColor) GetExcessBurstSize() uint64 {
	if x != nil {
		return x.ExcessBurstSize
	}
	return 0
}

func (x *PolicerSingleRateThreeColor) GetDiscard() bool {
	if x != nil {
		return x.Discard
	}
	return false
}

func (x *PolicerSingleRateThreeColor) GetColorMode() PolicerColorModeType {
	if x != nil {
		return x.ColorMode
	}
	return PolicerColorModeType_COLOR_MODE_INVALID
}

// [brief]: Policer parameter for two rate three color policer
// [detail]: Policer parameter for two rate three color policer
type PolicerTwoRateThreeColor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Bandwidth rate in bits per second
	// [range]: [1000:12500000000]
	CommittedRate uint64 `protobuf:"varint,2,opt,name=committed_rate,json=committedRate,proto3" json:"committed_rate,omitempty"`
	// [brief]: Burst size in bits per second
	// [range]: [1500:100000000000]
	CommittedBurstSize uint64 `protobuf:"varint,4,opt,name=committed_burst_size,json=committedBurstSize,proto3" json:"committed_burst_size,omitempty"`
	// [brief]: Bandwidth rate in bits per second
	// [range]: [1000:12500000000]
	ExcessRate uint64 `protobuf:"varint,6,opt,name=excess_rate,json=excessRate,proto3" json:"excess_rate,omitempty"`
	// [brief]: Burst size in bits per second
	// [range]: [1500:100000000000]
	ExcessBurstSize uint64 `protobuf:"varint,8,opt,name=excess_burst_size,json=excessBurstSize,proto3" json:"excess_burst_size,omitempty"`
	// [brief]: Discard action
	Discard bool `protobuf:"varint,9,opt,name=discard,proto3" json:"discard,omitempty"`
	// [brief]: Color mode
	ColorMode PolicerColorModeType `protobuf:"varint,10,opt,name=color_mode,json=colorMode,proto3,enum=jnx.jet.firewall.PolicerColorModeType" json:"color_mode,omitempty"`
}

func (x *PolicerTwoRateThreeColor) Reset() {
	*x = PolicerTwoRateThreeColor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicerTwoRateThreeColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicerTwoRateThreeColor) ProtoMessage() {}

func (x *PolicerTwoRateThreeColor) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicerTwoRateThreeColor.ProtoReflect.Descriptor instead.
func (*PolicerTwoRateThreeColor) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{2}
}

func (x *PolicerTwoRateThreeColor) GetCommittedRate() uint64 {
	if x != nil {
		return x.CommittedRate
	}
	return 0
}

func (x *PolicerTwoRateThreeColor) GetCommittedBurstSize() uint64 {
	if x != nil {
		return x.CommittedBurstSize
	}
	return 0
}

func (x *PolicerTwoRateThreeColor) GetExcessRate() uint64 {
	if x != nil {
		return x.ExcessRate
	}
	return 0
}

func (x *PolicerTwoRateThreeColor) GetExcessBurstSize() uint64 {
	if x != nil {
		return x.ExcessBurstSize
	}
	return 0
}

func (x *PolicerTwoRateThreeColor) GetDiscard() bool {
	if x != nil {
		return x.Discard
	}
	return false
}

func (x *PolicerTwoRateThreeColor) GetColorMode() PolicerColorModeType {
	if x != nil {
		return x.ColorMode
	}
	return PolicerColorModeType_COLOR_MODE_INVALID
}

// [brief]: Heirarchical Policer parameters
// [detail]: Heirarchical Policer parameters
type PolicerHierarchical struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Bandwidth rate in bits per second
	// [range]: [1000:125000000000]
	AggregateRate uint64 `protobuf:"varint,2,opt,name=aggregate_rate,json=aggregateRate,proto3" json:"aggregate_rate,omitempty"`
	// [brief]: Burst size in bits per second
	// [range]: [1500:100000000000]
	AggregateBurstSize uint64 `protobuf:"varint,4,opt,name=aggregate_burst_size,json=aggregateBurstSize,proto3" json:"aggregate_burst_size,omitempty"`
	// [brief]: Bandwidth rate in bits per second
	// [range]: [1000:125000000000]
	PremiumRate uint64 `protobuf:"varint,6,opt,name=premium_rate,json=premiumRate,proto3" json:"premium_rate,omitempty"`
	// [brief]: Burst size in bits per second
	// [range]: [1500:100000000000]
	PremiumBurstSize uint64 `protobuf:"varint,8,opt,name=premium_burst_size,json=premiumBurstSize,proto3" json:"premium_burst_size,omitempty"`
	// [brief]: Discard action
	Discard bool `protobuf:"varint,9,opt,name=discard,proto3" json:"discard,omitempty"`
}

func (x *PolicerHierarchical) Reset() {
	*x = PolicerHierarchical{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicerHierarchical) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicerHierarchical) ProtoMessage() {}

func (x *PolicerHierarchical) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicerHierarchical.ProtoReflect.Descriptor instead.
func (*PolicerHierarchical) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{3}
}

func (x *PolicerHierarchical) GetAggregateRate() uint64 {
	if x != nil {
		return x.AggregateRate
	}
	return 0
}

func (x *PolicerHierarchical) GetAggregateBurstSize() uint64 {
	if x != nil {
		return x.AggregateBurstSize
	}
	return 0
}

func (x *PolicerHierarchical) GetPremiumRate() uint64 {
	if x != nil {
		return x.PremiumRate
	}
	return 0
}

func (x *PolicerHierarchical) GetPremiumBurstSize() uint64 {
	if x != nil {
		return x.PremiumBurstSize
	}
	return 0
}

func (x *PolicerHierarchical) GetDiscard() bool {
	if x != nil {
		return x.Discard
	}
	return false
}

// [brief]: Policer Parameter
// [detail]: Policer Parameter
type PolicerParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: policer parameters of one of the policer type
	//
	// Types that are assignable to Parameter:
	//	*PolicerParameter_TwoColorParameter
	//	*PolicerParameter_SingleRateTricolorParameter
	//	*PolicerParameter_TwoRateTricolorParameter
	//	*PolicerParameter_HierarchicalParameter
	Parameter isPolicerParameter_Parameter `protobuf_oneof:"parameter"`
}

func (x *PolicerParameter) Reset() {
	*x = PolicerParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicerParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicerParameter) ProtoMessage() {}

func (x *PolicerParameter) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicerParameter.ProtoReflect.Descriptor instead.
func (*PolicerParameter) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{4}
}

func (m *PolicerParameter) GetParameter() isPolicerParameter_Parameter {
	if m != nil {
		return m.Parameter
	}
	return nil
}

func (x *PolicerParameter) GetTwoColorParameter() *PolicerTwoColor {
	if x, ok := x.GetParameter().(*PolicerParameter_TwoColorParameter); ok {
		return x.TwoColorParameter
	}
	return nil
}

func (x *PolicerParameter) GetSingleRateTricolorParameter() *PolicerSingleRateThreeColor {
	if x, ok := x.GetParameter().(*PolicerParameter_SingleRateTricolorParameter); ok {
		return x.SingleRateTricolorParameter
	}
	return nil
}

func (x *PolicerParameter) GetTwoRateTricolorParameter() *PolicerTwoRateThreeColor {
	if x, ok := x.GetParameter().(*PolicerParameter_TwoRateTricolorParameter); ok {
		return x.TwoRateTricolorParameter
	}
	return nil
}

func (x *PolicerParameter) GetHierarchicalParameter() *PolicerHierarchical {
	if x, ok := x.GetParameter().(*PolicerParameter_HierarchicalParameter); ok {
		return x.HierarchicalParameter
	}
	return nil
}

type isPolicerParameter_Parameter interface {
	isPolicerParameter_Parameter()
}

type PolicerParameter_TwoColorParameter struct {
	// [brief]: Two color
	TwoColorParameter *PolicerTwoColor `protobuf:"bytes,1,opt,name=two_color_parameter,json=twoColorParameter,proto3,oneof"`
}

type PolicerParameter_SingleRateTricolorParameter struct {
	// [brief]: Three color
	SingleRateTricolorParameter *PolicerSingleRateThreeColor `protobuf:"bytes,2,opt,name=single_rate_tricolor_parameter,json=singleRateTricolorParameter,proto3,oneof"`
}

type PolicerParameter_TwoRateTricolorParameter struct {
	// [brief]: Three color
	TwoRateTricolorParameter *PolicerTwoRateThreeColor `protobuf:"bytes,3,opt,name=two_rate_tricolor_parameter,json=twoRateTricolorParameter,proto3,oneof"`
}

type PolicerParameter_HierarchicalParameter struct {
	// [brief]: Hierarchcical
	HierarchicalParameter *PolicerHierarchical `protobuf:"bytes,4,opt,name=hierarchical_parameter,json=hierarchicalParameter,proto3,oneof"`
}

func (*PolicerParameter_TwoColorParameter) isPolicerParameter_Parameter() {}

func (*PolicerParameter_SingleRateTricolorParameter) isPolicerParameter_Parameter() {}

func (*PolicerParameter_TwoRateTricolorParameter) isPolicerParameter_Parameter() {}

func (*PolicerParameter_HierarchicalParameter) isPolicerParameter_Parameter() {}

// [brief]: Policer structure which is refered as action in Term
// [detail]: Policer structure which is refered as action in Term
type Policer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Policer name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// [brief]: Policer type
	Type PolicerType `protobuf:"varint,2,opt,name=type,proto3,enum=jnx.jet.firewall.PolicerType" json:"type,omitempty"`
	// [brief]: Policer Flag
	Flag PolicerFlag `protobuf:"varint,3,opt,name=flag,proto3,enum=jnx.jet.firewall.PolicerFlag" json:"flag,omitempty"`
	// [brief]: Policer Paremeter
	Params *PolicerParameter `protobuf:"bytes,4,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *Policer) Reset() {
	*x = Policer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policer) ProtoMessage() {}

func (x *Policer) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policer.ProtoReflect.Descriptor instead.
func (*Policer) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{5}
}

func (x *Policer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Policer) GetType() PolicerType {
	if x != nil {
		return x.Type
	}
	return PolicerType_POLICER_INVALID
}

func (x *Policer) GetFlag() PolicerFlag {
	if x != nil {
		return x.Flag
	}
	return PolicerFlag_POLICER_FLAG_INVALID
}

func (x *Policer) GetParams() *PolicerParameter {
	if x != nil {
		return x.Params
	}
	return nil
}

// [brief]: Input message used in PolicerAdd RPC
// [detail]: Input message used in PolicerAdd RPC
type PolicerAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Policer name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// [brief]: Policer type
	Type PolicerType `protobuf:"varint,2,opt,name=type,proto3,enum=jnx.jet.firewall.PolicerType" json:"type,omitempty"`
	// [brief]: Policer Flag
	Flag PolicerFlag `protobuf:"varint,3,opt,name=flag,proto3,enum=jnx.jet.firewall.PolicerFlag" json:"flag,omitempty"`
	// [brief]: Policer Paremeter
	Params *PolicerParameter `protobuf:"bytes,4,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *PolicerAddRequest) Reset() {
	*x = PolicerAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicerAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicerAddRequest) ProtoMessage() {}

func (x *PolicerAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicerAddRequest.ProtoReflect.Descriptor instead.
func (*PolicerAddRequest) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{6}
}

func (x *PolicerAddRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PolicerAddRequest) GetType() PolicerType {
	if x != nil {
		return x.Type
	}
	return PolicerType_POLICER_INVALID
}

func (x *PolicerAddRequest) GetFlag() PolicerFlag {
	if x != nil {
		return x.Flag
	}
	return PolicerFlag_POLICER_FLAG_INVALID
}

func (x *PolicerAddRequest) GetParams() *PolicerParameter {
	if x != nil {
		return x.Params
	}
	return nil
}

// [brief]: Input message used in PolicerModify RPC
// [detail]: Input message used in PolicerModify RPC to update or change any
// policer parameters to the existing policer by policer name.
type PolicerModifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Policer name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// [brief]: Policer type
	Type PolicerType `protobuf:"varint,2,opt,name=type,proto3,enum=jnx.jet.firewall.PolicerType" json:"type,omitempty"`
	// [brief]: Policer Flag
	Flag PolicerFlag `protobuf:"varint,3,opt,name=flag,proto3,enum=jnx.jet.firewall.PolicerFlag" json:"flag,omitempty"`
	// [brief]: Policer Paremeter
	Params *PolicerParameter `protobuf:"bytes,4,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *PolicerModifyRequest) Reset() {
	*x = PolicerModifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicerModifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicerModifyRequest) ProtoMessage() {}

func (x *PolicerModifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicerModifyRequest.ProtoReflect.Descriptor instead.
func (*PolicerModifyRequest) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{7}
}

func (x *PolicerModifyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PolicerModifyRequest) GetType() PolicerType {
	if x != nil {
		return x.Type
	}
	return PolicerType_POLICER_INVALID
}

func (x *PolicerModifyRequest) GetFlag() PolicerFlag {
	if x != nil {
		return x.Flag
	}
	return PolicerFlag_POLICER_FLAG_INVALID
}

func (x *PolicerModifyRequest) GetParams() *PolicerParameter {
	if x != nil {
		return x.Params
	}
	return nil
}

// [brief]: Input message used in PolicerDelete to delete existing policer
// [detail]: Input message used in PolicerDelete to delete existing policer
// matching with only policer name
type PolicerDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Policer name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// [brief]: Policer type
	Type PolicerType `protobuf:"varint,2,opt,name=type,proto3,enum=jnx.jet.firewall.PolicerType" json:"type,omitempty"`
	// [brief]: Policer Flag
	Flag PolicerFlag `protobuf:"varint,3,opt,name=flag,proto3,enum=jnx.jet.firewall.PolicerFlag" json:"flag,omitempty"`
}

func (x *PolicerDeleteRequest) Reset() {
	*x = PolicerDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicerDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicerDeleteRequest) ProtoMessage() {}

func (x *PolicerDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicerDeleteRequest.ProtoReflect.Descriptor instead.
func (*PolicerDeleteRequest) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{8}
}

func (x *PolicerDeleteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PolicerDeleteRequest) GetType() PolicerType {
	if x != nil {
		return x.Type
	}
	return PolicerType_POLICER_INVALID
}

func (x *PolicerDeleteRequest) GetFlag() PolicerFlag {
	if x != nil {
		return x.Flag
	}
	return PolicerFlag_POLICER_FLAG_INVALID
}

// [brief]: Filter match IP address
// [detail]: Filter match IP address
type MatchIpAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: address
	Addr *IpAddress `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	// [brief]: Prefix length range for IPv4 (0:32) or IPv6 (0:128) addresses
	// [range]: [0:128]
	PrefixLength uint32 `protobuf:"varint,2,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
	// [brief]: Match op
	Operation MatchOperation `protobuf:"varint,3,opt,name=operation,proto3,enum=jnx.jet.firewall.MatchOperation" json:"operation,omitempty"`
}

func (x *MatchIpAddress) Reset() {
	*x = MatchIpAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchIpAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchIpAddress) ProtoMessage() {}

func (x *MatchIpAddress) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchIpAddress.ProtoReflect.Descriptor instead.
func (*MatchIpAddress) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{9}
}

func (x *MatchIpAddress) GetAddr() *IpAddress {
	if x != nil {
		return x.Addr
	}
	return nil
}

func (x *MatchIpAddress) GetPrefixLength() uint32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

func (x *MatchIpAddress) GetOperation() MatchOperation {
	if x != nil {
		return x.Operation
	}
	return MatchOperation_OP_INVALID
}

// [brief]: Filter match Port
// [detail]: Filter match Port, If min == max then match on exact value
// always min should be less than or equal max.
type MatchPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Minimum port value
	// [range]: [0:65535]
	Min uint32 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	// [brief]: Maximum port value
	// [range]: [0:65535]
	Max uint32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	// [brief]: Match op
	Operation MatchOperation `protobuf:"varint,3,opt,name=operation,proto3,enum=jnx.jet.firewall.MatchOperation" json:"operation,omitempty"`
}

func (x *MatchPort) Reset() {
	*x = MatchPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchPort) ProtoMessage() {}

func (x *MatchPort) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchPort.ProtoReflect.Descriptor instead.
func (*MatchPort) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{10}
}

func (x *MatchPort) GetMin() uint32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *MatchPort) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *MatchPort) GetOperation() MatchOperation {
	if x != nil {
		return x.Operation
	}
	return MatchOperation_OP_INVALID
}

// [brief]: Filter match Ip Precedence
// [detail]: Filter match Ip Precedence, If min == max then match on exact value
// always min should be less than or equal max.
type MatchIpPrecedence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Minimum precedence value
	// [range]: [0:7]
	Min FilterPrecedence `protobuf:"varint,1,opt,name=min,proto3,enum=jnx.jet.firewall.FilterPrecedence" json:"min,omitempty"`
	// [brief]: Maximum precedence value
	// [range]: [0:7]
	Max FilterPrecedence `protobuf:"varint,2,opt,name=max,proto3,enum=jnx.jet.firewall.FilterPrecedence" json:"max,omitempty"`
	// [brief]: Match op
	Operation MatchOperation `protobuf:"varint,3,opt,name=operation,proto3,enum=jnx.jet.firewall.MatchOperation" json:"operation,omitempty"`
}

func (x *MatchIpPrecedence) Reset() {
	*x = MatchIpPrecedence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchIpPrecedence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchIpPrecedence) ProtoMessage() {}

func (x *MatchIpPrecedence) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchIpPrecedence.ProtoReflect.Descriptor instead.
func (*MatchIpPrecedence) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{11}
}

func (x *MatchIpPrecedence) GetMin() FilterPrecedence {
	if x != nil {
		return x.Min
	}
	return FilterPrecedence_PRECEDENCE_ROUTINE
}

func (x *MatchIpPrecedence) GetMax() FilterPrecedence {
	if x != nil {
		return x.Max
	}
	return FilterPrecedence_PRECEDENCE_ROUTINE
}

func (x *MatchIpPrecedence) GetOperation() MatchOperation {
	if x != nil {
		return x.Operation
	}
	return MatchOperation_OP_INVALID
}

// [brief]: Filter match Traffic Class
// [detail]: Filter match Traffic Class, If min == max then match on exact value
// always min should be less than or equal max.
type MatchTrafficClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Minimum Traffic Class value
	// [range]: [0:63]
	Min uint32 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	// [brief]: Maximum Traffic Class value
	// [range]: [0:63]
	Max uint32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	// [brief]: Match op
	Operation MatchOperation `protobuf:"varint,3,opt,name=operation,proto3,enum=jnx.jet.firewall.MatchOperation" json:"operation,omitempty"`
}

func (x *MatchTrafficClass) Reset() {
	*x = MatchTrafficClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchTrafficClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchTrafficClass) ProtoMessage() {}

func (x *MatchTrafficClass) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchTrafficClass.ProtoReflect.Descriptor instead.
func (*MatchTrafficClass) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{12}
}

func (x *MatchTrafficClass) GetMin() uint32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *MatchTrafficClass) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *MatchTrafficClass) GetOperation() MatchOperation {
	if x != nil {
		return x.Operation
	}
	return MatchOperation_OP_INVALID
}

// [brief]: Filter match Dscp Code
// [detail]: Filter match Dscp Code, If min == max then match on exact value
// always min should be less than or equal max.
type MatchDscpCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Minimum Dscp code
	// [range]: [0:63]
	Min uint32 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	// [brief]: Maximum Dscp code
	// [range]: [0:63]
	Max uint32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	// [brief]: Match op
	Operation MatchOperation `protobuf:"varint,3,opt,name=operation,proto3,enum=jnx.jet.firewall.MatchOperation" json:"operation,omitempty"`
}

func (x *MatchDscpCode) Reset() {
	*x = MatchDscpCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchDscpCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchDscpCode) ProtoMessage() {}

func (x *MatchDscpCode) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchDscpCode.ProtoReflect.Descriptor instead.
func (*MatchDscpCode) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{13}
}

func (x *MatchDscpCode) GetMin() uint32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *MatchDscpCode) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *MatchDscpCode) GetOperation() MatchOperation {
	if x != nil {
		return x.Operation
	}
	return MatchOperation_OP_INVALID
}

// [brief]: Filter match protocol
// [detail]: Filter match protocol, If min == max then match on exact value
// always min should be less than or equal max.
type MatchProtocol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Minimum Protocol value
	// [range]: [0:255]
	Min uint32 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	// [brief]: Maximum Protocol value
	// [range]: [0:255]
	Max uint32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	// [brief]: Match op
	Operation MatchOperation `protobuf:"varint,3,opt,name=operation,proto3,enum=jnx.jet.firewall.MatchOperation" json:"operation,omitempty"`
}

func (x *MatchProtocol) Reset() {
	*x = MatchProtocol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchProtocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchProtocol) ProtoMessage() {}

func (x *MatchProtocol) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchProtocol.ProtoReflect.Descriptor instead.
func (*MatchProtocol) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{14}
}

func (x *MatchProtocol) GetMin() uint32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *MatchProtocol) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *MatchProtocol) GetOperation() MatchOperation {
	if x != nil {
		return x.Operation
	}
	return MatchOperation_OP_INVALID
}

// [brief]: Filter match Icmp Type
// [detail]: Filter match Icmp Type, If min == max then match on exact value
// always min should be less than or equal max.
type MatchIcmpType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Minimum Icmp type
	// [range]: [0:255]
	Min uint32 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	// [brief]: Maximum Icmp type
	// [range]: [0:255]
	Max uint32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	// [brief]: Match op
	Operation MatchOperation `protobuf:"varint,3,opt,name=operation,proto3,enum=jnx.jet.firewall.MatchOperation" json:"operation,omitempty"`
}

func (x *MatchIcmpType) Reset() {
	*x = MatchIcmpType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchIcmpType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchIcmpType) ProtoMessage() {}

func (x *MatchIcmpType) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchIcmpType.ProtoReflect.Descriptor instead.
func (*MatchIcmpType) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{15}
}

func (x *MatchIcmpType) GetMin() uint32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *MatchIcmpType) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *MatchIcmpType) GetOperation() MatchOperation {
	if x != nil {
		return x.Operation
	}
	return MatchOperation_OP_INVALID
}

// [brief]: Filter match Icmp Code
// [detail]: Filter match Icmp Code, If min == max then match on exact value
// always min should be less than or equal max.
type MatchIcmpCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Minimum Icmp code
	// [range]: [0:255]
	Min uint32 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	// [brief]: Maximum Icmp code
	// [range]: [0:255]
	Max uint32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	// [brief]: Match op
	Operation MatchOperation `protobuf:"varint,3,opt,name=operation,proto3,enum=jnx.jet.firewall.MatchOperation" json:"operation,omitempty"`
}

func (x *MatchIcmpCode) Reset() {
	*x = MatchIcmpCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchIcmpCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchIcmpCode) ProtoMessage() {}

func (x *MatchIcmpCode) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchIcmpCode.ProtoReflect.Descriptor instead.
func (*MatchIcmpCode) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{16}
}

func (x *MatchIcmpCode) GetMin() uint32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *MatchIcmpCode) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *MatchIcmpCode) GetOperation() MatchOperation {
	if x != nil {
		return x.Operation
	}
	return MatchOperation_OP_INVALID
}

// [brief]: Filter match Packet Length
// [detail]: Filter match Packet Length, If min == max then match on exact value
// always min should be less than or equal max.
type MatchPacketLength struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Minimum Packet length
	// [range]: [0:65535]
	Min uint32 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	// [brief]: Maximum Packet length
	// [range]: [0:65535]
	Max uint32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	// [brief]: Match op
	Operation MatchOperation `protobuf:"varint,3,opt,name=operation,proto3,enum=jnx.jet.firewall.MatchOperation" json:"operation,omitempty"`
}

func (x *MatchPacketLength) Reset() {
	*x = MatchPacketLength{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchPacketLength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchPacketLength) ProtoMessage() {}

func (x *MatchPacketLength) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchPacketLength.ProtoReflect.Descriptor instead.
func (*MatchPacketLength) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{17}
}

func (x *MatchPacketLength) GetMin() uint32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *MatchPacketLength) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *MatchPacketLength) GetOperation() MatchOperation {
	if x != nil {
		return x.Operation
	}
	return MatchOperation_OP_INVALID
}

// [brief]: Filter match Loss Priority
// [detail]: Filter match Loss Priority
type MatchLossPriority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Loss Priority match
	Priority FilterLossPriority `protobuf:"varint,1,opt,name=priority,proto3,enum=jnx.jet.firewall.FilterLossPriority" json:"priority,omitempty"`
	// [brief]: Match op
	Operation MatchOperation `protobuf:"varint,2,opt,name=operation,proto3,enum=jnx.jet.firewall.MatchOperation" json:"operation,omitempty"`
}

func (x *MatchLossPriority) Reset() {
	*x = MatchLossPriority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchLossPriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchLossPriority) ProtoMessage() {}

func (x *MatchLossPriority) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchLossPriority.ProtoReflect.Descriptor instead.
func (*MatchLossPriority) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{18}
}

func (x *MatchLossPriority) GetPriority() FilterLossPriority {
	if x != nil {
		return x.Priority
	}
	return FilterLossPriority_LOSS_PRIORITY_INVALID
}

func (x *MatchLossPriority) GetOperation() MatchOperation {
	if x != nil {
		return x.Operation
	}
	return MatchOperation_OP_INVALID
}

// [brief]: Filter match Forwarding Class
// [detail]: Filter match Forwarding Class
type MatchForwardingClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Loss Priority match
	ForwardingClass FilterForwardingClass `protobuf:"varint,1,opt,name=forwarding_class,json=forwardingClass,proto3,enum=jnx.jet.firewall.FilterForwardingClass" json:"forwarding_class,omitempty"`
	// [brief]: Match op
	Operation MatchOperation `protobuf:"varint,2,opt,name=operation,proto3,enum=jnx.jet.firewall.MatchOperation" json:"operation,omitempty"`
}

func (x *MatchForwardingClass) Reset() {
	*x = MatchForwardingClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchForwardingClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchForwardingClass) ProtoMessage() {}

func (x *MatchForwardingClass) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchForwardingClass.ProtoReflect.Descriptor instead.
func (*MatchForwardingClass) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{19}
}

func (x *MatchForwardingClass) GetForwardingClass() FilterForwardingClass {
	if x != nil {
		return x.ForwardingClass
	}
	return FilterForwardingClass_FORWARDING_CLASS_INVALID
}

func (x *MatchForwardingClass) GetOperation() MatchOperation {
	if x != nil {
		return x.Operation
	}
	return MatchOperation_OP_INVALID
}

// [brief]: Filter match Next Header
// [detail]: Filter match Next Header, If min == max then match on exact value
// always min should be less than or equal max.
type MatchNextHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Minimum next header value
	// [range]: [0:255]
	Min uint32 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	// [brief]: Maximum next header Value
	// [range]: [0:255]
	Max uint32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	// [brief]: Match op
	Operation MatchOperation `protobuf:"varint,3,opt,name=operation,proto3,enum=jnx.jet.firewall.MatchOperation" json:"operation,omitempty"`
}

func (x *MatchNextHeader) Reset() {
	*x = MatchNextHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchNextHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchNextHeader) ProtoMessage() {}

func (x *MatchNextHeader) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchNextHeader.ProtoReflect.Descriptor instead.
func (*MatchNextHeader) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{20}
}

func (x *MatchNextHeader) GetMin() uint32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *MatchNextHeader) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *MatchNextHeader) GetOperation() MatchOperation {
	if x != nil {
		return x.Operation
	}
	return MatchOperation_OP_INVALID
}

// [brief]: Filter match MPLS Label
// [detail]: Filter match MPLS Label, If min == max then match on exact value
// always min should be less than or equal max.
type MatchMplsLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Minimum Label value
	// [range]: [1:1048575]
	Min uint32 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	// [brief]: Maximum Label Value
	// [range]: [1:1048575]
	Max uint32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	// [brief]: Match op
	Operation MatchOperation `protobuf:"varint,3,opt,name=operation,proto3,enum=jnx.jet.firewall.MatchOperation" json:"operation,omitempty"`
}

func (x *MatchMplsLabel) Reset() {
	*x = MatchMplsLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchMplsLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchMplsLabel) ProtoMessage() {}

func (x *MatchMplsLabel) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchMplsLabel.ProtoReflect.Descriptor instead.
func (*MatchMplsLabel) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{21}
}

func (x *MatchMplsLabel) GetMin() uint32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *MatchMplsLabel) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *MatchMplsLabel) GetOperation() MatchOperation {
	if x != nil {
		return x.Operation
	}
	return MatchOperation_OP_INVALID
}

// [brief]: Filter match Vlan Id
// [detail]: Filter match Vlan Id, If min == max then match on exact value
// always min should be less than or equal max.
type MatchVlanId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Minimum Vlan id
	// [range]: [0:4095]
	Min uint32 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	// [brief]: Maximum Vlan id
	// [range]: [0:4095]
	Max uint32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	// [brief]: Match op
	Operation MatchOperation `protobuf:"varint,3,opt,name=operation,proto3,enum=jnx.jet.firewall.MatchOperation" json:"operation,omitempty"`
}

func (x *MatchVlanId) Reset() {
	*x = MatchVlanId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchVlanId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchVlanId) ProtoMessage() {}

func (x *MatchVlanId) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchVlanId.ProtoReflect.Descriptor instead.
func (*MatchVlanId) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{22}
}

func (x *MatchVlanId) GetMin() uint32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *MatchVlanId) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *MatchVlanId) GetOperation() MatchOperation {
	if x != nil {
		return x.Operation
	}
	return MatchOperation_OP_INVALID
}

// [brief]: Filter match Mesh Group Id
// [detail]: Filter match Mesh Group Id
type MatchMeshGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Mesh Group Id
	// [range]: [0:127]
	MeshGroupId uint32 `protobuf:"varint,1,opt,name=mesh_group_id,json=meshGroupId,proto3" json:"mesh_group_id,omitempty"`
	// [brief]: Match op
	Operation MatchOperation `protobuf:"varint,2,opt,name=operation,proto3,enum=jnx.jet.firewall.MatchOperation" json:"operation,omitempty"`
}

func (x *MatchMeshGroup) Reset() {
	*x = MatchMeshGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchMeshGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchMeshGroup) ProtoMessage() {}

func (x *MatchMeshGroup) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchMeshGroup.ProtoReflect.Descriptor instead.
func (*MatchMeshGroup) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{23}
}

func (x *MatchMeshGroup) GetMeshGroupId() uint32 {
	if x != nil {
		return x.MeshGroupId
	}
	return 0
}

func (x *MatchMeshGroup) GetOperation() MatchOperation {
	if x != nil {
		return x.Operation
	}
	return MatchOperation_OP_INVALID
}

// [brief]: Filter Match L2 Token
// [detail]: Filter Match L2 Token
type MatchL2Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: L2 token value
	// [range]: [0:524287]
	Token uint32 `protobuf:"varint,1,opt,name=token,proto3" json:"token,omitempty"`
	// [brief]: Match op
	Operation MatchOperation `protobuf:"varint,2,opt,name=operation,proto3,enum=jnx.jet.firewall.MatchOperation" json:"operation,omitempty"`
}

func (x *MatchL2Token) Reset() {
	*x = MatchL2Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchL2Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchL2Token) ProtoMessage() {}

func (x *MatchL2Token) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchL2Token.ProtoReflect.Descriptor instead.
func (*MatchL2Token) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{24}
}

func (x *MatchL2Token) GetToken() uint32 {
	if x != nil {
		return x.Token
	}
	return 0
}

func (x *MatchL2Token) GetOperation() MatchOperation {
	if x != nil {
		return x.Operation
	}
	return MatchOperation_OP_INVALID
}

// [brief]: Filter match CFM Level
// [detail]: Filter match CFM Level
type MatchCfmLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]:  CFM level
	// [range]: [0:255]
	CfmLevel uint32 `protobuf:"varint,1,opt,name=cfm_level,json=cfmLevel,proto3" json:"cfm_level,omitempty"`
	// [brief]: Match op
	Operation MatchOperation `protobuf:"varint,2,opt,name=operation,proto3,enum=jnx.jet.firewall.MatchOperation" json:"operation,omitempty"`
}

func (x *MatchCfmLevel) Reset() {
	*x = MatchCfmLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCfmLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCfmLevel) ProtoMessage() {}

func (x *MatchCfmLevel) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCfmLevel.ProtoReflect.Descriptor instead.
func (*MatchCfmLevel) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{25}
}

func (x *MatchCfmLevel) GetCfmLevel() uint32 {
	if x != nil {
		return x.CfmLevel
	}
	return 0
}

func (x *MatchCfmLevel) GetOperation() MatchOperation {
	if x != nil {
		return x.Operation
	}
	return MatchOperation_OP_INVALID
}

// [brief]: Filter match CFM Opcode
// [detail]: Filter match CFM Opcode, If min == max then match on exact value
// always min should be less than or equal max.
type MatchCfmOpcode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Minimum cfm opcode value
	// [range]: [0:255]
	Min uint32 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	// [brief]: Maximum cfm opcode Value
	// [range]: [0:255]
	Max uint32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	// [brief]: Match op
	Operation MatchOperation `protobuf:"varint,3,opt,name=operation,proto3,enum=jnx.jet.firewall.MatchOperation" json:"operation,omitempty"`
}

func (x *MatchCfmOpcode) Reset() {
	*x = MatchCfmOpcode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCfmOpcode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCfmOpcode) ProtoMessage() {}

func (x *MatchCfmOpcode) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCfmOpcode.ProtoReflect.Descriptor instead.
func (*MatchCfmOpcode) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{26}
}

func (x *MatchCfmOpcode) GetMin() uint32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *MatchCfmOpcode) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *MatchCfmOpcode) GetOperation() MatchOperation {
	if x != nil {
		return x.Operation
	}
	return MatchOperation_OP_INVALID
}

// [brief]: Filter match TTL
// [detail]: Filter match TTL Opcode, If min == max then match on exact value
// always min should be less than or equal max.
type MatchTtl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Minimum Time to live
	// [range]: [0:255]
	Min uint32 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	// [brief]: Maximum Time to live
	// [range]: [0:255]
	Max uint32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	// [brief]: Match op
	Operation MatchOperation `protobuf:"varint,3,opt,name=operation,proto3,enum=jnx.jet.firewall.MatchOperation" json:"operation,omitempty"`
}

func (x *MatchTtl) Reset() {
	*x = MatchTtl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchTtl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchTtl) ProtoMessage() {}

func (x *MatchTtl) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchTtl.ProtoReflect.Descriptor instead.
func (*MatchTtl) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{27}
}

func (x *MatchTtl) GetMin() uint32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *MatchTtl) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *MatchTtl) GetOperation() MatchOperation {
	if x != nil {
		return x.Operation
	}
	return MatchOperation_OP_INVALID
}

// [brief]: Filter match Fragment offset
// [detail]: Filter match Fragment offset, If min == max then match on exact value
// always min should be less than or equal max.
type MatchFragmentOffset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Minimum Fragment offset
	// [range]: [0:8191]
	Min uint32 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	// [brief]: Maximum Fragment offset
	// [range]: [0:8191]
	Max uint32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	// [brief]: Match op
	Operation MatchOperation `protobuf:"varint,3,opt,name=operation,proto3,enum=jnx.jet.firewall.MatchOperation" json:"operation,omitempty"`
}

func (x *MatchFragmentOffset) Reset() {
	*x = MatchFragmentOffset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchFragmentOffset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchFragmentOffset) ProtoMessage() {}

func (x *MatchFragmentOffset) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchFragmentOffset.ProtoReflect.Descriptor instead.
func (*MatchFragmentOffset) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{28}
}

func (x *MatchFragmentOffset) GetMin() uint32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *MatchFragmentOffset) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *MatchFragmentOffset) GetOperation() MatchOperation {
	if x != nil {
		return x.Operation
	}
	return MatchOperation_OP_INVALID
}

// [brief]: Filter action Policer
// [detail]: Filter action Policer referred with policer name and policer type.
// Other parameters is unseen or ignored. Also ignored even if available policer parameters
// provided as part of action mismatching with respect to Policer template.
type ActionPolicer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: The policer
	Policer *Policer `protobuf:"bytes,1,opt,name=policer,proto3" json:"policer,omitempty"`
}

func (x *ActionPolicer) Reset() {
	*x = ActionPolicer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionPolicer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionPolicer) ProtoMessage() {}

func (x *ActionPolicer) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionPolicer.ProtoReflect.Descriptor instead.
func (*ActionPolicer) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{29}
}

func (x *ActionPolicer) GetPolicer() *Policer {
	if x != nil {
		return x.Policer
	}
	return nil
}

// [brief]: Filter action Counter
// [detail]: Filter Action Counter
type ActionCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Counter name (upto 64 characters)
	CounterName string `protobuf:"bytes,1,opt,name=counter_name,json=counterName,proto3" json:"counter_name,omitempty"`
}

func (x *ActionCounter) Reset() {
	*x = ActionCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionCounter) ProtoMessage() {}

func (x *ActionCounter) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionCounter.ProtoReflect.Descriptor instead.
func (*ActionCounter) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{30}
}

func (x *ActionCounter) GetCounterName() string {
	if x != nil {
		return x.CounterName
	}
	return ""
}

// [brief]: Filter action Send to Client
// [detail]: Filter action Send to Client
type ActionSendToClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Client name (upto 64 characters)
	ClientName string `protobuf:"bytes,1,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
}

func (x *ActionSendToClient) Reset() {
	*x = ActionSendToClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionSendToClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSendToClient) ProtoMessage() {}

func (x *ActionSendToClient) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionSendToClient.ProtoReflect.Descriptor instead.
func (*ActionSendToClient) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{31}
}

func (x *ActionSendToClient) GetClientName() string {
	if x != nil {
		return x.ClientName
	}
	return ""
}

// [brief]: Filter Action Copy to client
// [detail]: Filter Action Copy to client
type ActionCopyToHost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Client name (upto 64 characters)
	ClientName string `protobuf:"bytes,1,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
}

func (x *ActionCopyToHost) Reset() {
	*x = ActionCopyToHost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionCopyToHost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionCopyToHost) ProtoMessage() {}

func (x *ActionCopyToHost) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionCopyToHost.ProtoReflect.Descriptor instead.
func (*ActionCopyToHost) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{32}
}

func (x *ActionCopyToHost) GetClientName() string {
	if x != nil {
		return x.ClientName
	}
	return ""
}

// [brief]: Filter action Policer Instance
// [detail]: Filter action Policer Instance is used to program new instance of
// existing policer with instance specific policer flags.
type ActionPolicerInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: The policer
	Policer *Policer `protobuf:"bytes,1,opt,name=policer,proto3" json:"policer,omitempty"`
	// [brief]: Policer Instance name
	PolicerInstance string `protobuf:"bytes,2,opt,name=policer_instance,json=policerInstance,proto3" json:"policer_instance,omitempty"`
}

func (x *ActionPolicerInstance) Reset() {
	*x = ActionPolicerInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionPolicerInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionPolicerInstance) ProtoMessage() {}

func (x *ActionPolicerInstance) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionPolicerInstance.ProtoReflect.Descriptor instead.
func (*ActionPolicerInstance) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{33}
}

func (x *ActionPolicerInstance) GetPolicer() *Policer {
	if x != nil {
		return x.Policer
	}
	return nil
}

func (x *ActionPolicerInstance) GetPolicerInstance() string {
	if x != nil {
		return x.PolicerInstance
	}
	return ""
}

// [brief]: Filter action Topo Redirect
// [detail]: Filter action Topo Redirect
type ActionTopologyRedirect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: user configured routing-instance name, eg. ___private2__.inet.0
	// [default]: by default points to default routing instance
	RoutingInstanceName string `protobuf:"bytes,1,opt,name=routing_instance_name,json=routingInstanceName,proto3" json:"routing_instance_name,omitempty"`
	// [brief]: Topology name
	TopologyName string `protobuf:"bytes,2,opt,name=topology_name,json=topologyName,proto3" json:"topology_name,omitempty"`
}

func (x *ActionTopologyRedirect) Reset() {
	*x = ActionTopologyRedirect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionTopologyRedirect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionTopologyRedirect) ProtoMessage() {}

func (x *ActionTopologyRedirect) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionTopologyRedirect.ProtoReflect.Descriptor instead.
func (*ActionTopologyRedirect) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{34}
}

func (x *ActionTopologyRedirect) GetRoutingInstanceName() string {
	if x != nil {
		return x.RoutingInstanceName
	}
	return ""
}

func (x *ActionTopologyRedirect) GetTopologyName() string {
	if x != nil {
		return x.TopologyName
	}
	return ""
}

// [brief]: Filter action set nexthop
// [detail]: Filter action set nexthop
type ActionSetNexthop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Set nexthop index of 32 bit value
	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *ActionSetNexthop) Reset() {
	*x = ActionSetNexthop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionSetNexthop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSetNexthop) ProtoMessage() {}

func (x *ActionSetNexthop) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionSetNexthop.ProtoReflect.Descriptor instead.
func (*ActionSetNexthop) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{35}
}

func (x *ActionSetNexthop) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

// [brief]: Filter action Loss Priority
// [detail]: Filter action Loss Priority
type ActionLossPriority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Set loss priority
	Priority FilterLossPriority `protobuf:"varint,1,opt,name=priority,proto3,enum=jnx.jet.firewall.FilterLossPriority" json:"priority,omitempty"`
}

func (x *ActionLossPriority) Reset() {
	*x = ActionLossPriority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionLossPriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionLossPriority) ProtoMessage() {}

func (x *ActionLossPriority) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionLossPriority.ProtoReflect.Descriptor instead.
func (*ActionLossPriority) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{36}
}

func (x *ActionLossPriority) GetPriority() FilterLossPriority {
	if x != nil {
		return x.Priority
	}
	return FilterLossPriority_LOSS_PRIORITY_INVALID
}

// [brief]: Filter action Forwarding Priority
// [detail]: Filter action Forwarding Priority
type ActionForwardingPriority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: priority
	// [range]: [0:255]
	Priority uint32 `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *ActionForwardingPriority) Reset() {
	*x = ActionForwardingPriority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionForwardingPriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionForwardingPriority) ProtoMessage() {}

func (x *ActionForwardingPriority) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionForwardingPriority.ProtoReflect.Descriptor instead.
func (*ActionForwardingPriority) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{37}
}

func (x *ActionForwardingPriority) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

// [brief]: Filter action Forwarding Class
// [detail]: Filter action Forwarding Class
type ActionForwardingClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: set forwarding class id
	Fc FilterForwardingClass `protobuf:"varint,1,opt,name=fc,proto3,enum=jnx.jet.firewall.FilterForwardingClass" json:"fc,omitempty"`
}

func (x *ActionForwardingClass) Reset() {
	*x = ActionForwardingClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionForwardingClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionForwardingClass) ProtoMessage() {}

func (x *ActionForwardingClass) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionForwardingClass.ProtoReflect.Descriptor instead.
func (*ActionForwardingClass) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{38}
}

func (x *ActionForwardingClass) GetFc() FilterForwardingClass {
	if x != nil {
		return x.Fc
	}
	return FilterForwardingClass_FORWARDING_CLASS_INVALID
}

// [brief]: Filter action Set IP DSCP
// [detail]: Filter action Set IP DSCP
type ActionSetIpDscp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: DSCP for IP and IPv6
	// [range]: [0:63]
	Dscp uint32 `protobuf:"varint,1,opt,name=dscp,proto3" json:"dscp,omitempty"`
}

func (x *ActionSetIpDscp) Reset() {
	*x = ActionSetIpDscp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionSetIpDscp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSetIpDscp) ProtoMessage() {}

func (x *ActionSetIpDscp) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionSetIpDscp.ProtoReflect.Descriptor instead.
func (*ActionSetIpDscp) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{39}
}

func (x *ActionSetIpDscp) GetDscp() uint32 {
	if x != nil {
		return x.Dscp
	}
	return 0
}

// [brief]: Interface format used in Filter actions
// [detail]: Interface format, Interface unit Index or name in filter
// action. eg. ge-0/0/1.0 or unit's index
type ActionInterfaceUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: interface unit index or name
	//
	// Types that are assignable to Interface:
	//	*ActionInterfaceUnit_UnitName
	//	*ActionInterfaceUnit_UnitIndex
	Interface isActionInterfaceUnit_Interface `protobuf_oneof:"interface"`
}

func (x *ActionInterfaceUnit) Reset() {
	*x = ActionInterfaceUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionInterfaceUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionInterfaceUnit) ProtoMessage() {}

func (x *ActionInterfaceUnit) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionInterfaceUnit.ProtoReflect.Descriptor instead.
func (*ActionInterfaceUnit) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{40}
}

func (m *ActionInterfaceUnit) GetInterface() isActionInterfaceUnit_Interface {
	if m != nil {
		return m.Interface
	}
	return nil
}

func (x *ActionInterfaceUnit) GetUnitName() string {
	if x, ok := x.GetInterface().(*ActionInterfaceUnit_UnitName); ok {
		return x.UnitName
	}
	return ""
}

func (x *ActionInterfaceUnit) GetUnitIndex() uint32 {
	if x, ok := x.GetInterface().(*ActionInterfaceUnit_UnitIndex); ok {
		return x.UnitIndex
	}
	return 0
}

type isActionInterfaceUnit_Interface interface {
	isActionInterfaceUnit_Interface()
}

type ActionInterfaceUnit_UnitName struct {
	// [brief]: Interface Unit Name
	UnitName string `protobuf:"bytes,1,opt,name=unit_name,json=unitName,proto3,oneof"`
}

type ActionInterfaceUnit_UnitIndex struct {
	// [brief]: Interface unit Index
	// [range]: [0:4095]
	UnitIndex uint32 `protobuf:"varint,2,opt,name=unit_index,json=unitIndex,proto3,oneof"`
}

func (*ActionInterfaceUnit_UnitName) isActionInterfaceUnit_Interface() {}

func (*ActionInterfaceUnit_UnitIndex) isActionInterfaceUnit_Interface() {}

// [brief]: Filter action next interface
// [detail]: Filter action next interface, Interface unit Index or name in filter
// action. eg. ge-0/0/1.0 or unit's index
type ActionNextInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: user configured routing-instance name, eg. ___private2__.inet.0
	// [default]: by default points to default routing instance
	RoutingInstanceName string `protobuf:"bytes,1,opt,name=routing_instance_name,json=routingInstanceName,proto3" json:"routing_instance_name,omitempty"`
	// [brief]: interface unit index or name
	Unit *ActionInterfaceUnit `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty"`
}

func (x *ActionNextInterface) Reset() {
	*x = ActionNextInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionNextInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionNextInterface) ProtoMessage() {}

func (x *ActionNextInterface) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionNextInterface.ProtoReflect.Descriptor instead.
func (*ActionNextInterface) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{41}
}

func (x *ActionNextInterface) GetRoutingInstanceName() string {
	if x != nil {
		return x.RoutingInstanceName
	}
	return ""
}

func (x *ActionNextInterface) GetUnit() *ActionInterfaceUnit {
	if x != nil {
		return x.Unit
	}
	return nil
}

// [brief]: Filter Action Next IP
// [detail]: Filter Action Next IP
type ActionNextIp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: user configured routing-instance name, eg. ___private2__.inet.0
	// [default]: by default points to default routing instance
	RoutingInstanceName string `protobuf:"bytes,1,opt,name=routing_instance_name,json=routingInstanceName,proto3" json:"routing_instance_name,omitempty"`
	// [brief]: address either ipv4 or ipv6
	Addr *IpAddress `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	// [brief]: Destination prefix length range for IPv4 (0:32) or IPv6 (0:128) addresses
	// [range]: [0:128]
	PrefixLength uint32 `protobuf:"varint,3,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
}

func (x *ActionNextIp) Reset() {
	*x = ActionNextIp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionNextIp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionNextIp) ProtoMessage() {}

func (x *ActionNextIp) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionNextIp.ProtoReflect.Descriptor instead.
func (*ActionNextIp) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{42}
}

func (x *ActionNextIp) GetRoutingInstanceName() string {
	if x != nil {
		return x.RoutingInstanceName
	}
	return ""
}

func (x *ActionNextIp) GetAddr() *IpAddress {
	if x != nil {
		return x.Addr
	}
	return nil
}

func (x *ActionNextIp) GetPrefixLength() uint32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

// [brief]: Filter Adjacency details of term placement
// [detail]: Filter Adjacency details of term placement
type FilterAdjacency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Type of adjacency placement
	Type FilterAdjacencyType `protobuf:"varint,1,opt,name=type,proto3,enum=jnx.jet.firewall.FilterAdjacencyType" json:"type,omitempty"`
	// [brief]: The previous or the next AC
	TermName string `protobuf:"bytes,2,opt,name=term_name,json=termName,proto3" json:"term_name,omitempty"`
}

func (x *FilterAdjacency) Reset() {
	*x = FilterAdjacency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterAdjacency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterAdjacency) ProtoMessage() {}

func (x *FilterAdjacency) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterAdjacency.ProtoReflect.Descriptor instead.
func (*FilterAdjacency) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{43}
}

func (x *FilterAdjacency) GetType() FilterAdjacencyType {
	if x != nil {
		return x.Type
	}
	return FilterAdjacencyType_TERM_AFTER
}

func (x *FilterAdjacency) GetTermName() string {
	if x != nil {
		return x.TermName
	}
	return ""
}

// [brief]: Filter match on interface
// [detail]: Filter match on interface unit Index or name e.g. ge-0/0/1.0 or unit's
// index
type MatchInterfaceUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: interface index or name
	//
	// Types that are assignable to Interface:
	//	*MatchInterfaceUnit_UnitName
	//	*MatchInterfaceUnit_UnitIndex
	Interface isMatchInterfaceUnit_Interface `protobuf_oneof:"interface"`
}

func (x *MatchInterfaceUnit) Reset() {
	*x = MatchInterfaceUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchInterfaceUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchInterfaceUnit) ProtoMessage() {}

func (x *MatchInterfaceUnit) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchInterfaceUnit.ProtoReflect.Descriptor instead.
func (*MatchInterfaceUnit) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{44}
}

func (m *MatchInterfaceUnit) GetInterface() isMatchInterfaceUnit_Interface {
	if m != nil {
		return m.Interface
	}
	return nil
}

func (x *MatchInterfaceUnit) GetUnitName() string {
	if x, ok := x.GetInterface().(*MatchInterfaceUnit_UnitName); ok {
		return x.UnitName
	}
	return ""
}

func (x *MatchInterfaceUnit) GetUnitIndex() uint32 {
	if x, ok := x.GetInterface().(*MatchInterfaceUnit_UnitIndex); ok {
		return x.UnitIndex
	}
	return 0
}

type isMatchInterfaceUnit_Interface interface {
	isMatchInterfaceUnit_Interface()
}

type MatchInterfaceUnit_UnitName struct {
	// [brief]: Interface unit Name
	UnitName string `protobuf:"bytes,1,opt,name=unit_name,json=unitName,proto3,oneof"`
}

type MatchInterfaceUnit_UnitIndex struct {
	// [brief]: Interface unit index
	// [range]: [0:4095]
	UnitIndex uint32 `protobuf:"varint,2,opt,name=unit_index,json=unitIndex,proto3,oneof"`
}

func (*MatchInterfaceUnit_UnitName) isMatchInterfaceUnit_Interface() {}

func (*MatchInterfaceUnit_UnitIndex) isMatchInterfaceUnit_Interface() {}

// [brief]: Filter Flex Offset range match
// [detail]: Flex Offset range match define with min and max values.
// If min == max then match on exact value, always min should be
// less than or equal max.
// Flexible match min and max values range depends on bit length
// configured in MatchFlexibleRange
type MatchFlexOffset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Depends on bit length of MatchFlexibleRange
	// [range]: [1:4294967295]
	Min uint32 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	// [brief]: Depends on bit length of MatchFlexibleRange
	// [range]: [1:4294967295]
	Max uint32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	// [brief]: Match op
	Operation MatchOperation `protobuf:"varint,3,opt,name=operation,proto3,enum=jnx.jet.firewall.MatchOperation" json:"operation,omitempty"`
}

func (x *MatchFlexOffset) Reset() {
	*x = MatchFlexOffset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchFlexOffset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchFlexOffset) ProtoMessage() {}

func (x *MatchFlexOffset) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchFlexOffset.ProtoReflect.Descriptor instead.
func (*MatchFlexOffset) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{45}
}

func (x *MatchFlexOffset) GetMin() uint32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *MatchFlexOffset) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *MatchFlexOffset) GetOperation() MatchOperation {
	if x != nil {
		return x.Operation
	}
	return MatchOperation_OP_INVALID
}

// [brief]: Filter Flex Match Range
// [detail]: A flexible match with range of values can be defined by providing
// start offset/position using reference of L3/L4 or payload and byte and bit
// positing from the start offset. The range of values can be defined using bit
// length field of MatchFlexibleRange
type MatchFlexibleRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Flex match start offset
	StartOffset FilterTermMatchFlexStartOffest `protobuf:"varint,1,opt,name=start_offset,json=startOffset,proto3,enum=jnx.jet.firewall.FilterTermMatchFlexStartOffest" json:"start_offset,omitempty"`
	// [brief]: Flex match bit length
	// [range]: [1:32]
	BitLength uint32 `protobuf:"varint,2,opt,name=bit_length,json=bitLength,proto3" json:"bit_length,omitempty"`
	// [brief]: Flex match bit offset
	// [range]: [0:7]
	BitOffset uint32 `protobuf:"varint,3,opt,name=bit_offset,json=bitOffset,proto3" json:"bit_offset,omitempty"`
	// [brief]: Flex match byte offset
	// [range]: [0:255]
	ByteOffset uint32 `protobuf:"varint,4,opt,name=byte_offset,json=byteOffset,proto3" json:"byte_offset,omitempty"`
	// [brief]: Flex match range value
	Range *MatchFlexOffset `protobuf:"bytes,5,opt,name=range,proto3" json:"range,omitempty"`
}

func (x *MatchFlexibleRange) Reset() {
	*x = MatchFlexibleRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchFlexibleRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchFlexibleRange) ProtoMessage() {}

func (x *MatchFlexibleRange) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchFlexibleRange.ProtoReflect.Descriptor instead.
func (*MatchFlexibleRange) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{46}
}

func (x *MatchFlexibleRange) GetStartOffset() FilterTermMatchFlexStartOffest {
	if x != nil {
		return x.StartOffset
	}
	return FilterTermMatchFlexStartOffest_FLEX_OFFSET_INVALID
}

func (x *MatchFlexibleRange) GetBitLength() uint32 {
	if x != nil {
		return x.BitLength
	}
	return 0
}

func (x *MatchFlexibleRange) GetBitOffset() uint32 {
	if x != nil {
		return x.BitOffset
	}
	return 0
}

func (x *MatchFlexibleRange) GetByteOffset() uint32 {
	if x != nil {
		return x.ByteOffset
	}
	return 0
}

func (x *MatchFlexibleRange) GetRange() *MatchFlexOffset {
	if x != nil {
		return x.Range
	}
	return nil
}

// [brief]: Filter Flexible offset Range match
// [detail]: Flexible offset range match as described in message
// MatchFlexibleRange
type MatchFlexibleOffsetRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Input configuration data in the relevant format.
	//
	// Types that are assignable to Range:
	//	*MatchFlexibleOffsetRange_FlexRangeMatch
	Range isMatchFlexibleOffsetRange_Range `protobuf_oneof:"range"`
}

func (x *MatchFlexibleOffsetRange) Reset() {
	*x = MatchFlexibleOffsetRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchFlexibleOffsetRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchFlexibleOffsetRange) ProtoMessage() {}

func (x *MatchFlexibleOffsetRange) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchFlexibleOffsetRange.ProtoReflect.Descriptor instead.
func (*MatchFlexibleOffsetRange) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{47}
}

func (m *MatchFlexibleOffsetRange) GetRange() isMatchFlexibleOffsetRange_Range {
	if m != nil {
		return m.Range
	}
	return nil
}

func (x *MatchFlexibleOffsetRange) GetFlexRangeMatch() *MatchFlexibleRange {
	if x, ok := x.GetRange().(*MatchFlexibleOffsetRange_FlexRangeMatch); ok {
		return x.FlexRangeMatch
	}
	return nil
}

type isMatchFlexibleOffsetRange_Range interface {
	isMatchFlexibleOffsetRange_Range()
}

type MatchFlexibleOffsetRange_FlexRangeMatch struct {
	// [brief]: Reference to flexible range match
	FlexRangeMatch *MatchFlexibleRange `protobuf:"bytes,1,opt,name=flex_range_match,json=flexRangeMatch,proto3,oneof"`
}

func (*MatchFlexibleOffsetRange_FlexRangeMatch) isMatchFlexibleOffsetRange_Range() {}

// [brief]: Filter match fleaxible Mask.
// [detail]: A flexible match with mask can be defined by providing start
// offset/position using reference of L3/L4 or payload and byte and bit positing
// from the start offset. The prefix in string format can be matched with the
// mask value provided. Mask value will be dependent on bit length of field of
// MatchFlexibleMask
type MatchFlexibleMask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Flex match start offset
	StartOffset FilterTermMatchFlexStartOffest `protobuf:"varint,1,opt,name=start_offset,json=startOffset,proto3,enum=jnx.jet.firewall.FilterTermMatchFlexStartOffest" json:"start_offset,omitempty"`
	// [brief]: Flex match bit length
	// [range]: [1:32]
	BitLength uint32 `protobuf:"varint,2,opt,name=bit_length,json=bitLength,proto3" json:"bit_length,omitempty"`
	// [brief]: Flex match bit offset
	// [range]: [0:7]
	BitOffset uint32 `protobuf:"varint,3,opt,name=bit_offset,json=bitOffset,proto3" json:"bit_offset,omitempty"`
	// [brief]: Flex match byte offset
	// [range]: [0:255]
	ByteOffset uint32 `protobuf:"varint,4,opt,name=byte_offset,json=byteOffset,proto3" json:"byte_offset,omitempty"`
	// [brief]: Flex match mask of 32 bit
	Mask uint32 `protobuf:"varint,5,opt,name=mask,proto3" json:"mask,omitempty"`
	// [brief]: 32 Bit, Flex prefix match encoded hex value as a string
	// [pattern]: "0x89abcdef"
	PrefixString string `protobuf:"bytes,6,opt,name=prefix_string,json=prefixString,proto3" json:"prefix_string,omitempty"`
}

func (x *MatchFlexibleMask) Reset() {
	*x = MatchFlexibleMask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchFlexibleMask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchFlexibleMask) ProtoMessage() {}

func (x *MatchFlexibleMask) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchFlexibleMask.ProtoReflect.Descriptor instead.
func (*MatchFlexibleMask) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{48}
}

func (x *MatchFlexibleMask) GetStartOffset() FilterTermMatchFlexStartOffest {
	if x != nil {
		return x.StartOffset
	}
	return FilterTermMatchFlexStartOffest_FLEX_OFFSET_INVALID
}

func (x *MatchFlexibleMask) GetBitLength() uint32 {
	if x != nil {
		return x.BitLength
	}
	return 0
}

func (x *MatchFlexibleMask) GetBitOffset() uint32 {
	if x != nil {
		return x.BitOffset
	}
	return 0
}

func (x *MatchFlexibleMask) GetByteOffset() uint32 {
	if x != nil {
		return x.ByteOffset
	}
	return 0
}

func (x *MatchFlexibleMask) GetMask() uint32 {
	if x != nil {
		return x.Mask
	}
	return 0
}

func (x *MatchFlexibleMask) GetPrefixString() string {
	if x != nil {
		return x.PrefixString
	}
	return ""
}

// [brief]: Filter match flexible offset mask
// [detail]: Flexible offset Mask match as described in message
// MatchFlexibleMask
type MatchFlexibleOffsetMask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Input configuration data in the relevant format.
	//
	// Types that are assignable to Mask:
	//	*MatchFlexibleOffsetMask_FlexMaskMatch
	Mask isMatchFlexibleOffsetMask_Mask `protobuf_oneof:"mask"`
}

func (x *MatchFlexibleOffsetMask) Reset() {
	*x = MatchFlexibleOffsetMask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchFlexibleOffsetMask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchFlexibleOffsetMask) ProtoMessage() {}

func (x *MatchFlexibleOffsetMask) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchFlexibleOffsetMask.ProtoReflect.Descriptor instead.
func (*MatchFlexibleOffsetMask) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{49}
}

func (m *MatchFlexibleOffsetMask) GetMask() isMatchFlexibleOffsetMask_Mask {
	if m != nil {
		return m.Mask
	}
	return nil
}

func (x *MatchFlexibleOffsetMask) GetFlexMaskMatch() *MatchFlexibleMask {
	if x, ok := x.GetMask().(*MatchFlexibleOffsetMask_FlexMaskMatch); ok {
		return x.FlexMaskMatch
	}
	return nil
}

type isMatchFlexibleOffsetMask_Mask interface {
	isMatchFlexibleOffsetMask_Mask()
}

type MatchFlexibleOffsetMask_FlexMaskMatch struct {
	// [brief]: Reference to Flexible mask parameters
	FlexMaskMatch *MatchFlexibleMask `protobuf:"bytes,1,opt,name=flex_mask_match,json=flexMaskMatch,proto3,oneof"`
}

func (*MatchFlexibleOffsetMask_FlexMaskMatch) isMatchFlexibleOffsetMask_Mask() {}

// [brief]: Filter Match Mac address
// [detail]: Filter Match Mac address
type MatchMacAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Mac address
	Addr *MacAddress `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	// [brief]: Mac address length
	// [range]: [0:48]
	AddrLength uint32 `protobuf:"varint,2,opt,name=addr_length,json=addrLength,proto3" json:"addr_length,omitempty"`
	// [brief]: Match op
	Operation MatchOperation `protobuf:"varint,3,opt,name=operation,proto3,enum=jnx.jet.firewall.MatchOperation" json:"operation,omitempty"`
}

func (x *MatchMacAddress) Reset() {
	*x = MatchMacAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchMacAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchMacAddress) ProtoMessage() {}

func (x *MatchMacAddress) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchMacAddress.ProtoReflect.Descriptor instead.
func (*MatchMacAddress) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{50}
}

func (x *MatchMacAddress) GetAddr() *MacAddress {
	if x != nil {
		return x.Addr
	}
	return nil
}

func (x *MatchMacAddress) GetAddrLength() uint32 {
	if x != nil {
		return x.AddrLength
	}
	return 0
}

func (x *MatchMacAddress) GetOperation() MatchOperation {
	if x != nil {
		return x.Operation
	}
	return MatchOperation_OP_INVALID
}

// [brief]: Filter match Ether Type. flexible to macth on full range of values
// [detail]: Match on ether type. If min == max then match on exact value,
// always min should be less than or equal max.
type MatchEtherType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Minimum Ether type, user can even use hex values for this field
	// [range]: [0:65535]
	Min uint32 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	// [brief]: Maximum Ether type, user can even use hex values for this field
	// [range]: [0:65535]
	Max uint32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	// [brief]: Match op
	Operation MatchOperation `protobuf:"varint,3,opt,name=operation,proto3,enum=jnx.jet.firewall.MatchOperation" json:"operation,omitempty"`
}

func (x *MatchEtherType) Reset() {
	*x = MatchEtherType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchEtherType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchEtherType) ProtoMessage() {}

func (x *MatchEtherType) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchEtherType.ProtoReflect.Descriptor instead.
func (*MatchEtherType) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{51}
}

func (x *MatchEtherType) GetMin() uint32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *MatchEtherType) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *MatchEtherType) GetOperation() MatchOperation {
	if x != nil {
		return x.Operation
	}
	return MatchOperation_OP_INVALID
}

// [brief]: Filter match Learn Vlan Id
// [detail]: Match on Learn Vlan id. If min == max then match on exact value,
// always min should be less than or equal max.
type MatchLearnVlanId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Minimum Learn vlan id
	// [range]: [0:4095]
	Min uint32 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	// [brief]: Maximum Learn vLan id
	// [range]: [0:4095]
	Max uint32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	// [brief]: Match op
	Operation MatchOperation `protobuf:"varint,3,opt,name=operation,proto3,enum=jnx.jet.firewall.MatchOperation" json:"operation,omitempty"`
}

func (x *MatchLearnVlanId) Reset() {
	*x = MatchLearnVlanId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchLearnVlanId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchLearnVlanId) ProtoMessage() {}

func (x *MatchLearnVlanId) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchLearnVlanId.ProtoReflect.Descriptor instead.
func (*MatchLearnVlanId) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{52}
}

func (x *MatchLearnVlanId) GetMin() uint32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *MatchLearnVlanId) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *MatchLearnVlanId) GetOperation() MatchOperation {
	if x != nil {
		return x.Operation
	}
	return MatchOperation_OP_INVALID
}

// [brief]: Filter match learn vlan priority
// [detail]: Match on Learn Vlan priority. If min == max then match on exact
// value, always min should be less than or equal max.
type MatchLearnVlanPriority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Minimum Learn vlan priority
	// [range]: [0:7]
	Min uint32 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	// [brief]: Maximum Learn vLan priority
	// [range]: [0:7]
	Max uint32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	// [brief]: Match op
	Operation MatchOperation `protobuf:"varint,3,opt,name=operation,proto3,enum=jnx.jet.firewall.MatchOperation" json:"operation,omitempty"`
}

func (x *MatchLearnVlanPriority) Reset() {
	*x = MatchLearnVlanPriority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchLearnVlanPriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchLearnVlanPriority) ProtoMessage() {}

func (x *MatchLearnVlanPriority) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchLearnVlanPriority.ProtoReflect.Descriptor instead.
func (*MatchLearnVlanPriority) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{53}
}

func (x *MatchLearnVlanPriority) GetMin() uint32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *MatchLearnVlanPriority) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *MatchLearnVlanPriority) GetOperation() MatchOperation {
	if x != nil {
		return x.Operation
	}
	return MatchOperation_OP_INVALID
}

// [brief]: Filter Term list of Matches for Inet family Filter
// [detail]: An Filter list of Matches supported by Inet family Filter
type FilterTermMatchInet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: List of Destination addresses
	Ipv4DstAddrs []*MatchIpAddress `protobuf:"bytes,1,rep,name=ipv4_dst_addrs,json=ipv4DstAddrs,proto3" json:"ipv4_dst_addrs,omitempty"`
	// [brief]: List of Source addresses
	Ipv4SrcAddrs []*MatchIpAddress `protobuf:"bytes,2,rep,name=ipv4_src_addrs,json=ipv4SrcAddrs,proto3" json:"ipv4_src_addrs,omitempty"`
	// [brief]: List of Destination ports
	DstPorts []*MatchPort `protobuf:"bytes,3,rep,name=dst_ports,json=dstPorts,proto3" json:"dst_ports,omitempty"`
	// [brief]: List of Source ports
	SrcPorts []*MatchPort `protobuf:"bytes,4,rep,name=src_ports,json=srcPorts,proto3" json:"src_ports,omitempty"`
	// [brief]: List of Dscp code points
	DscpCodes []*MatchDscpCode `protobuf:"bytes,5,rep,name=dscp_codes,json=dscpCodes,proto3" json:"dscp_codes,omitempty"`
	// [brief]: List of Protocols
	Protocols []*MatchProtocol `protobuf:"bytes,6,rep,name=protocols,proto3" json:"protocols,omitempty"`
	// [brief]: List of Icmp types
	IcmpTypes []*MatchIcmpType `protobuf:"bytes,7,rep,name=icmp_types,json=icmpTypes,proto3" json:"icmp_types,omitempty"`
	// [brief]: List of Icmp codes
	IcmpCodes []*MatchIcmpCode `protobuf:"bytes,8,rep,name=icmp_codes,json=icmpCodes,proto3" json:"icmp_codes,omitempty"`
	// [brief]: List of Packet lengths
	PacketLengths []*MatchPacketLength `protobuf:"bytes,9,rep,name=packet_lengths,json=packetLengths,proto3" json:"packet_lengths,omitempty"`
	// [brief]: List of Ttl's
	Ttls []*MatchTtl `protobuf:"bytes,10,rep,name=ttls,proto3" json:"ttls,omitempty"`
	// [brief]: Fragment flag
	FragmentFlag FilterFragmentFlags `protobuf:"varint,11,opt,name=fragment_flag,json=fragmentFlag,proto3,enum=jnx.jet.firewall.FilterFragmentFlags" json:"fragment_flag,omitempty"`
	// [brief]: List of fragment offset range
	FragOffsets []*MatchFragmentOffset `protobuf:"bytes,12,rep,name=frag_offsets,json=fragOffsets,proto3" json:"frag_offsets,omitempty"`
	// [brief]: Interface unit (e.g. ge-0/0/1.0 or unit's index)
	InterfaceUnits []*MatchInterfaceUnit `protobuf:"bytes,13,rep,name=interface_units,json=interfaceUnits,proto3" json:"interface_units,omitempty"`
	// [brief]: List of ip precedence
	IpPrecedences []*MatchIpPrecedence `protobuf:"bytes,14,rep,name=ip_precedences,json=ipPrecedences,proto3" json:"ip_precedences,omitempty"`
	// [brief]: List of Addresses
	Ipv4Addrs []*MatchIpAddress `protobuf:"bytes,15,rep,name=ipv4_addrs,json=ipv4Addrs,proto3" json:"ipv4_addrs,omitempty"`
	// [brief]: List of Ports
	Ports []*MatchPort `protobuf:"bytes,16,rep,name=ports,proto3" json:"ports,omitempty"`
	// [brief]: Flex Ranges
	FlexRange *MatchFlexibleOffsetRange `protobuf:"bytes,17,opt,name=flex_range,json=flexRange,proto3" json:"flex_range,omitempty"`
	// [brief]: Flex Masks
	FlexMask *MatchFlexibleOffsetMask `protobuf:"bytes,18,opt,name=flex_mask,json=flexMask,proto3" json:"flex_mask,omitempty"`
}

func (x *FilterTermMatchInet) Reset() {
	*x = FilterTermMatchInet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterTermMatchInet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterTermMatchInet) ProtoMessage() {}

func (x *FilterTermMatchInet) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterTermMatchInet.ProtoReflect.Descriptor instead.
func (*FilterTermMatchInet) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{54}
}

func (x *FilterTermMatchInet) GetIpv4DstAddrs() []*MatchIpAddress {
	if x != nil {
		return x.Ipv4DstAddrs
	}
	return nil
}

func (x *FilterTermMatchInet) GetIpv4SrcAddrs() []*MatchIpAddress {
	if x != nil {
		return x.Ipv4SrcAddrs
	}
	return nil
}

func (x *FilterTermMatchInet) GetDstPorts() []*MatchPort {
	if x != nil {
		return x.DstPorts
	}
	return nil
}

func (x *FilterTermMatchInet) GetSrcPorts() []*MatchPort {
	if x != nil {
		return x.SrcPorts
	}
	return nil
}

func (x *FilterTermMatchInet) GetDscpCodes() []*MatchDscpCode {
	if x != nil {
		return x.DscpCodes
	}
	return nil
}

func (x *FilterTermMatchInet) GetProtocols() []*MatchProtocol {
	if x != nil {
		return x.Protocols
	}
	return nil
}

func (x *FilterTermMatchInet) GetIcmpTypes() []*MatchIcmpType {
	if x != nil {
		return x.IcmpTypes
	}
	return nil
}

func (x *FilterTermMatchInet) GetIcmpCodes() []*MatchIcmpCode {
	if x != nil {
		return x.IcmpCodes
	}
	return nil
}

func (x *FilterTermMatchInet) GetPacketLengths() []*MatchPacketLength {
	if x != nil {
		return x.PacketLengths
	}
	return nil
}

func (x *FilterTermMatchInet) GetTtls() []*MatchTtl {
	if x != nil {
		return x.Ttls
	}
	return nil
}

func (x *FilterTermMatchInet) GetFragmentFlag() FilterFragmentFlags {
	if x != nil {
		return x.FragmentFlag
	}
	return FilterFragmentFlags_FRAGMENT_NONE
}

func (x *FilterTermMatchInet) GetFragOffsets() []*MatchFragmentOffset {
	if x != nil {
		return x.FragOffsets
	}
	return nil
}

func (x *FilterTermMatchInet) GetInterfaceUnits() []*MatchInterfaceUnit {
	if x != nil {
		return x.InterfaceUnits
	}
	return nil
}

func (x *FilterTermMatchInet) GetIpPrecedences() []*MatchIpPrecedence {
	if x != nil {
		return x.IpPrecedences
	}
	return nil
}

func (x *FilterTermMatchInet) GetIpv4Addrs() []*MatchIpAddress {
	if x != nil {
		return x.Ipv4Addrs
	}
	return nil
}

func (x *FilterTermMatchInet) GetPorts() []*MatchPort {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *FilterTermMatchInet) GetFlexRange() *MatchFlexibleOffsetRange {
	if x != nil {
		return x.FlexRange
	}
	return nil
}

func (x *FilterTermMatchInet) GetFlexMask() *MatchFlexibleOffsetMask {
	if x != nil {
		return x.FlexMask
	}
	return nil
}

// [brief]: Inet family Inet terminating actions supported
// [detail]: Inet family Inet terminating actions supported
type FilterTermInetTerminatingAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Input configuration data in the relevant format.
	//
	// Types that are assignable to TerminatingAction:
	//	*FilterTermInetTerminatingAction_Accept
	//	*FilterTermInetTerminatingAction_Discard
	//	*FilterTermInetTerminatingAction_Reject
	//	*FilterTermInetTerminatingAction_RoutingInstanceName
	TerminatingAction isFilterTermInetTerminatingAction_TerminatingAction `protobuf_oneof:"terminating_action"`
}

func (x *FilterTermInetTerminatingAction) Reset() {
	*x = FilterTermInetTerminatingAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterTermInetTerminatingAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterTermInetTerminatingAction) ProtoMessage() {}

func (x *FilterTermInetTerminatingAction) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterTermInetTerminatingAction.ProtoReflect.Descriptor instead.
func (*FilterTermInetTerminatingAction) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{55}
}

func (m *FilterTermInetTerminatingAction) GetTerminatingAction() isFilterTermInetTerminatingAction_TerminatingAction {
	if m != nil {
		return m.TerminatingAction
	}
	return nil
}

func (x *FilterTermInetTerminatingAction) GetAccept() bool {
	if x, ok := x.GetTerminatingAction().(*FilterTermInetTerminatingAction_Accept); ok {
		return x.Accept
	}
	return false
}

func (x *FilterTermInetTerminatingAction) GetDiscard() bool {
	if x, ok := x.GetTerminatingAction().(*FilterTermInetTerminatingAction_Discard); ok {
		return x.Discard
	}
	return false
}

func (x *FilterTermInetTerminatingAction) GetReject() ActionIcmpRejectReason {
	if x, ok := x.GetTerminatingAction().(*FilterTermInetTerminatingAction_Reject); ok {
		return x.Reject
	}
	return ActionIcmpRejectReason_ICMP_ADMINISTRATIVELY_PROHIBITED
}

func (x *FilterTermInetTerminatingAction) GetRoutingInstanceName() string {
	if x, ok := x.GetTerminatingAction().(*FilterTermInetTerminatingAction_RoutingInstanceName); ok {
		return x.RoutingInstanceName
	}
	return ""
}

type isFilterTermInetTerminatingAction_TerminatingAction interface {
	isFilterTermInetTerminatingAction_TerminatingAction()
}

type FilterTermInetTerminatingAction_Accept struct {
	// [brief]: Accept the matching packets
	Accept bool `protobuf:"varint,1,opt,name=accept,proto3,oneof"`
}

type FilterTermInetTerminatingAction_Discard struct {
	// [brief]: Discard the matching packets
	Discard bool `protobuf:"varint,2,opt,name=discard,proto3,oneof"`
}

type FilterTermInetTerminatingAction_Reject struct {
	// [brief]: Reject the matching packets
	Reject ActionIcmpRejectReason `protobuf:"varint,3,opt,name=reject,proto3,enum=jnx.jet.firewall.ActionIcmpRejectReason,oneof"`
}

type FilterTermInetTerminatingAction_RoutingInstanceName struct {
	// [brief]: user configured routing-instance name, eg. ___private2__.inet.0
	// [default]: by default points to default routing instance
	RoutingInstanceName string `protobuf:"bytes,4,opt,name=routing_instance_name,json=routingInstanceName,proto3,oneof"`
}

func (*FilterTermInetTerminatingAction_Accept) isFilterTermInetTerminatingAction_TerminatingAction() {
}

func (*FilterTermInetTerminatingAction_Discard) isFilterTermInetTerminatingAction_TerminatingAction() {
}

func (*FilterTermInetTerminatingAction_Reject) isFilterTermInetTerminatingAction_TerminatingAction() {
}

func (*FilterTermInetTerminatingAction_RoutingInstanceName) isFilterTermInetTerminatingAction_TerminatingAction() {
}

// [brief]: Inet family Inet non-terminating actions supported
// [detail]: Inet family Inet non-terminating actions supported
type FilterTermInetNonTerminatingAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Count the matching packets
	Count *ActionCounter `protobuf:"bytes,1,opt,name=count,proto3" json:"count,omitempty"`
	// [brief]: Log the matching packets
	Log bool `protobuf:"varint,2,opt,name=log,proto3" json:"log,omitempty"`
	// [brief]: Syslog the matching packets
	Syslog bool `protobuf:"varint,3,opt,name=syslog,proto3" json:"syslog,omitempty"`
	// [brief]: Policer action. Ensure that policer exists before it being used.
	Policer *ActionPolicer `protobuf:"bytes,4,opt,name=policer,proto3" json:"policer,omitempty"`
	// [brief]: Sample
	Sample bool `protobuf:"varint,5,opt,name=sample,proto3" json:"sample,omitempty"`
	// [brief]: Next Term
	NextTerm bool `protobuf:"varint,6,opt,name=next_term,json=nextTerm,proto3" json:"next_term,omitempty"`
}

func (x *FilterTermInetNonTerminatingAction) Reset() {
	*x = FilterTermInetNonTerminatingAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterTermInetNonTerminatingAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterTermInetNonTerminatingAction) ProtoMessage() {}

func (x *FilterTermInetNonTerminatingAction) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterTermInetNonTerminatingAction.ProtoReflect.Descriptor instead.
func (*FilterTermInetNonTerminatingAction) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{56}
}

func (x *FilterTermInetNonTerminatingAction) GetCount() *ActionCounter {
	if x != nil {
		return x.Count
	}
	return nil
}

func (x *FilterTermInetNonTerminatingAction) GetLog() bool {
	if x != nil {
		return x.Log
	}
	return false
}

func (x *FilterTermInetNonTerminatingAction) GetSyslog() bool {
	if x != nil {
		return x.Syslog
	}
	return false
}

func (x *FilterTermInetNonTerminatingAction) GetPolicer() *ActionPolicer {
	if x != nil {
		return x.Policer
	}
	return nil
}

func (x *FilterTermInetNonTerminatingAction) GetSample() bool {
	if x != nil {
		return x.Sample
	}
	return false
}

func (x *FilterTermInetNonTerminatingAction) GetNextTerm() bool {
	if x != nil {
		return x.NextTerm
	}
	return false
}

// [brief]: Filter Term Actions for Inet family Filter
// [detail]: An Filter list of Actions supported by Inet family Filter
type FilterTermInetAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: List of non-terminating actions.
	ActionsNt *FilterTermInetNonTerminatingAction `protobuf:"bytes,1,opt,name=actions_nt,json=actionsNt,proto3" json:"actions_nt,omitempty"`
	// [brief]: One terminating action
	ActionT *FilterTermInetTerminatingAction `protobuf:"bytes,2,opt,name=action_t,json=actionT,proto3" json:"action_t,omitempty"`
}

func (x *FilterTermInetAction) Reset() {
	*x = FilterTermInetAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterTermInetAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterTermInetAction) ProtoMessage() {}

func (x *FilterTermInetAction) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterTermInetAction.ProtoReflect.Descriptor instead.
func (*FilterTermInetAction) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{57}
}

func (x *FilterTermInetAction) GetActionsNt() *FilterTermInetNonTerminatingAction {
	if x != nil {
		return x.ActionsNt
	}
	return nil
}

func (x *FilterTermInetAction) GetActionT() *FilterTermInetTerminatingAction {
	if x != nil {
		return x.ActionT
	}
	return nil
}

// [brief]: An Inet Filter Term
// [detail]: An Inet Filter Term
type FilterInetTerm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: FilterTerm name
	TermName string `protobuf:"bytes,1,opt,name=term_name,json=termName,proto3" json:"term_name,omitempty"`
	// [brief]: FilterTerm operation
	TermOp FilterTermOperation `protobuf:"varint,2,opt,name=term_op,json=termOp,proto3,enum=jnx.jet.firewall.FilterTermOperation" json:"term_op,omitempty"`
	// [brief]: Adjacency
	Adjacency *FilterAdjacency `protobuf:"bytes,3,opt,name=adjacency,proto3" json:"adjacency,omitempty"`
	// [brief]: Matches
	Matches *FilterTermMatchInet `protobuf:"bytes,4,opt,name=matches,proto3" json:"matches,omitempty"`
	// [brief]: Actions
	Actions *FilterTermInetAction `protobuf:"bytes,5,opt,name=actions,proto3" json:"actions,omitempty"`
}

func (x *FilterInetTerm) Reset() {
	*x = FilterInetTerm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterInetTerm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterInetTerm) ProtoMessage() {}

func (x *FilterInetTerm) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterInetTerm.ProtoReflect.Descriptor instead.
func (*FilterInetTerm) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{58}
}

func (x *FilterInetTerm) GetTermName() string {
	if x != nil {
		return x.TermName
	}
	return ""
}

func (x *FilterInetTerm) GetTermOp() FilterTermOperation {
	if x != nil {
		return x.TermOp
	}
	return FilterTermOperation_TERM_OPERATION_INVALID
}

func (x *FilterInetTerm) GetAdjacency() *FilterAdjacency {
	if x != nil {
		return x.Adjacency
	}
	return nil
}

func (x *FilterInetTerm) GetMatches() *FilterTermMatchInet {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *FilterInetTerm) GetActions() *FilterTermInetAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

// [brief]: An Filter list of Matches for Ehthernet switching Family Filter
// [detail]: An Filter list of Matches for Ehthernet switching Family Filter
type FilterTermMatchEthernetSwitching struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: List of Destination mac addresses
	DstMacs []*MatchMacAddress `protobuf:"bytes,1,rep,name=dst_macs,json=dstMacs,proto3" json:"dst_macs,omitempty"`
	// [brief]: List of Source mac addresses
	SrcMacs []*MatchMacAddress `protobuf:"bytes,2,rep,name=src_macs,json=srcMacs,proto3" json:"src_macs,omitempty"`
	// [brief]: List of Destination ports
	DstPorts []*MatchPort `protobuf:"bytes,3,rep,name=dst_ports,json=dstPorts,proto3" json:"dst_ports,omitempty"`
	// [brief]: List of Source ports
	SrcPorts []*MatchPort `protobuf:"bytes,4,rep,name=src_ports,json=srcPorts,proto3" json:"src_ports,omitempty"`
	// [brief]: List of Dscp code points
	DscpCodes []*MatchDscpCode `protobuf:"bytes,5,rep,name=dscp_codes,json=dscpCodes,proto3" json:"dscp_codes,omitempty"`
	// [brief]: List of Protocols
	Protocols []*MatchProtocol `protobuf:"bytes,6,rep,name=protocols,proto3" json:"protocols,omitempty"`
	// [brief]: List of Icmp types
	IcmpTypes []*MatchIcmpType `protobuf:"bytes,7,rep,name=icmp_types,json=icmpTypes,proto3" json:"icmp_types,omitempty"`
	// [brief]: List of Icmp codes
	IcmpCodes []*MatchIcmpCode `protobuf:"bytes,8,rep,name=icmp_codes,json=icmpCodes,proto3" json:"icmp_codes,omitempty"`
	// [brief]: Interface unit (e.g. ge-0/0/1.0 or unit's index)
	InterfaceUnits []*MatchInterfaceUnit `protobuf:"bytes,9,rep,name=interface_units,json=interfaceUnits,proto3" json:"interface_units,omitempty"`
	// [brief]: List of Ether type
	EtherTypes []*MatchEtherType `protobuf:"bytes,10,rep,name=ether_types,json=etherTypes,proto3" json:"ether_types,omitempty"`
	// [brief]: List of Learn vlan id
	LearnVlanIds []*MatchLearnVlanId `protobuf:"bytes,11,rep,name=learn_vlan_ids,json=learnVlanIds,proto3" json:"learn_vlan_ids,omitempty"`
	// [brief]: List of learn vlan priority
	LearnVlanPriorities []*MatchLearnVlanPriority `protobuf:"bytes,12,rep,name=learn_vlan_priorities,json=learnVlanPriorities,proto3" json:"learn_vlan_priorities,omitempty"`
}

func (x *FilterTermMatchEthernetSwitching) Reset() {
	*x = FilterTermMatchEthernetSwitching{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterTermMatchEthernetSwitching) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterTermMatchEthernetSwitching) ProtoMessage() {}

func (x *FilterTermMatchEthernetSwitching) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterTermMatchEthernetSwitching.ProtoReflect.Descriptor instead.
func (*FilterTermMatchEthernetSwitching) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{59}
}

func (x *FilterTermMatchEthernetSwitching) GetDstMacs() []*MatchMacAddress {
	if x != nil {
		return x.DstMacs
	}
	return nil
}

func (x *FilterTermMatchEthernetSwitching) GetSrcMacs() []*MatchMacAddress {
	if x != nil {
		return x.SrcMacs
	}
	return nil
}

func (x *FilterTermMatchEthernetSwitching) GetDstPorts() []*MatchPort {
	if x != nil {
		return x.DstPorts
	}
	return nil
}

func (x *FilterTermMatchEthernetSwitching) GetSrcPorts() []*MatchPort {
	if x != nil {
		return x.SrcPorts
	}
	return nil
}

func (x *FilterTermMatchEthernetSwitching) GetDscpCodes() []*MatchDscpCode {
	if x != nil {
		return x.DscpCodes
	}
	return nil
}

func (x *FilterTermMatchEthernetSwitching) GetProtocols() []*MatchProtocol {
	if x != nil {
		return x.Protocols
	}
	return nil
}

func (x *FilterTermMatchEthernetSwitching) GetIcmpTypes() []*MatchIcmpType {
	if x != nil {
		return x.IcmpTypes
	}
	return nil
}

func (x *FilterTermMatchEthernetSwitching) GetIcmpCodes() []*MatchIcmpCode {
	if x != nil {
		return x.IcmpCodes
	}
	return nil
}

func (x *FilterTermMatchEthernetSwitching) GetInterfaceUnits() []*MatchInterfaceUnit {
	if x != nil {
		return x.InterfaceUnits
	}
	return nil
}

func (x *FilterTermMatchEthernetSwitching) GetEtherTypes() []*MatchEtherType {
	if x != nil {
		return x.EtherTypes
	}
	return nil
}

func (x *FilterTermMatchEthernetSwitching) GetLearnVlanIds() []*MatchLearnVlanId {
	if x != nil {
		return x.LearnVlanIds
	}
	return nil
}

func (x *FilterTermMatchEthernetSwitching) GetLearnVlanPriorities() []*MatchLearnVlanPriority {
	if x != nil {
		return x.LearnVlanPriorities
	}
	return nil
}

// [brief]: Ethernet Switching family terminating actions supported
// [detail]: Ethernet Switching family terminating actions supported
type FilterTermEsTerminatingAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Input configuration data in the relevant format.
	//
	// Types that are assignable to TerminatingAction:
	//	*FilterTermEsTerminatingAction_Accept
	//	*FilterTermEsTerminatingAction_Discard
	//	*FilterTermEsTerminatingAction_Nh
	//	*FilterTermEsTerminatingAction_SendToHost
	TerminatingAction isFilterTermEsTerminatingAction_TerminatingAction `protobuf_oneof:"terminating_action"`
}

func (x *FilterTermEsTerminatingAction) Reset() {
	*x = FilterTermEsTerminatingAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterTermEsTerminatingAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterTermEsTerminatingAction) ProtoMessage() {}

func (x *FilterTermEsTerminatingAction) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterTermEsTerminatingAction.ProtoReflect.Descriptor instead.
func (*FilterTermEsTerminatingAction) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{60}
}

func (m *FilterTermEsTerminatingAction) GetTerminatingAction() isFilterTermEsTerminatingAction_TerminatingAction {
	if m != nil {
		return m.TerminatingAction
	}
	return nil
}

func (x *FilterTermEsTerminatingAction) GetAccept() bool {
	if x, ok := x.GetTerminatingAction().(*FilterTermEsTerminatingAction_Accept); ok {
		return x.Accept
	}
	return false
}

func (x *FilterTermEsTerminatingAction) GetDiscard() bool {
	if x, ok := x.GetTerminatingAction().(*FilterTermEsTerminatingAction_Discard); ok {
		return x.Discard
	}
	return false
}

func (x *FilterTermEsTerminatingAction) GetNh() *ActionSetNexthop {
	if x, ok := x.GetTerminatingAction().(*FilterTermEsTerminatingAction_Nh); ok {
		return x.Nh
	}
	return nil
}

func (x *FilterTermEsTerminatingAction) GetSendToHost() bool {
	if x, ok := x.GetTerminatingAction().(*FilterTermEsTerminatingAction_SendToHost); ok {
		return x.SendToHost
	}
	return false
}

type isFilterTermEsTerminatingAction_TerminatingAction interface {
	isFilterTermEsTerminatingAction_TerminatingAction()
}

type FilterTermEsTerminatingAction_Accept struct {
	// [brief]: Accept the matching packets
	Accept bool `protobuf:"varint,1,opt,name=accept,proto3,oneof"`
}

type FilterTermEsTerminatingAction_Discard struct {
	// [brief]: Discard the matching packets
	Discard bool `protobuf:"varint,2,opt,name=discard,proto3,oneof"`
}

type FilterTermEsTerminatingAction_Nh struct {
	// [brief]: Next hop
	Nh *ActionSetNexthop `protobuf:"bytes,3,opt,name=nh,proto3,oneof"`
}

type FilterTermEsTerminatingAction_SendToHost struct {
	// [brief]: Send to host
	SendToHost bool `protobuf:"varint,4,opt,name=send_to_host,json=sendToHost,proto3,oneof"`
}

func (*FilterTermEsTerminatingAction_Accept) isFilterTermEsTerminatingAction_TerminatingAction() {}

func (*FilterTermEsTerminatingAction_Discard) isFilterTermEsTerminatingAction_TerminatingAction() {}

func (*FilterTermEsTerminatingAction_Nh) isFilterTermEsTerminatingAction_TerminatingAction() {}

func (*FilterTermEsTerminatingAction_SendToHost) isFilterTermEsTerminatingAction_TerminatingAction() {
}

// [brief]: Ethernet Switching family non-terminating actions supported
// [detail]: Ethernet Switching family non-terminating actions supported
type FilterTermEsNonTerminatingAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Count the matching packets
	Count *ActionCounter `protobuf:"bytes,1,opt,name=count,proto3" json:"count,omitempty"`
	// [brief]: Log the matching packets
	Log bool `protobuf:"varint,2,opt,name=log,proto3" json:"log,omitempty"`
	// [brief]: Syslog the matching packets
	Syslog bool `protobuf:"varint,3,opt,name=syslog,proto3" json:"syslog,omitempty"`
	// [brief]: Policer action. Ensure that policer exists before it being used.
	Policer *ActionPolicer `protobuf:"bytes,4,opt,name=policer,proto3" json:"policer,omitempty"`
	// [brief]: Next Term
	NextTerm bool `protobuf:"varint,5,opt,name=next_term,json=nextTerm,proto3" json:"next_term,omitempty"`
	// [brief]: Loss priority
	Lp *ActionLossPriority `protobuf:"bytes,6,opt,name=lp,proto3" json:"lp,omitempty"`
}

func (x *FilterTermEsNonTerminatingAction) Reset() {
	*x = FilterTermEsNonTerminatingAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterTermEsNonTerminatingAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterTermEsNonTerminatingAction) ProtoMessage() {}

func (x *FilterTermEsNonTerminatingAction) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterTermEsNonTerminatingAction.ProtoReflect.Descriptor instead.
func (*FilterTermEsNonTerminatingAction) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{61}
}

func (x *FilterTermEsNonTerminatingAction) GetCount() *ActionCounter {
	if x != nil {
		return x.Count
	}
	return nil
}

func (x *FilterTermEsNonTerminatingAction) GetLog() bool {
	if x != nil {
		return x.Log
	}
	return false
}

func (x *FilterTermEsNonTerminatingAction) GetSyslog() bool {
	if x != nil {
		return x.Syslog
	}
	return false
}

func (x *FilterTermEsNonTerminatingAction) GetPolicer() *ActionPolicer {
	if x != nil {
		return x.Policer
	}
	return nil
}

func (x *FilterTermEsNonTerminatingAction) GetNextTerm() bool {
	if x != nil {
		return x.NextTerm
	}
	return false
}

func (x *FilterTermEsNonTerminatingAction) GetLp() *ActionLossPriority {
	if x != nil {
		return x.Lp
	}
	return nil
}

// [brief]: Filter Term Actions for ES family Filter
// [detail]: An Filter list of Actions supported by ES family Filter
type FilterTermEsAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: List of non-terminating actions.
	ActionsNt *FilterTermEsNonTerminatingAction `protobuf:"bytes,1,opt,name=actions_nt,json=actionsNt,proto3" json:"actions_nt,omitempty"`
	// [brief]: One terminating action
	ActionT *FilterTermEsTerminatingAction `protobuf:"bytes,2,opt,name=action_t,json=actionT,proto3" json:"action_t,omitempty"`
}

func (x *FilterTermEsAction) Reset() {
	*x = FilterTermEsAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterTermEsAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterTermEsAction) ProtoMessage() {}

func (x *FilterTermEsAction) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterTermEsAction.ProtoReflect.Descriptor instead.
func (*FilterTermEsAction) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{62}
}

func (x *FilterTermEsAction) GetActionsNt() *FilterTermEsNonTerminatingAction {
	if x != nil {
		return x.ActionsNt
	}
	return nil
}

func (x *FilterTermEsAction) GetActionT() *FilterTermEsTerminatingAction {
	if x != nil {
		return x.ActionT
	}
	return nil
}

// [brief]: An Ethernet Switching Filter Term
// [detail]: An Ethernet Switching Filter Term
type FilterEsTerm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: FilterTerm name
	TermName string `protobuf:"bytes,1,opt,name=term_name,json=termName,proto3" json:"term_name,omitempty"`
	// [brief]: FilterTerm operation
	TermOp FilterTermOperation `protobuf:"varint,2,opt,name=term_op,json=termOp,proto3,enum=jnx.jet.firewall.FilterTermOperation" json:"term_op,omitempty"`
	// [brief]: Adjacency
	Adjacency *FilterAdjacency `protobuf:"bytes,3,opt,name=adjacency,proto3" json:"adjacency,omitempty"`
	// [brief]: Matches
	Matches *FilterTermMatchEthernetSwitching `protobuf:"bytes,4,opt,name=matches,proto3" json:"matches,omitempty"`
	// [brief]: Actions
	Actions *FilterTermEsAction `protobuf:"bytes,5,opt,name=actions,proto3" json:"actions,omitempty"`
}

func (x *FilterEsTerm) Reset() {
	*x = FilterEsTerm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterEsTerm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterEsTerm) ProtoMessage() {}

func (x *FilterEsTerm) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterEsTerm.ProtoReflect.Descriptor instead.
func (*FilterEsTerm) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{63}
}

func (x *FilterEsTerm) GetTermName() string {
	if x != nil {
		return x.TermName
	}
	return ""
}

func (x *FilterEsTerm) GetTermOp() FilterTermOperation {
	if x != nil {
		return x.TermOp
	}
	return FilterTermOperation_TERM_OPERATION_INVALID
}

func (x *FilterEsTerm) GetAdjacency() *FilterAdjacency {
	if x != nil {
		return x.Adjacency
	}
	return nil
}

func (x *FilterEsTerm) GetMatches() *FilterTermMatchEthernetSwitching {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *FilterEsTerm) GetActions() *FilterTermEsAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

// [brief]: An Filter list of Matches for Inet6 Family Filter
// [detail]: An Filter list of Matches for Inet6 Family Filter
type FilterTermMatchInet6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: List of Destination addresses
	Ipv6DstAddrs []*MatchIpAddress `protobuf:"bytes,1,rep,name=ipv6_dst_addrs,json=ipv6DstAddrs,proto3" json:"ipv6_dst_addrs,omitempty"`
	// [brief]: List of Source addresses
	Ipv6SrcAddrs []*MatchIpAddress `protobuf:"bytes,2,rep,name=ipv6_src_addrs,json=ipv6SrcAddrs,proto3" json:"ipv6_src_addrs,omitempty"`
	// [brief]: List of Destination ports
	DstPorts []*MatchPort `protobuf:"bytes,3,rep,name=dst_ports,json=dstPorts,proto3" json:"dst_ports,omitempty"`
	// [brief]: List of Source ports
	SrcPorts []*MatchPort `protobuf:"bytes,4,rep,name=src_ports,json=srcPorts,proto3" json:"src_ports,omitempty"`
	// [brief]: List of Dscp code points
	DscpCodes []*MatchDscpCode `protobuf:"bytes,5,rep,name=dscp_codes,json=dscpCodes,proto3" json:"dscp_codes,omitempty"`
	// [brief]: List of Protocols
	PayloadProtocols []*MatchProtocol `protobuf:"bytes,6,rep,name=payload_protocols,json=payloadProtocols,proto3" json:"payload_protocols,omitempty"`
	// [brief]: List of Icmp types
	IcmpTypes []*MatchIcmpType `protobuf:"bytes,7,rep,name=icmp_types,json=icmpTypes,proto3" json:"icmp_types,omitempty"`
	// [brief]: List of Icmp codes
	IcmpCodes []*MatchIcmpCode `protobuf:"bytes,8,rep,name=icmp_codes,json=icmpCodes,proto3" json:"icmp_codes,omitempty"`
	// [brief]: List of Packet lengths
	PacketLengths []*MatchPacketLength `protobuf:"bytes,9,rep,name=packet_lengths,json=packetLengths,proto3" json:"packet_lengths,omitempty"`
	// [brief]: Fragment flag
	FragmentFlag FilterFragmentFlags `protobuf:"varint,10,opt,name=fragment_flag,json=fragmentFlag,proto3,enum=jnx.jet.firewall.FilterFragmentFlags" json:"fragment_flag,omitempty"`
	// [brief]: Interface unit (e.g. ge-0/0/1.0 or unit's index)
	InterfaceUnits []*MatchInterfaceUnit `protobuf:"bytes,11,rep,name=interface_units,json=interfaceUnits,proto3" json:"interface_units,omitempty"`
	// [brief]: List of traffic classes
	TrafficClasses []*MatchTrafficClass `protobuf:"bytes,12,rep,name=traffic_classes,json=trafficClasses,proto3" json:"traffic_classes,omitempty"`
	// [brief]: List of Addresses
	Ipv6Addrs []*MatchIpAddress `protobuf:"bytes,13,rep,name=ipv6_addrs,json=ipv6Addrs,proto3" json:"ipv6_addrs,omitempty"`
	// [brief]: Flex Ranges
	FlexRange *MatchFlexibleOffsetRange `protobuf:"bytes,14,opt,name=flex_range,json=flexRange,proto3" json:"flex_range,omitempty"`
	// [brief]: Flex Masks
	FlexMask *MatchFlexibleOffsetMask `protobuf:"bytes,15,opt,name=flex_mask,json=flexMask,proto3" json:"flex_mask,omitempty"`
	// [brief]: List of Next Header match
	Ipv6NextHeaders []*MatchNextHeader `protobuf:"bytes,16,rep,name=ipv6_next_headers,json=ipv6NextHeaders,proto3" json:"ipv6_next_headers,omitempty"`
	// [brief]: List of Loss Priority
	LossPriorities []*MatchLossPriority `protobuf:"bytes,17,rep,name=loss_priorities,json=lossPriorities,proto3" json:"loss_priorities,omitempty"`
	// [brief]: List of Forwarding Class
	ForwardingClass []*MatchForwardingClass `protobuf:"bytes,18,rep,name=forwarding_class,json=forwardingClass,proto3" json:"forwarding_class,omitempty"`
	// [brief]: List of Ports
	Ports []*MatchPort `protobuf:"bytes,19,rep,name=ports,proto3" json:"ports,omitempty"`
}

func (x *FilterTermMatchInet6) Reset() {
	*x = FilterTermMatchInet6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterTermMatchInet6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterTermMatchInet6) ProtoMessage() {}

func (x *FilterTermMatchInet6) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterTermMatchInet6.ProtoReflect.Descriptor instead.
func (*FilterTermMatchInet6) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{64}
}

func (x *FilterTermMatchInet6) GetIpv6DstAddrs() []*MatchIpAddress {
	if x != nil {
		return x.Ipv6DstAddrs
	}
	return nil
}

func (x *FilterTermMatchInet6) GetIpv6SrcAddrs() []*MatchIpAddress {
	if x != nil {
		return x.Ipv6SrcAddrs
	}
	return nil
}

func (x *FilterTermMatchInet6) GetDstPorts() []*MatchPort {
	if x != nil {
		return x.DstPorts
	}
	return nil
}

func (x *FilterTermMatchInet6) GetSrcPorts() []*MatchPort {
	if x != nil {
		return x.SrcPorts
	}
	return nil
}

func (x *FilterTermMatchInet6) GetDscpCodes() []*MatchDscpCode {
	if x != nil {
		return x.DscpCodes
	}
	return nil
}

func (x *FilterTermMatchInet6) GetPayloadProtocols() []*MatchProtocol {
	if x != nil {
		return x.PayloadProtocols
	}
	return nil
}

func (x *FilterTermMatchInet6) GetIcmpTypes() []*MatchIcmpType {
	if x != nil {
		return x.IcmpTypes
	}
	return nil
}

func (x *FilterTermMatchInet6) GetIcmpCodes() []*MatchIcmpCode {
	if x != nil {
		return x.IcmpCodes
	}
	return nil
}

func (x *FilterTermMatchInet6) GetPacketLengths() []*MatchPacketLength {
	if x != nil {
		return x.PacketLengths
	}
	return nil
}

func (x *FilterTermMatchInet6) GetFragmentFlag() FilterFragmentFlags {
	if x != nil {
		return x.FragmentFlag
	}
	return FilterFragmentFlags_FRAGMENT_NONE
}

func (x *FilterTermMatchInet6) GetInterfaceUnits() []*MatchInterfaceUnit {
	if x != nil {
		return x.InterfaceUnits
	}
	return nil
}

func (x *FilterTermMatchInet6) GetTrafficClasses() []*MatchTrafficClass {
	if x != nil {
		return x.TrafficClasses
	}
	return nil
}

func (x *FilterTermMatchInet6) GetIpv6Addrs() []*MatchIpAddress {
	if x != nil {
		return x.Ipv6Addrs
	}
	return nil
}

func (x *FilterTermMatchInet6) GetFlexRange() *MatchFlexibleOffsetRange {
	if x != nil {
		return x.FlexRange
	}
	return nil
}

func (x *FilterTermMatchInet6) GetFlexMask() *MatchFlexibleOffsetMask {
	if x != nil {
		return x.FlexMask
	}
	return nil
}

func (x *FilterTermMatchInet6) GetIpv6NextHeaders() []*MatchNextHeader {
	if x != nil {
		return x.Ipv6NextHeaders
	}
	return nil
}

func (x *FilterTermMatchInet6) GetLossPriorities() []*MatchLossPriority {
	if x != nil {
		return x.LossPriorities
	}
	return nil
}

func (x *FilterTermMatchInet6) GetForwardingClass() []*MatchForwardingClass {
	if x != nil {
		return x.ForwardingClass
	}
	return nil
}

func (x *FilterTermMatchInet6) GetPorts() []*MatchPort {
	if x != nil {
		return x.Ports
	}
	return nil
}

// [brief]: inet6 family terminating actions supported
// [detail]: Inet6 family terminating actions supported
type FilterTermInet6TerminatingAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Config can allow only one terminating action.
	//
	// Types that are assignable to TerminatingAction:
	//	*FilterTermInet6TerminatingAction_Accept
	//	*FilterTermInet6TerminatingAction_Discard
	//	*FilterTermInet6TerminatingAction_Reject
	//	*FilterTermInet6TerminatingAction_RoutingInstanceName
	//	*FilterTermInet6TerminatingAction_TopoRedirect
	//	*FilterTermInet6TerminatingAction_SendToClient
	//	*FilterTermInet6TerminatingAction_SendToHost
	//	*FilterTermInet6TerminatingAction_Nh
	TerminatingAction isFilterTermInet6TerminatingAction_TerminatingAction `protobuf_oneof:"terminating_action"`
}

func (x *FilterTermInet6TerminatingAction) Reset() {
	*x = FilterTermInet6TerminatingAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterTermInet6TerminatingAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterTermInet6TerminatingAction) ProtoMessage() {}

func (x *FilterTermInet6TerminatingAction) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterTermInet6TerminatingAction.ProtoReflect.Descriptor instead.
func (*FilterTermInet6TerminatingAction) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{65}
}

func (m *FilterTermInet6TerminatingAction) GetTerminatingAction() isFilterTermInet6TerminatingAction_TerminatingAction {
	if m != nil {
		return m.TerminatingAction
	}
	return nil
}

func (x *FilterTermInet6TerminatingAction) GetAccept() bool {
	if x, ok := x.GetTerminatingAction().(*FilterTermInet6TerminatingAction_Accept); ok {
		return x.Accept
	}
	return false
}

func (x *FilterTermInet6TerminatingAction) GetDiscard() bool {
	if x, ok := x.GetTerminatingAction().(*FilterTermInet6TerminatingAction_Discard); ok {
		return x.Discard
	}
	return false
}

func (x *FilterTermInet6TerminatingAction) GetReject() ActionIcmp6RejectReason {
	if x, ok := x.GetTerminatingAction().(*FilterTermInet6TerminatingAction_Reject); ok {
		return x.Reject
	}
	return ActionIcmp6RejectReason_ICMP6_ADMINISTRATIVELY_PROHIBITED
}

func (x *FilterTermInet6TerminatingAction) GetRoutingInstanceName() string {
	if x, ok := x.GetTerminatingAction().(*FilterTermInet6TerminatingAction_RoutingInstanceName); ok {
		return x.RoutingInstanceName
	}
	return ""
}

func (x *FilterTermInet6TerminatingAction) GetTopoRedirect() *ActionTopologyRedirect {
	if x, ok := x.GetTerminatingAction().(*FilterTermInet6TerminatingAction_TopoRedirect); ok {
		return x.TopoRedirect
	}
	return nil
}

func (x *FilterTermInet6TerminatingAction) GetSendToClient() *ActionSendToClient {
	if x, ok := x.GetTerminatingAction().(*FilterTermInet6TerminatingAction_SendToClient); ok {
		return x.SendToClient
	}
	return nil
}

func (x *FilterTermInet6TerminatingAction) GetSendToHost() bool {
	if x, ok := x.GetTerminatingAction().(*FilterTermInet6TerminatingAction_SendToHost); ok {
		return x.SendToHost
	}
	return false
}

func (x *FilterTermInet6TerminatingAction) GetNh() *ActionSetNexthop {
	if x, ok := x.GetTerminatingAction().(*FilterTermInet6TerminatingAction_Nh); ok {
		return x.Nh
	}
	return nil
}

type isFilterTermInet6TerminatingAction_TerminatingAction interface {
	isFilterTermInet6TerminatingAction_TerminatingAction()
}

type FilterTermInet6TerminatingAction_Accept struct {
	// [brief]: Accept the matching packets
	Accept bool `protobuf:"varint,1,opt,name=accept,proto3,oneof"`
}

type FilterTermInet6TerminatingAction_Discard struct {
	// [brief]: Discard the matching packets
	Discard bool `protobuf:"varint,2,opt,name=discard,proto3,oneof"`
}

type FilterTermInet6TerminatingAction_Reject struct {
	// [brief]: Reject the matching packets
	Reject ActionIcmp6RejectReason `protobuf:"varint,3,opt,name=reject,proto3,enum=jnx.jet.firewall.ActionIcmp6RejectReason,oneof"`
}

type FilterTermInet6TerminatingAction_RoutingInstanceName struct {
	// [brief]: user configured routing-instance name, eg. ___private2__.inet.0
	// [default]: by default points to default routing instance
	RoutingInstanceName string `protobuf:"bytes,4,opt,name=routing_instance_name,json=routingInstanceName,proto3,oneof"`
}

type FilterTermInet6TerminatingAction_TopoRedirect struct {
	// [brief]: Direct matching packets to a routing instance
	TopoRedirect *ActionTopologyRedirect `protobuf:"bytes,5,opt,name=topo_redirect,json=topoRedirect,proto3,oneof"`
}

type FilterTermInet6TerminatingAction_SendToClient struct {
	// [brief]: client name
	SendToClient *ActionSendToClient `protobuf:"bytes,6,opt,name=send_to_client,json=sendToClient,proto3,oneof"`
}

type FilterTermInet6TerminatingAction_SendToHost struct {
	// [brief]: Direct matching packets to host
	SendToHost bool `protobuf:"varint,7,opt,name=send_to_host,json=sendToHost,proto3,oneof"`
}

type FilterTermInet6TerminatingAction_Nh struct {
	// [brief]: set nexthop idx
	Nh *ActionSetNexthop `protobuf:"bytes,8,opt,name=nh,proto3,oneof"`
}

func (*FilterTermInet6TerminatingAction_Accept) isFilterTermInet6TerminatingAction_TerminatingAction() {
}

func (*FilterTermInet6TerminatingAction_Discard) isFilterTermInet6TerminatingAction_TerminatingAction() {
}

func (*FilterTermInet6TerminatingAction_Reject) isFilterTermInet6TerminatingAction_TerminatingAction() {
}

func (*FilterTermInet6TerminatingAction_RoutingInstanceName) isFilterTermInet6TerminatingAction_TerminatingAction() {
}

func (*FilterTermInet6TerminatingAction_TopoRedirect) isFilterTermInet6TerminatingAction_TerminatingAction() {
}

func (*FilterTermInet6TerminatingAction_SendToClient) isFilterTermInet6TerminatingAction_TerminatingAction() {
}

func (*FilterTermInet6TerminatingAction_SendToHost) isFilterTermInet6TerminatingAction_TerminatingAction() {
}

func (*FilterTermInet6TerminatingAction_Nh) isFilterTermInet6TerminatingAction_TerminatingAction() {}

// [brief]: inet6 family non-terminating actions supported
// [detail]: Inet6 family non-terminating actions supported
type FilterTermInet6NonTerminatingAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Count the matching packets
	Count *ActionCounter `protobuf:"bytes,1,opt,name=count,proto3" json:"count,omitempty"`
	// [brief]: Log the matching packets
	Log bool `protobuf:"varint,2,opt,name=log,proto3" json:"log,omitempty"`
	// [brief]: Syslog the matching packets
	Syslog bool `protobuf:"varint,3,opt,name=syslog,proto3" json:"syslog,omitempty"`
	// [brief]: Policer action. Ensure that policer exists before it being used.
	Policer *ActionPolicer `protobuf:"bytes,4,opt,name=policer,proto3" json:"policer,omitempty"`
	// [brief]: Sample
	Sample bool `protobuf:"varint,5,opt,name=sample,proto3" json:"sample,omitempty"`
	// [brief]: Next Term
	NextTerm bool `protobuf:"varint,6,opt,name=next_term,json=nextTerm,proto3" json:"next_term,omitempty"`
	// [brief]: port mirror action
	PortMirror bool `protobuf:"varint,7,opt,name=port_mirror,json=portMirror,proto3" json:"port_mirror,omitempty"`
	// [brief]: set loss priority to matched packets
	LossPriority *ActionLossPriority `protobuf:"bytes,8,opt,name=loss_priority,json=lossPriority,proto3" json:"loss_priority,omitempty"`
	// [brief]: set Forwarding class to matched packets
	ForwardingClass *ActionForwardingClass `protobuf:"bytes,9,opt,name=forwarding_class,json=forwardingClass,proto3" json:"forwarding_class,omitempty"`
	// [brief]: set Forwarding Priority to matched packets
	ForwardingPriority *ActionForwardingPriority `protobuf:"bytes,10,opt,name=forwarding_priority,json=forwardingPriority,proto3" json:"forwarding_priority,omitempty"`
	// [brief]: set Next interface to matched packets
	NextInterface *ActionNextInterface `protobuf:"bytes,11,opt,name=next_interface,json=nextInterface,proto3" json:"next_interface,omitempty"`
	// [brief]: set Next IPv4 to matched packets
	NextIp *ActionNextIp `protobuf:"bytes,12,opt,name=next_ip,json=nextIp,proto3" json:"next_ip,omitempty"`
	// [brief]: set IP DSCP to matched packets
	IpDscp *ActionSetIpDscp `protobuf:"bytes,13,opt,name=ip_dscp,json=ipDscp,proto3" json:"ip_dscp,omitempty"`
	// [brief]: Copy of matching packets to host
	CopyToHost *ActionCopyToHost `protobuf:"bytes,14,opt,name=copy_to_host,json=copyToHost,proto3" json:"copy_to_host,omitempty"`
	// [brief]: Policer instance. Ensure that policer exists before it being used.
	PolicerInst *ActionPolicerInstance `protobuf:"bytes,15,opt,name=policer_inst,json=policerInst,proto3" json:"policer_inst,omitempty"`
}

func (x *FilterTermInet6NonTerminatingAction) Reset() {
	*x = FilterTermInet6NonTerminatingAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterTermInet6NonTerminatingAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterTermInet6NonTerminatingAction) ProtoMessage() {}

func (x *FilterTermInet6NonTerminatingAction) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterTermInet6NonTerminatingAction.ProtoReflect.Descriptor instead.
func (*FilterTermInet6NonTerminatingAction) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{66}
}

func (x *FilterTermInet6NonTerminatingAction) GetCount() *ActionCounter {
	if x != nil {
		return x.Count
	}
	return nil
}

func (x *FilterTermInet6NonTerminatingAction) GetLog() bool {
	if x != nil {
		return x.Log
	}
	return false
}

func (x *FilterTermInet6NonTerminatingAction) GetSyslog() bool {
	if x != nil {
		return x.Syslog
	}
	return false
}

func (x *FilterTermInet6NonTerminatingAction) GetPolicer() *ActionPolicer {
	if x != nil {
		return x.Policer
	}
	return nil
}

func (x *FilterTermInet6NonTerminatingAction) GetSample() bool {
	if x != nil {
		return x.Sample
	}
	return false
}

func (x *FilterTermInet6NonTerminatingAction) GetNextTerm() bool {
	if x != nil {
		return x.NextTerm
	}
	return false
}

func (x *FilterTermInet6NonTerminatingAction) GetPortMirror() bool {
	if x != nil {
		return x.PortMirror
	}
	return false
}

func (x *FilterTermInet6NonTerminatingAction) GetLossPriority() *ActionLossPriority {
	if x != nil {
		return x.LossPriority
	}
	return nil
}

func (x *FilterTermInet6NonTerminatingAction) GetForwardingClass() *ActionForwardingClass {
	if x != nil {
		return x.ForwardingClass
	}
	return nil
}

func (x *FilterTermInet6NonTerminatingAction) GetForwardingPriority() *ActionForwardingPriority {
	if x != nil {
		return x.ForwardingPriority
	}
	return nil
}

func (x *FilterTermInet6NonTerminatingAction) GetNextInterface() *ActionNextInterface {
	if x != nil {
		return x.NextInterface
	}
	return nil
}

func (x *FilterTermInet6NonTerminatingAction) GetNextIp() *ActionNextIp {
	if x != nil {
		return x.NextIp
	}
	return nil
}

func (x *FilterTermInet6NonTerminatingAction) GetIpDscp() *ActionSetIpDscp {
	if x != nil {
		return x.IpDscp
	}
	return nil
}

func (x *FilterTermInet6NonTerminatingAction) GetCopyToHost() *ActionCopyToHost {
	if x != nil {
		return x.CopyToHost
	}
	return nil
}

func (x *FilterTermInet6NonTerminatingAction) GetPolicerInst() *ActionPolicerInstance {
	if x != nil {
		return x.PolicerInst
	}
	return nil
}

// [brief]: Filter Term Actions for Inet6 family Filter
// [detail]: An Filter list of Actions supported by Inet6 family Filter
type FilterTermInet6Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: List of non-terminating actions.
	ActionsNt *FilterTermInet6NonTerminatingAction `protobuf:"bytes,1,opt,name=actions_nt,json=actionsNt,proto3" json:"actions_nt,omitempty"`
	// [brief]: One terminating action
	ActionT *FilterTermInet6TerminatingAction `protobuf:"bytes,2,opt,name=action_t,json=actionT,proto3" json:"action_t,omitempty"`
}

func (x *FilterTermInet6Action) Reset() {
	*x = FilterTermInet6Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterTermInet6Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterTermInet6Action) ProtoMessage() {}

func (x *FilterTermInet6Action) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterTermInet6Action.ProtoReflect.Descriptor instead.
func (*FilterTermInet6Action) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{67}
}

func (x *FilterTermInet6Action) GetActionsNt() *FilterTermInet6NonTerminatingAction {
	if x != nil {
		return x.ActionsNt
	}
	return nil
}

func (x *FilterTermInet6Action) GetActionT() *FilterTermInet6TerminatingAction {
	if x != nil {
		return x.ActionT
	}
	return nil
}

// [brief]: An Filter list of Matches for Vpls Family Filter
// [detail]: An Filter list of Matches for Vpls Family Filter
type FilterTermMatchVpls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: List of Destination addresses (V4)
	Ipv4DstAddrs []*MatchIpAddress `protobuf:"bytes,1,rep,name=ipv4_dst_addrs,json=ipv4DstAddrs,proto3" json:"ipv4_dst_addrs,omitempty"`
	// [brief]: List of Source addresses (V4)
	Ipv4SrcAddrs []*MatchIpAddress `protobuf:"bytes,2,rep,name=ipv4_src_addrs,json=ipv4SrcAddrs,proto3" json:"ipv4_src_addrs,omitempty"`
	// [brief]: List of Destination addresses (V6)
	Ipv6DstAddrs []*MatchIpAddress `protobuf:"bytes,3,rep,name=ipv6_dst_addrs,json=ipv6DstAddrs,proto3" json:"ipv6_dst_addrs,omitempty"`
	// [brief]: List of Source addresses (V6)
	Ipv6SrcAddrs []*MatchIpAddress `protobuf:"bytes,4,rep,name=ipv6_src_addrs,json=ipv6SrcAddrs,proto3" json:"ipv6_src_addrs,omitempty"`
	// [brief]: List of Destination ports
	DstPorts []*MatchPort `protobuf:"bytes,5,rep,name=dst_ports,json=dstPorts,proto3" json:"dst_ports,omitempty"`
	// [brief]: List of Source ports
	SrcPorts []*MatchPort `protobuf:"bytes,6,rep,name=src_ports,json=srcPorts,proto3" json:"src_ports,omitempty"`
	// [brief]: List of Dscp code points
	DscpCodes []*MatchDscpCode `protobuf:"bytes,7,rep,name=dscp_codes,json=dscpCodes,proto3" json:"dscp_codes,omitempty"`
	// [brief]: List of Protocols
	IpProtocols []*MatchProtocol `protobuf:"bytes,8,rep,name=ip_protocols,json=ipProtocols,proto3" json:"ip_protocols,omitempty"`
	// [brief]: List of Protocols
	PayloadProtocols []*MatchProtocol `protobuf:"bytes,9,rep,name=payload_protocols,json=payloadProtocols,proto3" json:"payload_protocols,omitempty"`
	// [brief]: List of Icmp types
	IcmpTypes []*MatchIcmpType `protobuf:"bytes,10,rep,name=icmp_types,json=icmpTypes,proto3" json:"icmp_types,omitempty"`
	// [brief]: List of Icmp codes
	IcmpCodes []*MatchIcmpCode `protobuf:"bytes,11,rep,name=icmp_codes,json=icmpCodes,proto3" json:"icmp_codes,omitempty"`
	// [brief]: Interface unit ( e.g. ge-0/0/1.0 or unit's index)
	InterfaceUnits []*MatchInterfaceUnit `protobuf:"bytes,12,rep,name=interface_units,json=interfaceUnits,proto3" json:"interface_units,omitempty"`
	// [brief]: List of traffic classes
	TrafficClasses []*MatchTrafficClass `protobuf:"bytes,13,rep,name=traffic_classes,json=trafficClasses,proto3" json:"traffic_classes,omitempty"`
	// [brief]: List of Next Header match
	Ipv6NextHeaders []*MatchNextHeader `protobuf:"bytes,14,rep,name=ipv6_next_headers,json=ipv6NextHeaders,proto3" json:"ipv6_next_headers,omitempty"`
	// [brief]: List of Ether type match
	EtherTypes []*MatchEtherType `protobuf:"bytes,15,rep,name=ether_types,json=etherTypes,proto3" json:"ether_types,omitempty"`
	// [brief]: List Source MAC match
	SrcMacs []*MatchMacAddress `protobuf:"bytes,16,rep,name=src_macs,json=srcMacs,proto3" json:"src_macs,omitempty"`
	// [brief]: List Destination MAC match
	DstMacs []*MatchMacAddress `protobuf:"bytes,17,rep,name=dst_macs,json=dstMacs,proto3" json:"dst_macs,omitempty"`
	// [brief]: List of Ether type match
	VlanEtherTypes []*MatchEtherType `protobuf:"bytes,18,rep,name=vlan_ether_types,json=vlanEtherTypes,proto3" json:"vlan_ether_types,omitempty"`
	// [brief]: List of Vlan Id match
	LearnVlanIds []*MatchVlanId `protobuf:"bytes,19,rep,name=learn_vlan_ids,json=learnVlanIds,proto3" json:"learn_vlan_ids,omitempty"`
	// [brief]: List of Vlan Id match
	UserVlanIds []*MatchVlanId `protobuf:"bytes,20,rep,name=user_vlan_ids,json=userVlanIds,proto3" json:"user_vlan_ids,omitempty"`
	// [brief]: List of Vlan Id match
	LearnVlanPriorities []*MatchLearnVlanPriority `protobuf:"bytes,21,rep,name=learn_vlan_priorities,json=learnVlanPriorities,proto3" json:"learn_vlan_priorities,omitempty"`
	// [brief]: STP state match
	StpState FilterStpMatchFlags `protobuf:"varint,22,opt,name=stp_state,json=stpState,proto3,enum=jnx.jet.firewall.FilterStpMatchFlags" json:"stp_state,omitempty"`
	// [brief]: List of mesh group id match
	MeshGroupIds []*MatchMeshGroup `protobuf:"bytes,23,rep,name=mesh_group_ids,json=meshGroupIds,proto3" json:"mesh_group_ids,omitempty"`
	// [brief]: List of CFM Opcode match
	CfmOpcodes []*MatchCfmOpcode `protobuf:"bytes,24,rep,name=cfm_opcodes,json=cfmOpcodes,proto3" json:"cfm_opcodes,omitempty"`
	// [brief]: List of CFM Level match
	CfmLevels []*MatchCfmLevel `protobuf:"bytes,25,rep,name=cfm_levels,json=cfmLevels,proto3" json:"cfm_levels,omitempty"`
	// [brief]: List of L2 token match
	L2Tokens []*MatchL2Token `protobuf:"bytes,26,rep,name=l2_tokens,json=l2Tokens,proto3" json:"l2_tokens,omitempty"`
	// [brief]: List of Ipv6 addresses (V6)
	Ipv6Addrs []*MatchIpAddress `protobuf:"bytes,27,rep,name=ipv6_addrs,json=ipv6Addrs,proto3" json:"ipv6_addrs,omitempty"`
	// [brief]: Flex Ranges
	FlexRange *MatchFlexibleOffsetRange `protobuf:"bytes,28,opt,name=flex_range,json=flexRange,proto3" json:"flex_range,omitempty"`
	// [brief]: Flex Masks
	FlexMask *MatchFlexibleOffsetMask `protobuf:"bytes,29,opt,name=flex_mask,json=flexMask,proto3" json:"flex_mask,omitempty"`
	// [brief]: List of Packet lengths
	PacketLengths []*MatchPacketLength `protobuf:"bytes,30,rep,name=packet_lengths,json=packetLengths,proto3" json:"packet_lengths,omitempty"`
}

func (x *FilterTermMatchVpls) Reset() {
	*x = FilterTermMatchVpls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterTermMatchVpls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterTermMatchVpls) ProtoMessage() {}

func (x *FilterTermMatchVpls) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterTermMatchVpls.ProtoReflect.Descriptor instead.
func (*FilterTermMatchVpls) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{68}
}

func (x *FilterTermMatchVpls) GetIpv4DstAddrs() []*MatchIpAddress {
	if x != nil {
		return x.Ipv4DstAddrs
	}
	return nil
}

func (x *FilterTermMatchVpls) GetIpv4SrcAddrs() []*MatchIpAddress {
	if x != nil {
		return x.Ipv4SrcAddrs
	}
	return nil
}

func (x *FilterTermMatchVpls) GetIpv6DstAddrs() []*MatchIpAddress {
	if x != nil {
		return x.Ipv6DstAddrs
	}
	return nil
}

func (x *FilterTermMatchVpls) GetIpv6SrcAddrs() []*MatchIpAddress {
	if x != nil {
		return x.Ipv6SrcAddrs
	}
	return nil
}

func (x *FilterTermMatchVpls) GetDstPorts() []*MatchPort {
	if x != nil {
		return x.DstPorts
	}
	return nil
}

func (x *FilterTermMatchVpls) GetSrcPorts() []*MatchPort {
	if x != nil {
		return x.SrcPorts
	}
	return nil
}

func (x *FilterTermMatchVpls) GetDscpCodes() []*MatchDscpCode {
	if x != nil {
		return x.DscpCodes
	}
	return nil
}

func (x *FilterTermMatchVpls) GetIpProtocols() []*MatchProtocol {
	if x != nil {
		return x.IpProtocols
	}
	return nil
}

func (x *FilterTermMatchVpls) GetPayloadProtocols() []*MatchProtocol {
	if x != nil {
		return x.PayloadProtocols
	}
	return nil
}

func (x *FilterTermMatchVpls) GetIcmpTypes() []*MatchIcmpType {
	if x != nil {
		return x.IcmpTypes
	}
	return nil
}

func (x *FilterTermMatchVpls) GetIcmpCodes() []*MatchIcmpCode {
	if x != nil {
		return x.IcmpCodes
	}
	return nil
}

func (x *FilterTermMatchVpls) GetInterfaceUnits() []*MatchInterfaceUnit {
	if x != nil {
		return x.InterfaceUnits
	}
	return nil
}

func (x *FilterTermMatchVpls) GetTrafficClasses() []*MatchTrafficClass {
	if x != nil {
		return x.TrafficClasses
	}
	return nil
}

func (x *FilterTermMatchVpls) GetIpv6NextHeaders() []*MatchNextHeader {
	if x != nil {
		return x.Ipv6NextHeaders
	}
	return nil
}

func (x *FilterTermMatchVpls) GetEtherTypes() []*MatchEtherType {
	if x != nil {
		return x.EtherTypes
	}
	return nil
}

func (x *FilterTermMatchVpls) GetSrcMacs() []*MatchMacAddress {
	if x != nil {
		return x.SrcMacs
	}
	return nil
}

func (x *FilterTermMatchVpls) GetDstMacs() []*MatchMacAddress {
	if x != nil {
		return x.DstMacs
	}
	return nil
}

func (x *FilterTermMatchVpls) GetVlanEtherTypes() []*MatchEtherType {
	if x != nil {
		return x.VlanEtherTypes
	}
	return nil
}

func (x *FilterTermMatchVpls) GetLearnVlanIds() []*MatchVlanId {
	if x != nil {
		return x.LearnVlanIds
	}
	return nil
}

func (x *FilterTermMatchVpls) GetUserVlanIds() []*MatchVlanId {
	if x != nil {
		return x.UserVlanIds
	}
	return nil
}

func (x *FilterTermMatchVpls) GetLearnVlanPriorities() []*MatchLearnVlanPriority {
	if x != nil {
		return x.LearnVlanPriorities
	}
	return nil
}

func (x *FilterTermMatchVpls) GetStpState() FilterStpMatchFlags {
	if x != nil {
		return x.StpState
	}
	return FilterStpMatchFlags_STP_FLAG_INVALID
}

func (x *FilterTermMatchVpls) GetMeshGroupIds() []*MatchMeshGroup {
	if x != nil {
		return x.MeshGroupIds
	}
	return nil
}

func (x *FilterTermMatchVpls) GetCfmOpcodes() []*MatchCfmOpcode {
	if x != nil {
		return x.CfmOpcodes
	}
	return nil
}

func (x *FilterTermMatchVpls) GetCfmLevels() []*MatchCfmLevel {
	if x != nil {
		return x.CfmLevels
	}
	return nil
}

func (x *FilterTermMatchVpls) GetL2Tokens() []*MatchL2Token {
	if x != nil {
		return x.L2Tokens
	}
	return nil
}

func (x *FilterTermMatchVpls) GetIpv6Addrs() []*MatchIpAddress {
	if x != nil {
		return x.Ipv6Addrs
	}
	return nil
}

func (x *FilterTermMatchVpls) GetFlexRange() *MatchFlexibleOffsetRange {
	if x != nil {
		return x.FlexRange
	}
	return nil
}

func (x *FilterTermMatchVpls) GetFlexMask() *MatchFlexibleOffsetMask {
	if x != nil {
		return x.FlexMask
	}
	return nil
}

func (x *FilterTermMatchVpls) GetPacketLengths() []*MatchPacketLength {
	if x != nil {
		return x.PacketLengths
	}
	return nil
}

// [brief]: Vpls family terminating actions supported
// [detail]: Vpls family terminating actions supported
type FilterTermVplsTerminatingAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Config can allow only one terminating action.
	//
	// Types that are assignable to TerminatingAction:
	//	*FilterTermVplsTerminatingAction_Accept
	//	*FilterTermVplsTerminatingAction_Discard
	//	*FilterTermVplsTerminatingAction_SendToClient
	//	*FilterTermVplsTerminatingAction_SendToHost
	//	*FilterTermVplsTerminatingAction_Nh
	TerminatingAction isFilterTermVplsTerminatingAction_TerminatingAction `protobuf_oneof:"terminating_action"`
}

func (x *FilterTermVplsTerminatingAction) Reset() {
	*x = FilterTermVplsTerminatingAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterTermVplsTerminatingAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterTermVplsTerminatingAction) ProtoMessage() {}

func (x *FilterTermVplsTerminatingAction) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterTermVplsTerminatingAction.ProtoReflect.Descriptor instead.
func (*FilterTermVplsTerminatingAction) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{69}
}

func (m *FilterTermVplsTerminatingAction) GetTerminatingAction() isFilterTermVplsTerminatingAction_TerminatingAction {
	if m != nil {
		return m.TerminatingAction
	}
	return nil
}

func (x *FilterTermVplsTerminatingAction) GetAccept() bool {
	if x, ok := x.GetTerminatingAction().(*FilterTermVplsTerminatingAction_Accept); ok {
		return x.Accept
	}
	return false
}

func (x *FilterTermVplsTerminatingAction) GetDiscard() bool {
	if x, ok := x.GetTerminatingAction().(*FilterTermVplsTerminatingAction_Discard); ok {
		return x.Discard
	}
	return false
}

func (x *FilterTermVplsTerminatingAction) GetSendToClient() *ActionSendToClient {
	if x, ok := x.GetTerminatingAction().(*FilterTermVplsTerminatingAction_SendToClient); ok {
		return x.SendToClient
	}
	return nil
}

func (x *FilterTermVplsTerminatingAction) GetSendToHost() bool {
	if x, ok := x.GetTerminatingAction().(*FilterTermVplsTerminatingAction_SendToHost); ok {
		return x.SendToHost
	}
	return false
}

func (x *FilterTermVplsTerminatingAction) GetNh() *ActionSetNexthop {
	if x, ok := x.GetTerminatingAction().(*FilterTermVplsTerminatingAction_Nh); ok {
		return x.Nh
	}
	return nil
}

type isFilterTermVplsTerminatingAction_TerminatingAction interface {
	isFilterTermVplsTerminatingAction_TerminatingAction()
}

type FilterTermVplsTerminatingAction_Accept struct {
	// [brief]: Accept the matching packets
	Accept bool `protobuf:"varint,1,opt,name=accept,proto3,oneof"`
}

type FilterTermVplsTerminatingAction_Discard struct {
	// [brief]: Discard the matching packets
	Discard bool `protobuf:"varint,2,opt,name=discard,proto3,oneof"`
}

type FilterTermVplsTerminatingAction_SendToClient struct {
	// [brief]: Direct matching packets to client
	SendToClient *ActionSendToClient `protobuf:"bytes,3,opt,name=send_to_client,json=sendToClient,proto3,oneof"`
}

type FilterTermVplsTerminatingAction_SendToHost struct {
	// [brief]: Direct matching packets to host
	SendToHost bool `protobuf:"varint,4,opt,name=send_to_host,json=sendToHost,proto3,oneof"`
}

type FilterTermVplsTerminatingAction_Nh struct {
	// [brief]: set nexthop idx
	Nh *ActionSetNexthop `protobuf:"bytes,5,opt,name=nh,proto3,oneof"`
}

func (*FilterTermVplsTerminatingAction_Accept) isFilterTermVplsTerminatingAction_TerminatingAction() {
}

func (*FilterTermVplsTerminatingAction_Discard) isFilterTermVplsTerminatingAction_TerminatingAction() {
}

func (*FilterTermVplsTerminatingAction_SendToClient) isFilterTermVplsTerminatingAction_TerminatingAction() {
}

func (*FilterTermVplsTerminatingAction_SendToHost) isFilterTermVplsTerminatingAction_TerminatingAction() {
}

func (*FilterTermVplsTerminatingAction_Nh) isFilterTermVplsTerminatingAction_TerminatingAction() {}

// [brief]: VPLS family non-terminating actions supported
// [detail]: VPLS family non-terminating actions supported
type FilterTermVplsNonTerminatingAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Count the matching packets
	Count *ActionCounter `protobuf:"bytes,1,opt,name=count,proto3" json:"count,omitempty"`
	// [brief]: Log the matching packets
	Log bool `protobuf:"varint,2,opt,name=log,proto3" json:"log,omitempty"`
	// [brief]: Syslog the matching packets
	Syslog bool `protobuf:"varint,3,opt,name=syslog,proto3" json:"syslog,omitempty"`
	// [brief]: Policer action. Ensure that policer exists before it being used.
	Policer *ActionPolicer `protobuf:"bytes,4,opt,name=policer,proto3" json:"policer,omitempty"`
	// [brief]: Sample
	Sample bool `protobuf:"varint,5,opt,name=sample,proto3" json:"sample,omitempty"`
	// [brief]: Next Term
	NextTerm bool `protobuf:"varint,6,opt,name=next_term,json=nextTerm,proto3" json:"next_term,omitempty"`
	// [brief]: No Mac Learn
	NoMacLearn bool `protobuf:"varint,7,opt,name=no_mac_learn,json=noMacLearn,proto3" json:"no_mac_learn,omitempty"`
	// [brief]: Copy of matching packets to host
	CopyToHost *ActionCopyToHost `protobuf:"bytes,8,opt,name=copy_to_host,json=copyToHost,proto3" json:"copy_to_host,omitempty"`
}

func (x *FilterTermVplsNonTerminatingAction) Reset() {
	*x = FilterTermVplsNonTerminatingAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterTermVplsNonTerminatingAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterTermVplsNonTerminatingAction) ProtoMessage() {}

func (x *FilterTermVplsNonTerminatingAction) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterTermVplsNonTerminatingAction.ProtoReflect.Descriptor instead.
func (*FilterTermVplsNonTerminatingAction) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{70}
}

func (x *FilterTermVplsNonTerminatingAction) GetCount() *ActionCounter {
	if x != nil {
		return x.Count
	}
	return nil
}

func (x *FilterTermVplsNonTerminatingAction) GetLog() bool {
	if x != nil {
		return x.Log
	}
	return false
}

func (x *FilterTermVplsNonTerminatingAction) GetSyslog() bool {
	if x != nil {
		return x.Syslog
	}
	return false
}

func (x *FilterTermVplsNonTerminatingAction) GetPolicer() *ActionPolicer {
	if x != nil {
		return x.Policer
	}
	return nil
}

func (x *FilterTermVplsNonTerminatingAction) GetSample() bool {
	if x != nil {
		return x.Sample
	}
	return false
}

func (x *FilterTermVplsNonTerminatingAction) GetNextTerm() bool {
	if x != nil {
		return x.NextTerm
	}
	return false
}

func (x *FilterTermVplsNonTerminatingAction) GetNoMacLearn() bool {
	if x != nil {
		return x.NoMacLearn
	}
	return false
}

func (x *FilterTermVplsNonTerminatingAction) GetCopyToHost() *ActionCopyToHost {
	if x != nil {
		return x.CopyToHost
	}
	return nil
}

// [brief]: Filter Term Actions for Vpls family Filter
// [detail]: An Filter list of Actions supported by Vpls family Filter
type FilterTermVplsAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: List of non-terminating actions.
	ActionsNt *FilterTermVplsNonTerminatingAction `protobuf:"bytes,1,opt,name=actions_nt,json=actionsNt,proto3" json:"actions_nt,omitempty"`
	// [brief]: One terminating action
	ActionT *FilterTermVplsTerminatingAction `protobuf:"bytes,2,opt,name=action_t,json=actionT,proto3" json:"action_t,omitempty"`
}

func (x *FilterTermVplsAction) Reset() {
	*x = FilterTermVplsAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterTermVplsAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterTermVplsAction) ProtoMessage() {}

func (x *FilterTermVplsAction) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterTermVplsAction.ProtoReflect.Descriptor instead.
func (*FilterTermVplsAction) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{71}
}

func (x *FilterTermVplsAction) GetActionsNt() *FilterTermVplsNonTerminatingAction {
	if x != nil {
		return x.ActionsNt
	}
	return nil
}

func (x *FilterTermVplsAction) GetActionT() *FilterTermVplsTerminatingAction {
	if x != nil {
		return x.ActionT
	}
	return nil
}

// [brief]: An Filter list of Matches for CCC Family Filter
// [detail]: An Filter list of Matches for CCC Family Filter
type FilterTermMatchCcc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: List of Packet lengths
	PacketLengths []*MatchPacketLength `protobuf:"bytes,1,rep,name=packet_lengths,json=packetLengths,proto3" json:"packet_lengths,omitempty"`
	// [brief]: Interface unit (e.g. ge-0/0/1.0 or unit's index)
	InterfaceUnits []*MatchInterfaceUnit `protobuf:"bytes,2,rep,name=interface_units,json=interfaceUnits,proto3" json:"interface_units,omitempty"`
	// [brief]: List of Ether type match
	EtherTypes []*MatchEtherType `protobuf:"bytes,3,rep,name=ether_types,json=etherTypes,proto3" json:"ether_types,omitempty"`
	// [brief]: List Source MAC match
	SrcMacs []*MatchMacAddress `protobuf:"bytes,4,rep,name=src_macs,json=srcMacs,proto3" json:"src_macs,omitempty"`
	// [brief]: List Destination MAC match
	DstMacs []*MatchMacAddress `protobuf:"bytes,5,rep,name=dst_macs,json=dstMacs,proto3" json:"dst_macs,omitempty"`
	// [brief]: List of CFM Opcode match
	CfmOpcodes []*MatchCfmOpcode `protobuf:"bytes,6,rep,name=cfm_opcodes,json=cfmOpcodes,proto3" json:"cfm_opcodes,omitempty"`
	// [brief]: List of CFM Level match
	CfmLevels []*MatchCfmLevel `protobuf:"bytes,7,rep,name=cfm_levels,json=cfmLevels,proto3" json:"cfm_levels,omitempty"`
	// [brief]: Flex Ranges
	FlexRange *MatchFlexibleOffsetRange `protobuf:"bytes,8,opt,name=flex_range,json=flexRange,proto3" json:"flex_range,omitempty"`
	// [brief]: Flex Masks
	FlexMask *MatchFlexibleOffsetMask `protobuf:"bytes,9,opt,name=flex_mask,json=flexMask,proto3" json:"flex_mask,omitempty"`
}

func (x *FilterTermMatchCcc) Reset() {
	*x = FilterTermMatchCcc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterTermMatchCcc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterTermMatchCcc) ProtoMessage() {}

func (x *FilterTermMatchCcc) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterTermMatchCcc.ProtoReflect.Descriptor instead.
func (*FilterTermMatchCcc) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{72}
}

func (x *FilterTermMatchCcc) GetPacketLengths() []*MatchPacketLength {
	if x != nil {
		return x.PacketLengths
	}
	return nil
}

func (x *FilterTermMatchCcc) GetInterfaceUnits() []*MatchInterfaceUnit {
	if x != nil {
		return x.InterfaceUnits
	}
	return nil
}

func (x *FilterTermMatchCcc) GetEtherTypes() []*MatchEtherType {
	if x != nil {
		return x.EtherTypes
	}
	return nil
}

func (x *FilterTermMatchCcc) GetSrcMacs() []*MatchMacAddress {
	if x != nil {
		return x.SrcMacs
	}
	return nil
}

func (x *FilterTermMatchCcc) GetDstMacs() []*MatchMacAddress {
	if x != nil {
		return x.DstMacs
	}
	return nil
}

func (x *FilterTermMatchCcc) GetCfmOpcodes() []*MatchCfmOpcode {
	if x != nil {
		return x.CfmOpcodes
	}
	return nil
}

func (x *FilterTermMatchCcc) GetCfmLevels() []*MatchCfmLevel {
	if x != nil {
		return x.CfmLevels
	}
	return nil
}

func (x *FilterTermMatchCcc) GetFlexRange() *MatchFlexibleOffsetRange {
	if x != nil {
		return x.FlexRange
	}
	return nil
}

func (x *FilterTermMatchCcc) GetFlexMask() *MatchFlexibleOffsetMask {
	if x != nil {
		return x.FlexMask
	}
	return nil
}

// [brief]: CCC family terminating actions supported
// [detail]: CCC family terminating actions supported
type FilterTermCccTerminatingAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Config can allow only one terminating action.
	//
	// Types that are assignable to TerminatingAction:
	//	*FilterTermCccTerminatingAction_Accept
	//	*FilterTermCccTerminatingAction_Discard
	//	*FilterTermCccTerminatingAction_SendToClient
	//	*FilterTermCccTerminatingAction_SendToHost
	TerminatingAction isFilterTermCccTerminatingAction_TerminatingAction `protobuf_oneof:"terminating_action"`
}

func (x *FilterTermCccTerminatingAction) Reset() {
	*x = FilterTermCccTerminatingAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterTermCccTerminatingAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterTermCccTerminatingAction) ProtoMessage() {}

func (x *FilterTermCccTerminatingAction) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterTermCccTerminatingAction.ProtoReflect.Descriptor instead.
func (*FilterTermCccTerminatingAction) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{73}
}

func (m *FilterTermCccTerminatingAction) GetTerminatingAction() isFilterTermCccTerminatingAction_TerminatingAction {
	if m != nil {
		return m.TerminatingAction
	}
	return nil
}

func (x *FilterTermCccTerminatingAction) GetAccept() bool {
	if x, ok := x.GetTerminatingAction().(*FilterTermCccTerminatingAction_Accept); ok {
		return x.Accept
	}
	return false
}

func (x *FilterTermCccTerminatingAction) GetDiscard() bool {
	if x, ok := x.GetTerminatingAction().(*FilterTermCccTerminatingAction_Discard); ok {
		return x.Discard
	}
	return false
}

func (x *FilterTermCccTerminatingAction) GetSendToClient() *ActionSendToClient {
	if x, ok := x.GetTerminatingAction().(*FilterTermCccTerminatingAction_SendToClient); ok {
		return x.SendToClient
	}
	return nil
}

func (x *FilterTermCccTerminatingAction) GetSendToHost() bool {
	if x, ok := x.GetTerminatingAction().(*FilterTermCccTerminatingAction_SendToHost); ok {
		return x.SendToHost
	}
	return false
}

type isFilterTermCccTerminatingAction_TerminatingAction interface {
	isFilterTermCccTerminatingAction_TerminatingAction()
}

type FilterTermCccTerminatingAction_Accept struct {
	// [brief]: Accept the matching packets
	Accept bool `protobuf:"varint,1,opt,name=accept,proto3,oneof"`
}

type FilterTermCccTerminatingAction_Discard struct {
	// [brief]: Discard the matching packets
	Discard bool `protobuf:"varint,2,opt,name=discard,proto3,oneof"`
}

type FilterTermCccTerminatingAction_SendToClient struct {
	// [brief]: Direct matching packets to client
	SendToClient *ActionSendToClient `protobuf:"bytes,3,opt,name=send_to_client,json=sendToClient,proto3,oneof"`
}

type FilterTermCccTerminatingAction_SendToHost struct {
	// [brief]: Direct matching packets to host
	SendToHost bool `protobuf:"varint,4,opt,name=send_to_host,json=sendToHost,proto3,oneof"`
}

func (*FilterTermCccTerminatingAction_Accept) isFilterTermCccTerminatingAction_TerminatingAction() {}

func (*FilterTermCccTerminatingAction_Discard) isFilterTermCccTerminatingAction_TerminatingAction() {}

func (*FilterTermCccTerminatingAction_SendToClient) isFilterTermCccTerminatingAction_TerminatingAction() {
}

func (*FilterTermCccTerminatingAction_SendToHost) isFilterTermCccTerminatingAction_TerminatingAction() {
}

// [brief]: CCC family non-terminating actions supported
// [detail]: CCC family non-terminating actions supported
type FilterTermCccNonTerminatingAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Count the matching packets
	Count *ActionCounter `protobuf:"bytes,1,opt,name=count,proto3" json:"count,omitempty"`
	// [brief]: Log the matching packets
	Log bool `protobuf:"varint,2,opt,name=log,proto3" json:"log,omitempty"`
	// [brief]: Syslog the matching packets
	Syslog bool `protobuf:"varint,3,opt,name=syslog,proto3" json:"syslog,omitempty"`
	// [brief]: Policer action. Ensure that policer exists before it being used.
	Policer *ActionPolicer `protobuf:"bytes,4,opt,name=policer,proto3" json:"policer,omitempty"`
	// [brief]: Sample
	Sample bool `protobuf:"varint,5,opt,name=sample,proto3" json:"sample,omitempty"`
	// [brief]: Copy of matching packets to host
	CopyToHost *ActionCopyToHost `protobuf:"bytes,6,opt,name=copy_to_host,json=copyToHost,proto3" json:"copy_to_host,omitempty"`
}

func (x *FilterTermCccNonTerminatingAction) Reset() {
	*x = FilterTermCccNonTerminatingAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterTermCccNonTerminatingAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterTermCccNonTerminatingAction) ProtoMessage() {}

func (x *FilterTermCccNonTerminatingAction) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterTermCccNonTerminatingAction.ProtoReflect.Descriptor instead.
func (*FilterTermCccNonTerminatingAction) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{74}
}

func (x *FilterTermCccNonTerminatingAction) GetCount() *ActionCounter {
	if x != nil {
		return x.Count
	}
	return nil
}

func (x *FilterTermCccNonTerminatingAction) GetLog() bool {
	if x != nil {
		return x.Log
	}
	return false
}

func (x *FilterTermCccNonTerminatingAction) GetSyslog() bool {
	if x != nil {
		return x.Syslog
	}
	return false
}

func (x *FilterTermCccNonTerminatingAction) GetPolicer() *ActionPolicer {
	if x != nil {
		return x.Policer
	}
	return nil
}

func (x *FilterTermCccNonTerminatingAction) GetSample() bool {
	if x != nil {
		return x.Sample
	}
	return false
}

func (x *FilterTermCccNonTerminatingAction) GetCopyToHost() *ActionCopyToHost {
	if x != nil {
		return x.CopyToHost
	}
	return nil
}

// [brief]: Filter Term Actions for CCC family Filter
// [detail]: An Filter list of Actions supported by CCC family Filter
type FilterTermCccAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: List of non-terminating actions.
	ActionsNt *FilterTermCccNonTerminatingAction `protobuf:"bytes,1,opt,name=actions_nt,json=actionsNt,proto3" json:"actions_nt,omitempty"`
	// [brief]: One terminating action
	ActionT *FilterTermCccTerminatingAction `protobuf:"bytes,2,opt,name=action_t,json=actionT,proto3" json:"action_t,omitempty"`
}

func (x *FilterTermCccAction) Reset() {
	*x = FilterTermCccAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterTermCccAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterTermCccAction) ProtoMessage() {}

func (x *FilterTermCccAction) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterTermCccAction.ProtoReflect.Descriptor instead.
func (*FilterTermCccAction) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{75}
}

func (x *FilterTermCccAction) GetActionsNt() *FilterTermCccNonTerminatingAction {
	if x != nil {
		return x.ActionsNt
	}
	return nil
}

func (x *FilterTermCccAction) GetActionT() *FilterTermCccTerminatingAction {
	if x != nil {
		return x.ActionT
	}
	return nil
}

// [brief]: An Filter list of Matches for Multiservices Family Filter
// [detail]: An Filter list of Matches for Multiservices Family Filter
type FilterTermMatchMultiService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: List of Destination addresses (V4)
	Ipv4DstAddrs []*MatchIpAddress `protobuf:"bytes,1,rep,name=ipv4_dst_addrs,json=ipv4DstAddrs,proto3" json:"ipv4_dst_addrs,omitempty"`
	// [brief]: List of Source addresses (V4)
	Ipv4SrcAddrs []*MatchIpAddress `protobuf:"bytes,2,rep,name=ipv4_src_addrs,json=ipv4SrcAddrs,proto3" json:"ipv4_src_addrs,omitempty"`
	// [brief]: List of addresses (V4)
	Ipv4Addrs []*MatchIpAddress `protobuf:"bytes,3,rep,name=ipv4_addrs,json=ipv4Addrs,proto3" json:"ipv4_addrs,omitempty"`
	// [brief]: List of Destination ports
	DstPorts []*MatchPort `protobuf:"bytes,4,rep,name=dst_ports,json=dstPorts,proto3" json:"dst_ports,omitempty"`
	// [brief]: List of Source ports
	SrcPorts []*MatchPort `protobuf:"bytes,5,rep,name=src_ports,json=srcPorts,proto3" json:"src_ports,omitempty"`
	// [brief]: List of Protocols
	IpProtocols []*MatchProtocol `protobuf:"bytes,6,rep,name=ip_protocols,json=ipProtocols,proto3" json:"ip_protocols,omitempty"`
	// [brief]: List of Protocols
	PayloadProtocols []*MatchProtocol `protobuf:"bytes,7,rep,name=payload_protocols,json=payloadProtocols,proto3" json:"payload_protocols,omitempty"`
	// [brief]: List of Icmp types
	IcmpTypes []*MatchIcmpType `protobuf:"bytes,8,rep,name=icmp_types,json=icmpTypes,proto3" json:"icmp_types,omitempty"`
	// [brief]: List of Icmp codes
	IcmpCodes []*MatchIcmpCode `protobuf:"bytes,9,rep,name=icmp_codes,json=icmpCodes,proto3" json:"icmp_codes,omitempty"`
	// [brief]: Interface unit (e.g. ge-0/0/1.0 or unit's index)
	InterfaceUnits []*MatchInterfaceUnit `protobuf:"bytes,10,rep,name=interface_units,json=interfaceUnits,proto3" json:"interface_units,omitempty"`
	// [brief]: List of Next Header match
	Ipv6NextHeaders []*MatchNextHeader `protobuf:"bytes,11,rep,name=ipv6_next_headers,json=ipv6NextHeaders,proto3" json:"ipv6_next_headers,omitempty"`
	// [brief]: List of Ether type match
	EtherTypes []*MatchEtherType `protobuf:"bytes,12,rep,name=ether_types,json=etherTypes,proto3" json:"ether_types,omitempty"`
	// [brief]: List Source MAC match
	SrcMacs []*MatchMacAddress `protobuf:"bytes,13,rep,name=src_macs,json=srcMacs,proto3" json:"src_macs,omitempty"`
	// [brief]: List Destination MAC match
	DstMacs []*MatchMacAddress `protobuf:"bytes,14,rep,name=dst_macs,json=dstMacs,proto3" json:"dst_macs,omitempty"`
	// [brief]: List of Ether type match
	VlanEtherTypes []*MatchEtherType `protobuf:"bytes,15,rep,name=vlan_ether_types,json=vlanEtherTypes,proto3" json:"vlan_ether_types,omitempty"`
	// [brief]: STP state match
	StpState FilterStpMatchFlags `protobuf:"varint,16,opt,name=stp_state,json=stpState,proto3,enum=jnx.jet.firewall.FilterStpMatchFlags" json:"stp_state,omitempty"`
	// [brief]: List of mesh group id match
	MeshGroupIds []*MatchMeshGroup `protobuf:"bytes,17,rep,name=mesh_group_ids,json=meshGroupIds,proto3" json:"mesh_group_ids,omitempty"`
	// [brief]: List of L2 token match
	L2Tokens []*MatchL2Token `protobuf:"bytes,18,rep,name=l2_tokens,json=l2Tokens,proto3" json:"l2_tokens,omitempty"`
	// [brief]: List of Packet lengths
	PacketLengths []*MatchPacketLength `protobuf:"bytes,19,rep,name=packet_lengths,json=packetLengths,proto3" json:"packet_lengths,omitempty"`
}

func (x *FilterTermMatchMultiService) Reset() {
	*x = FilterTermMatchMultiService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterTermMatchMultiService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterTermMatchMultiService) ProtoMessage() {}

func (x *FilterTermMatchMultiService) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterTermMatchMultiService.ProtoReflect.Descriptor instead.
func (*FilterTermMatchMultiService) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{76}
}

func (x *FilterTermMatchMultiService) GetIpv4DstAddrs() []*MatchIpAddress {
	if x != nil {
		return x.Ipv4DstAddrs
	}
	return nil
}

func (x *FilterTermMatchMultiService) GetIpv4SrcAddrs() []*MatchIpAddress {
	if x != nil {
		return x.Ipv4SrcAddrs
	}
	return nil
}

func (x *FilterTermMatchMultiService) GetIpv4Addrs() []*MatchIpAddress {
	if x != nil {
		return x.Ipv4Addrs
	}
	return nil
}

func (x *FilterTermMatchMultiService) GetDstPorts() []*MatchPort {
	if x != nil {
		return x.DstPorts
	}
	return nil
}

func (x *FilterTermMatchMultiService) GetSrcPorts() []*MatchPort {
	if x != nil {
		return x.SrcPorts
	}
	return nil
}

func (x *FilterTermMatchMultiService) GetIpProtocols() []*MatchProtocol {
	if x != nil {
		return x.IpProtocols
	}
	return nil
}

func (x *FilterTermMatchMultiService) GetPayloadProtocols() []*MatchProtocol {
	if x != nil {
		return x.PayloadProtocols
	}
	return nil
}

func (x *FilterTermMatchMultiService) GetIcmpTypes() []*MatchIcmpType {
	if x != nil {
		return x.IcmpTypes
	}
	return nil
}

func (x *FilterTermMatchMultiService) GetIcmpCodes() []*MatchIcmpCode {
	if x != nil {
		return x.IcmpCodes
	}
	return nil
}

func (x *FilterTermMatchMultiService) GetInterfaceUnits() []*MatchInterfaceUnit {
	if x != nil {
		return x.InterfaceUnits
	}
	return nil
}

func (x *FilterTermMatchMultiService) GetIpv6NextHeaders() []*MatchNextHeader {
	if x != nil {
		return x.Ipv6NextHeaders
	}
	return nil
}

func (x *FilterTermMatchMultiService) GetEtherTypes() []*MatchEtherType {
	if x != nil {
		return x.EtherTypes
	}
	return nil
}

func (x *FilterTermMatchMultiService) GetSrcMacs() []*MatchMacAddress {
	if x != nil {
		return x.SrcMacs
	}
	return nil
}

func (x *FilterTermMatchMultiService) GetDstMacs() []*MatchMacAddress {
	if x != nil {
		return x.DstMacs
	}
	return nil
}

func (x *FilterTermMatchMultiService) GetVlanEtherTypes() []*MatchEtherType {
	if x != nil {
		return x.VlanEtherTypes
	}
	return nil
}

func (x *FilterTermMatchMultiService) GetStpState() FilterStpMatchFlags {
	if x != nil {
		return x.StpState
	}
	return FilterStpMatchFlags_STP_FLAG_INVALID
}

func (x *FilterTermMatchMultiService) GetMeshGroupIds() []*MatchMeshGroup {
	if x != nil {
		return x.MeshGroupIds
	}
	return nil
}

func (x *FilterTermMatchMultiService) GetL2Tokens() []*MatchL2Token {
	if x != nil {
		return x.L2Tokens
	}
	return nil
}

func (x *FilterTermMatchMultiService) GetPacketLengths() []*MatchPacketLength {
	if x != nil {
		return x.PacketLengths
	}
	return nil
}

// [brief]: Multiservices family terminating actions supported
// [detail]: Multiservices family terminating actions supported
type FilterTermMultiServiceTerminatingAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Config can allow only one terminating action.
	//
	// Types that are assignable to TerminatingAction:
	//	*FilterTermMultiServiceTerminatingAction_Accept
	//	*FilterTermMultiServiceTerminatingAction_Discard
	//	*FilterTermMultiServiceTerminatingAction_SendToClient
	//	*FilterTermMultiServiceTerminatingAction_SendToHost
	TerminatingAction isFilterTermMultiServiceTerminatingAction_TerminatingAction `protobuf_oneof:"terminating_action"`
}

func (x *FilterTermMultiServiceTerminatingAction) Reset() {
	*x = FilterTermMultiServiceTerminatingAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterTermMultiServiceTerminatingAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterTermMultiServiceTerminatingAction) ProtoMessage() {}

func (x *FilterTermMultiServiceTerminatingAction) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterTermMultiServiceTerminatingAction.ProtoReflect.Descriptor instead.
func (*FilterTermMultiServiceTerminatingAction) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{77}
}

func (m *FilterTermMultiServiceTerminatingAction) GetTerminatingAction() isFilterTermMultiServiceTerminatingAction_TerminatingAction {
	if m != nil {
		return m.TerminatingAction
	}
	return nil
}

func (x *FilterTermMultiServiceTerminatingAction) GetAccept() bool {
	if x, ok := x.GetTerminatingAction().(*FilterTermMultiServiceTerminatingAction_Accept); ok {
		return x.Accept
	}
	return false
}

func (x *FilterTermMultiServiceTerminatingAction) GetDiscard() bool {
	if x, ok := x.GetTerminatingAction().(*FilterTermMultiServiceTerminatingAction_Discard); ok {
		return x.Discard
	}
	return false
}

func (x *FilterTermMultiServiceTerminatingAction) GetSendToClient() *ActionSendToClient {
	if x, ok := x.GetTerminatingAction().(*FilterTermMultiServiceTerminatingAction_SendToClient); ok {
		return x.SendToClient
	}
	return nil
}

func (x *FilterTermMultiServiceTerminatingAction) GetSendToHost() bool {
	if x, ok := x.GetTerminatingAction().(*FilterTermMultiServiceTerminatingAction_SendToHost); ok {
		return x.SendToHost
	}
	return false
}

type isFilterTermMultiServiceTerminatingAction_TerminatingAction interface {
	isFilterTermMultiServiceTerminatingAction_TerminatingAction()
}

type FilterTermMultiServiceTerminatingAction_Accept struct {
	// [brief]: Accept the matching packets
	Accept bool `protobuf:"varint,1,opt,name=accept,proto3,oneof"`
}

type FilterTermMultiServiceTerminatingAction_Discard struct {
	// [brief]: Discard the matching packets
	Discard bool `protobuf:"varint,2,opt,name=discard,proto3,oneof"`
}

type FilterTermMultiServiceTerminatingAction_SendToClient struct {
	// [brief]: Direct matching packets to client
	SendToClient *ActionSendToClient `protobuf:"bytes,3,opt,name=send_to_client,json=sendToClient,proto3,oneof"`
}

type FilterTermMultiServiceTerminatingAction_SendToHost struct {
	// [brief]: Direct matching packets to host
	SendToHost bool `protobuf:"varint,4,opt,name=send_to_host,json=sendToHost,proto3,oneof"`
}

func (*FilterTermMultiServiceTerminatingAction_Accept) isFilterTermMultiServiceTerminatingAction_TerminatingAction() {
}

func (*FilterTermMultiServiceTerminatingAction_Discard) isFilterTermMultiServiceTerminatingAction_TerminatingAction() {
}

func (*FilterTermMultiServiceTerminatingAction_SendToClient) isFilterTermMultiServiceTerminatingAction_TerminatingAction() {
}

func (*FilterTermMultiServiceTerminatingAction_SendToHost) isFilterTermMultiServiceTerminatingAction_TerminatingAction() {
}

// [brief]: Multiservices family non-terminating actions supported
// [detail]: Multiservices family non-terminating actions supported
type FilterTermMultiServiceNonTerminatingAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Count the matching packets
	Count *ActionCounter `protobuf:"bytes,1,opt,name=count,proto3" json:"count,omitempty"`
	// [brief]: Log the matching packets
	Log bool `protobuf:"varint,2,opt,name=log,proto3" json:"log,omitempty"`
	// [brief]: Syslog the matching packets
	Syslog bool `protobuf:"varint,3,opt,name=syslog,proto3" json:"syslog,omitempty"`
	// [brief]: Policer Action. Ensure that policer exists before it being used.
	Policer *ActionPolicer `protobuf:"bytes,4,opt,name=policer,proto3" json:"policer,omitempty"`
	// [brief]: Sample
	Sample bool `protobuf:"varint,5,opt,name=sample,proto3" json:"sample,omitempty"`
	// [brief]: Next Term
	NextTerm bool `protobuf:"varint,6,opt,name=next_term,json=nextTerm,proto3" json:"next_term,omitempty"`
	// [brief]: Copy of matching packets to host
	CopyToHost *ActionCopyToHost `protobuf:"bytes,7,opt,name=copy_to_host,json=copyToHost,proto3" json:"copy_to_host,omitempty"`
}

func (x *FilterTermMultiServiceNonTerminatingAction) Reset() {
	*x = FilterTermMultiServiceNonTerminatingAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterTermMultiServiceNonTerminatingAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterTermMultiServiceNonTerminatingAction) ProtoMessage() {}

func (x *FilterTermMultiServiceNonTerminatingAction) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterTermMultiServiceNonTerminatingAction.ProtoReflect.Descriptor instead.
func (*FilterTermMultiServiceNonTerminatingAction) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{78}
}

func (x *FilterTermMultiServiceNonTerminatingAction) GetCount() *ActionCounter {
	if x != nil {
		return x.Count
	}
	return nil
}

func (x *FilterTermMultiServiceNonTerminatingAction) GetLog() bool {
	if x != nil {
		return x.Log
	}
	return false
}

func (x *FilterTermMultiServiceNonTerminatingAction) GetSyslog() bool {
	if x != nil {
		return x.Syslog
	}
	return false
}

func (x *FilterTermMultiServiceNonTerminatingAction) GetPolicer() *ActionPolicer {
	if x != nil {
		return x.Policer
	}
	return nil
}

func (x *FilterTermMultiServiceNonTerminatingAction) GetSample() bool {
	if x != nil {
		return x.Sample
	}
	return false
}

func (x *FilterTermMultiServiceNonTerminatingAction) GetNextTerm() bool {
	if x != nil {
		return x.NextTerm
	}
	return false
}

func (x *FilterTermMultiServiceNonTerminatingAction) GetCopyToHost() *ActionCopyToHost {
	if x != nil {
		return x.CopyToHost
	}
	return nil
}

// [brief]: Filter Term Actions for Multiservices family Filter
// [detail]: An Filter list of Actions supported by Multiservices family Filter
type FilterTermMultiServiceAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: List of non-terminating actions.
	ActionsNt *FilterTermMultiServiceNonTerminatingAction `protobuf:"bytes,1,opt,name=actions_nt,json=actionsNt,proto3" json:"actions_nt,omitempty"`
	// [brief]: One terminating action
	ActionT *FilterTermMultiServiceTerminatingAction `protobuf:"bytes,2,opt,name=action_t,json=actionT,proto3" json:"action_t,omitempty"`
}

func (x *FilterTermMultiServiceAction) Reset() {
	*x = FilterTermMultiServiceAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterTermMultiServiceAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterTermMultiServiceAction) ProtoMessage() {}

func (x *FilterTermMultiServiceAction) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterTermMultiServiceAction.ProtoReflect.Descriptor instead.
func (*FilterTermMultiServiceAction) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{79}
}

func (x *FilterTermMultiServiceAction) GetActionsNt() *FilterTermMultiServiceNonTerminatingAction {
	if x != nil {
		return x.ActionsNt
	}
	return nil
}

func (x *FilterTermMultiServiceAction) GetActionT() *FilterTermMultiServiceTerminatingAction {
	if x != nil {
		return x.ActionT
	}
	return nil
}

// [brief]: An Filter list of Matches for MPLS Family Filter
// [detail]: An Filter list of Matches for MPLS Family Filter
type FilterTermMatchMpls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Label-1 match
	Labels1 []*MatchMplsLabel `protobuf:"bytes,1,rep,name=labels1,proto3" json:"labels1,omitempty"`
	// [brief]: Label-2 match
	Labels2 []*MatchMplsLabel `protobuf:"bytes,2,rep,name=labels2,proto3" json:"labels2,omitempty"`
	// [brief]: Label-3 match
	Labels3 []*MatchMplsLabel `protobuf:"bytes,3,rep,name=labels3,proto3" json:"labels3,omitempty"`
	// [brief]: Flex Ranges
	FlexRange *MatchFlexibleOffsetRange `protobuf:"bytes,4,opt,name=flex_range,json=flexRange,proto3" json:"flex_range,omitempty"`
	// [brief]: Flex Masks
	FlexMask *MatchFlexibleOffsetMask `protobuf:"bytes,5,opt,name=flex_mask,json=flexMask,proto3" json:"flex_mask,omitempty"`
}

func (x *FilterTermMatchMpls) Reset() {
	*x = FilterTermMatchMpls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterTermMatchMpls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterTermMatchMpls) ProtoMessage() {}

func (x *FilterTermMatchMpls) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterTermMatchMpls.ProtoReflect.Descriptor instead.
func (*FilterTermMatchMpls) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{80}
}

func (x *FilterTermMatchMpls) GetLabels1() []*MatchMplsLabel {
	if x != nil {
		return x.Labels1
	}
	return nil
}

func (x *FilterTermMatchMpls) GetLabels2() []*MatchMplsLabel {
	if x != nil {
		return x.Labels2
	}
	return nil
}

func (x *FilterTermMatchMpls) GetLabels3() []*MatchMplsLabel {
	if x != nil {
		return x.Labels3
	}
	return nil
}

func (x *FilterTermMatchMpls) GetFlexRange() *MatchFlexibleOffsetRange {
	if x != nil {
		return x.FlexRange
	}
	return nil
}

func (x *FilterTermMatchMpls) GetFlexMask() *MatchFlexibleOffsetMask {
	if x != nil {
		return x.FlexMask
	}
	return nil
}

// [brief]: Mpls family terminating actions supported
// [detail]: Mpls family terminating actions supported
type FilterTermMplsTerminatingAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Config can allow only one terminating action.
	//
	// Types that are assignable to TerminatingAction:
	//	*FilterTermMplsTerminatingAction_Accept
	//	*FilterTermMplsTerminatingAction_Discard
	TerminatingAction isFilterTermMplsTerminatingAction_TerminatingAction `protobuf_oneof:"terminating_action"`
}

func (x *FilterTermMplsTerminatingAction) Reset() {
	*x = FilterTermMplsTerminatingAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterTermMplsTerminatingAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterTermMplsTerminatingAction) ProtoMessage() {}

func (x *FilterTermMplsTerminatingAction) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterTermMplsTerminatingAction.ProtoReflect.Descriptor instead.
func (*FilterTermMplsTerminatingAction) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{81}
}

func (m *FilterTermMplsTerminatingAction) GetTerminatingAction() isFilterTermMplsTerminatingAction_TerminatingAction {
	if m != nil {
		return m.TerminatingAction
	}
	return nil
}

func (x *FilterTermMplsTerminatingAction) GetAccept() bool {
	if x, ok := x.GetTerminatingAction().(*FilterTermMplsTerminatingAction_Accept); ok {
		return x.Accept
	}
	return false
}

func (x *FilterTermMplsTerminatingAction) GetDiscard() bool {
	if x, ok := x.GetTerminatingAction().(*FilterTermMplsTerminatingAction_Discard); ok {
		return x.Discard
	}
	return false
}

type isFilterTermMplsTerminatingAction_TerminatingAction interface {
	isFilterTermMplsTerminatingAction_TerminatingAction()
}

type FilterTermMplsTerminatingAction_Accept struct {
	// [brief]: Accept the matching packets
	Accept bool `protobuf:"varint,1,opt,name=accept,proto3,oneof"`
}

type FilterTermMplsTerminatingAction_Discard struct {
	// [brief]: Discard the matching packets
	Discard bool `protobuf:"varint,2,opt,name=discard,proto3,oneof"`
}

func (*FilterTermMplsTerminatingAction_Accept) isFilterTermMplsTerminatingAction_TerminatingAction() {
}

func (*FilterTermMplsTerminatingAction_Discard) isFilterTermMplsTerminatingAction_TerminatingAction() {
}

// [brief]: Mpls family non-terminating actions supported
// [detail]: Mpls family non-terminating actions supported
type FilterTermMplsNonTerminatingAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Count the matching packets
	Count *ActionCounter `protobuf:"bytes,1,opt,name=count,proto3" json:"count,omitempty"`
	// [brief]: Policer action. Ensure that policer exists before it being used.
	Policer *ActionPolicer `protobuf:"bytes,2,opt,name=policer,proto3" json:"policer,omitempty"`
}

func (x *FilterTermMplsNonTerminatingAction) Reset() {
	*x = FilterTermMplsNonTerminatingAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterTermMplsNonTerminatingAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterTermMplsNonTerminatingAction) ProtoMessage() {}

func (x *FilterTermMplsNonTerminatingAction) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterTermMplsNonTerminatingAction.ProtoReflect.Descriptor instead.
func (*FilterTermMplsNonTerminatingAction) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{82}
}

func (x *FilterTermMplsNonTerminatingAction) GetCount() *ActionCounter {
	if x != nil {
		return x.Count
	}
	return nil
}

func (x *FilterTermMplsNonTerminatingAction) GetPolicer() *ActionPolicer {
	if x != nil {
		return x.Policer
	}
	return nil
}

// [brief]: Filter Term Actions for MPLS family Filter
// [detail]: An Filter list of Actions supported by MPLS family Filter
type FilterTermMplsAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: List of non-terminating actions.
	ActionsNt *FilterTermMplsNonTerminatingAction `protobuf:"bytes,1,opt,name=actions_nt,json=actionsNt,proto3" json:"actions_nt,omitempty"`
	// [brief]: One terminating action
	ActionT *FilterTermMplsTerminatingAction `protobuf:"bytes,2,opt,name=action_t,json=actionT,proto3" json:"action_t,omitempty"`
}

func (x *FilterTermMplsAction) Reset() {
	*x = FilterTermMplsAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterTermMplsAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterTermMplsAction) ProtoMessage() {}

func (x *FilterTermMplsAction) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterTermMplsAction.ProtoReflect.Descriptor instead.
func (*FilterTermMplsAction) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{83}
}

func (x *FilterTermMplsAction) GetActionsNt() *FilterTermMplsNonTerminatingAction {
	if x != nil {
		return x.ActionsNt
	}
	return nil
}

func (x *FilterTermMplsAction) GetActionT() *FilterTermMplsTerminatingAction {
	if x != nil {
		return x.ActionT
	}
	return nil
}

// [brief]: An Inet6 Filter Term
// [detail]: An Inet6 Filter Term
type FilterInet6Term struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: FilterTerm name
	TermName string `protobuf:"bytes,1,opt,name=term_name,json=termName,proto3" json:"term_name,omitempty"`
	// [brief]: FilterTerm operation
	TermOp FilterTermOperation `protobuf:"varint,2,opt,name=term_op,json=termOp,proto3,enum=jnx.jet.firewall.FilterTermOperation" json:"term_op,omitempty"`
	// [brief]: Adjacency
	Adjacency *FilterAdjacency `protobuf:"bytes,3,opt,name=adjacency,proto3" json:"adjacency,omitempty"`
	// [brief]: Matches
	Matches *FilterTermMatchInet6 `protobuf:"bytes,4,opt,name=matches,proto3" json:"matches,omitempty"`
	// [brief]: Actions
	Actions *FilterTermInet6Action `protobuf:"bytes,5,opt,name=actions,proto3" json:"actions,omitempty"`
}

func (x *FilterInet6Term) Reset() {
	*x = FilterInet6Term{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterInet6Term) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterInet6Term) ProtoMessage() {}

func (x *FilterInet6Term) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterInet6Term.ProtoReflect.Descriptor instead.
func (*FilterInet6Term) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{84}
}

func (x *FilterInet6Term) GetTermName() string {
	if x != nil {
		return x.TermName
	}
	return ""
}

func (x *FilterInet6Term) GetTermOp() FilterTermOperation {
	if x != nil {
		return x.TermOp
	}
	return FilterTermOperation_TERM_OPERATION_INVALID
}

func (x *FilterInet6Term) GetAdjacency() *FilterAdjacency {
	if x != nil {
		return x.Adjacency
	}
	return nil
}

func (x *FilterInet6Term) GetMatches() *FilterTermMatchInet6 {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *FilterInet6Term) GetActions() *FilterTermInet6Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

// [brief]: The VPLS Filter Term
// [detail]: The VPLS Filter Term
type FilterVplsTerm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: FilterTerm name
	TermName string `protobuf:"bytes,1,opt,name=term_name,json=termName,proto3" json:"term_name,omitempty"`
	// [brief]: FilterTerm operation
	TermOp FilterTermOperation `protobuf:"varint,2,opt,name=term_op,json=termOp,proto3,enum=jnx.jet.firewall.FilterTermOperation" json:"term_op,omitempty"`
	// [brief]: Adjacency
	Adjacency *FilterAdjacency `protobuf:"bytes,3,opt,name=adjacency,proto3" json:"adjacency,omitempty"`
	// [brief]: Matches
	Matches *FilterTermMatchVpls `protobuf:"bytes,4,opt,name=matches,proto3" json:"matches,omitempty"`
	// [brief]: Actions
	Actions *FilterTermVplsAction `protobuf:"bytes,5,opt,name=actions,proto3" json:"actions,omitempty"`
}

func (x *FilterVplsTerm) Reset() {
	*x = FilterVplsTerm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterVplsTerm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterVplsTerm) ProtoMessage() {}

func (x *FilterVplsTerm) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterVplsTerm.ProtoReflect.Descriptor instead.
func (*FilterVplsTerm) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{85}
}

func (x *FilterVplsTerm) GetTermName() string {
	if x != nil {
		return x.TermName
	}
	return ""
}

func (x *FilterVplsTerm) GetTermOp() FilterTermOperation {
	if x != nil {
		return x.TermOp
	}
	return FilterTermOperation_TERM_OPERATION_INVALID
}

func (x *FilterVplsTerm) GetAdjacency() *FilterAdjacency {
	if x != nil {
		return x.Adjacency
	}
	return nil
}

func (x *FilterVplsTerm) GetMatches() *FilterTermMatchVpls {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *FilterVplsTerm) GetActions() *FilterTermVplsAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

// [brief]: The CCC Filter Term
// [detail]: The CCC Filter Term
type FilterCccTerm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: FilterTerm name
	TermName string `protobuf:"bytes,1,opt,name=term_name,json=termName,proto3" json:"term_name,omitempty"`
	// [brief]: FilterTerm operation
	TermOp FilterTermOperation `protobuf:"varint,2,opt,name=term_op,json=termOp,proto3,enum=jnx.jet.firewall.FilterTermOperation" json:"term_op,omitempty"`
	// [brief]: Adjacency
	Adjacency *FilterAdjacency `protobuf:"bytes,3,opt,name=adjacency,proto3" json:"adjacency,omitempty"`
	// [brief]: Matches
	Matches *FilterTermMatchCcc `protobuf:"bytes,4,opt,name=matches,proto3" json:"matches,omitempty"`
	// [brief]: Actions
	Actions *FilterTermCccAction `protobuf:"bytes,5,opt,name=actions,proto3" json:"actions,omitempty"`
}

func (x *FilterCccTerm) Reset() {
	*x = FilterCccTerm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterCccTerm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterCccTerm) ProtoMessage() {}

func (x *FilterCccTerm) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterCccTerm.ProtoReflect.Descriptor instead.
func (*FilterCccTerm) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{86}
}

func (x *FilterCccTerm) GetTermName() string {
	if x != nil {
		return x.TermName
	}
	return ""
}

func (x *FilterCccTerm) GetTermOp() FilterTermOperation {
	if x != nil {
		return x.TermOp
	}
	return FilterTermOperation_TERM_OPERATION_INVALID
}

func (x *FilterCccTerm) GetAdjacency() *FilterAdjacency {
	if x != nil {
		return x.Adjacency
	}
	return nil
}

func (x *FilterCccTerm) GetMatches() *FilterTermMatchCcc {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *FilterCccTerm) GetActions() *FilterTermCccAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

// [brief]: The MultiServices Filter Term
// [detail]: The MultiServices Filter Term
type FilterMultiServiceTerm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: FilterTerm name
	TermName string `protobuf:"bytes,1,opt,name=term_name,json=termName,proto3" json:"term_name,omitempty"`
	// [brief]: FilterTerm operation
	TermOp FilterTermOperation `protobuf:"varint,2,opt,name=term_op,json=termOp,proto3,enum=jnx.jet.firewall.FilterTermOperation" json:"term_op,omitempty"`
	// [brief]: Adjacency
	Adjacency *FilterAdjacency `protobuf:"bytes,3,opt,name=adjacency,proto3" json:"adjacency,omitempty"`
	// [brief]: Matches
	Matches *FilterTermMatchMultiService `protobuf:"bytes,4,opt,name=matches,proto3" json:"matches,omitempty"`
	// [brief]: Actions
	Actions *FilterTermMultiServiceAction `protobuf:"bytes,5,opt,name=actions,proto3" json:"actions,omitempty"`
}

func (x *FilterMultiServiceTerm) Reset() {
	*x = FilterMultiServiceTerm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterMultiServiceTerm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterMultiServiceTerm) ProtoMessage() {}

func (x *FilterMultiServiceTerm) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterMultiServiceTerm.ProtoReflect.Descriptor instead.
func (*FilterMultiServiceTerm) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{87}
}

func (x *FilterMultiServiceTerm) GetTermName() string {
	if x != nil {
		return x.TermName
	}
	return ""
}

func (x *FilterMultiServiceTerm) GetTermOp() FilterTermOperation {
	if x != nil {
		return x.TermOp
	}
	return FilterTermOperation_TERM_OPERATION_INVALID
}

func (x *FilterMultiServiceTerm) GetAdjacency() *FilterAdjacency {
	if x != nil {
		return x.Adjacency
	}
	return nil
}

func (x *FilterMultiServiceTerm) GetMatches() *FilterTermMatchMultiService {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *FilterMultiServiceTerm) GetActions() *FilterTermMultiServiceAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

// [brief]: The MPLS Filter Term
// [detail]: The MPLS Filter Term
type FilterMplsTerm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: FilterTerm name
	TermName string `protobuf:"bytes,1,opt,name=term_name,json=termName,proto3" json:"term_name,omitempty"`
	// [brief]: FilterTerm operation
	TermOp FilterTermOperation `protobuf:"varint,2,opt,name=term_op,json=termOp,proto3,enum=jnx.jet.firewall.FilterTermOperation" json:"term_op,omitempty"`
	// [brief]: Adjacency
	Adjacency *FilterAdjacency `protobuf:"bytes,3,opt,name=adjacency,proto3" json:"adjacency,omitempty"`
	// [brief]: Matches
	Matches *FilterTermMatchMpls `protobuf:"bytes,4,opt,name=matches,proto3" json:"matches,omitempty"`
	// [brief]: Actions
	Actions *FilterTermMplsAction `protobuf:"bytes,5,opt,name=actions,proto3" json:"actions,omitempty"`
}

func (x *FilterMplsTerm) Reset() {
	*x = FilterMplsTerm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterMplsTerm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterMplsTerm) ProtoMessage() {}

func (x *FilterMplsTerm) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterMplsTerm.ProtoReflect.Descriptor instead.
func (*FilterMplsTerm) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{88}
}

func (x *FilterMplsTerm) GetTermName() string {
	if x != nil {
		return x.TermName
	}
	return ""
}

func (x *FilterMplsTerm) GetTermOp() FilterTermOperation {
	if x != nil {
		return x.TermOp
	}
	return FilterTermOperation_TERM_OPERATION_INVALID
}

func (x *FilterMplsTerm) GetAdjacency() *FilterAdjacency {
	if x != nil {
		return x.Adjacency
	}
	return nil
}

func (x *FilterMplsTerm) GetMatches() *FilterTermMatchMpls {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *FilterMplsTerm) GetActions() *FilterTermMplsAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

// [brief]: The top level Filter Term
// [detail]: An Filter Term which holds any one of family specific Term as
// part of Filter.
type FilterTerm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Config can allow only one family of Filter Terms in any Filter.
	//
	// Types that are assignable to FilterTerm:
	//	*FilterTerm_InetTerm
	//	*FilterTerm_EsTerm
	//	*FilterTerm_Inet6Term
	//	*FilterTerm_VplsTerm
	//	*FilterTerm_CccTerm
	//	*FilterTerm_MserviceTerm
	//	*FilterTerm_MplsTerm
	FilterTerm isFilterTerm_FilterTerm `protobuf_oneof:"filter_term"`
}

func (x *FilterTerm) Reset() {
	*x = FilterTerm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterTerm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterTerm) ProtoMessage() {}

func (x *FilterTerm) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterTerm.ProtoReflect.Descriptor instead.
func (*FilterTerm) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{89}
}

func (m *FilterTerm) GetFilterTerm() isFilterTerm_FilterTerm {
	if m != nil {
		return m.FilterTerm
	}
	return nil
}

func (x *FilterTerm) GetInetTerm() *FilterInetTerm {
	if x, ok := x.GetFilterTerm().(*FilterTerm_InetTerm); ok {
		return x.InetTerm
	}
	return nil
}

func (x *FilterTerm) GetEsTerm() *FilterEsTerm {
	if x, ok := x.GetFilterTerm().(*FilterTerm_EsTerm); ok {
		return x.EsTerm
	}
	return nil
}

func (x *FilterTerm) GetInet6Term() *FilterInet6Term {
	if x, ok := x.GetFilterTerm().(*FilterTerm_Inet6Term); ok {
		return x.Inet6Term
	}
	return nil
}

func (x *FilterTerm) GetVplsTerm() *FilterVplsTerm {
	if x, ok := x.GetFilterTerm().(*FilterTerm_VplsTerm); ok {
		return x.VplsTerm
	}
	return nil
}

func (x *FilterTerm) GetCccTerm() *FilterCccTerm {
	if x, ok := x.GetFilterTerm().(*FilterTerm_CccTerm); ok {
		return x.CccTerm
	}
	return nil
}

func (x *FilterTerm) GetMserviceTerm() *FilterMultiServiceTerm {
	if x, ok := x.GetFilterTerm().(*FilterTerm_MserviceTerm); ok {
		return x.MserviceTerm
	}
	return nil
}

func (x *FilterTerm) GetMplsTerm() *FilterMplsTerm {
	if x, ok := x.GetFilterTerm().(*FilterTerm_MplsTerm); ok {
		return x.MplsTerm
	}
	return nil
}

type isFilterTerm_FilterTerm interface {
	isFilterTerm_FilterTerm()
}

type FilterTerm_InetTerm struct {
	// [brief]: For Inet family
	InetTerm *FilterInetTerm `protobuf:"bytes,1,opt,name=inet_term,json=inetTerm,proto3,oneof"`
}

type FilterTerm_EsTerm struct {
	// [brief]: For Ethernet Switching family
	EsTerm *FilterEsTerm `protobuf:"bytes,2,opt,name=es_term,json=esTerm,proto3,oneof"`
}

type FilterTerm_Inet6Term struct {
	// [brief]: For Inet6 family
	Inet6Term *FilterInet6Term `protobuf:"bytes,3,opt,name=inet6_term,json=inet6Term,proto3,oneof"`
}

type FilterTerm_VplsTerm struct {
	// [brief]: For vpls family
	VplsTerm *FilterVplsTerm `protobuf:"bytes,4,opt,name=vpls_term,json=vplsTerm,proto3,oneof"`
}

type FilterTerm_CccTerm struct {
	// [brief]: For ccc family
	CccTerm *FilterCccTerm `protobuf:"bytes,5,opt,name=ccc_term,json=cccTerm,proto3,oneof"`
}

type FilterTerm_MserviceTerm struct {
	// [brief]: For multiservices family
	MserviceTerm *FilterMultiServiceTerm `protobuf:"bytes,6,opt,name=mservice_term,json=mserviceTerm,proto3,oneof"`
}

type FilterTerm_MplsTerm struct {
	// [brief]: For mpls family
	MplsTerm *FilterMplsTerm `protobuf:"bytes,7,opt,name=mpls_term,json=mplsTerm,proto3,oneof"`
}

func (*FilterTerm_InetTerm) isFilterTerm_FilterTerm() {}

func (*FilterTerm_EsTerm) isFilterTerm_FilterTerm() {}

func (*FilterTerm_Inet6Term) isFilterTerm_FilterTerm() {}

func (*FilterTerm_VplsTerm) isFilterTerm_FilterTerm() {}

func (*FilterTerm_CccTerm) isFilterTerm_FilterTerm() {}

func (*FilterTerm_MserviceTerm) isFilterTerm_FilterTerm() {}

func (*FilterTerm_MplsTerm) isFilterTerm_FilterTerm() {}

// [brief]: Filter
// [detail]: Basic Filter structure to identify perticular Filter by name and
// family.
type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Filter name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// [brief]: Filter family
	Family FilterFamilies `protobuf:"varint,2,opt,name=family,proto3,enum=jnx.jet.firewall.FilterFamilies" json:"family,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{90}
}

func (x *Filter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Filter) GetFamily() FilterFamilies {
	if x != nil {
		return x.Family
	}
	return FilterFamilies_FAMILY_INVALID
}

// [brief]: Filter Add message structure
// [detail]: Filter detailed message input structure used in FilterAdd
// rpc.
type FilterAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Filter name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// [brief]: Filter type
	Type FilterTypes `protobuf:"varint,2,opt,name=type,proto3,enum=jnx.jet.firewall.FilterTypes" json:"type,omitempty"`
	// [brief]: Filter family
	Family FilterFamilies `protobuf:"varint,3,opt,name=family,proto3,enum=jnx.jet.firewall.FilterFamilies" json:"family,omitempty"`
	// [brief]: Filter flag
	Flag FilterFlags `protobuf:"varint,4,opt,name=flag,proto3,enum=jnx.jet.firewall.FilterFlags" json:"flag,omitempty"`
	// [brief]: List of Destination addresses
	TermsList []*FilterTerm `protobuf:"bytes,5,rep,name=terms_list,json=termsList,proto3" json:"terms_list,omitempty"`
}

func (x *FilterAddRequest) Reset() {
	*x = FilterAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterAddRequest) ProtoMessage() {}

func (x *FilterAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterAddRequest.ProtoReflect.Descriptor instead.
func (*FilterAddRequest) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{91}
}

func (x *FilterAddRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FilterAddRequest) GetType() FilterTypes {
	if x != nil {
		return x.Type
	}
	return FilterTypes_TYPE_INVALID
}

func (x *FilterAddRequest) GetFamily() FilterFamilies {
	if x != nil {
		return x.Family
	}
	return FilterFamilies_FAMILY_INVALID
}

func (x *FilterAddRequest) GetFlag() FilterFlags {
	if x != nil {
		return x.Flag
	}
	return FilterFlags_FLAGS_NONE
}

func (x *FilterAddRequest) GetTermsList() []*FilterTerm {
	if x != nil {
		return x.TermsList
	}
	return nil
}

// [brief]: Filter Modify message structure
// [detail]: Filter detailed message input structure used in
// FilterModify rpc.
type FilterModifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Filter name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// [brief]: Filter type
	Type FilterTypes `protobuf:"varint,2,opt,name=type,proto3,enum=jnx.jet.firewall.FilterTypes" json:"type,omitempty"`
	// [brief]: Filter family
	Family FilterFamilies `protobuf:"varint,3,opt,name=family,proto3,enum=jnx.jet.firewall.FilterFamilies" json:"family,omitempty"`
	// [brief]: Filter flag
	Flag FilterFlags `protobuf:"varint,4,opt,name=flag,proto3,enum=jnx.jet.firewall.FilterFlags" json:"flag,omitempty"`
	// [brief]: List of Filter Terms
	TermsList []*FilterTerm `protobuf:"bytes,5,rep,name=terms_list,json=termsList,proto3" json:"terms_list,omitempty"`
}

func (x *FilterModifyRequest) Reset() {
	*x = FilterModifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterModifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterModifyRequest) ProtoMessage() {}

func (x *FilterModifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterModifyRequest.ProtoReflect.Descriptor instead.
func (*FilterModifyRequest) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{92}
}

func (x *FilterModifyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FilterModifyRequest) GetType() FilterTypes {
	if x != nil {
		return x.Type
	}
	return FilterTypes_TYPE_INVALID
}

func (x *FilterModifyRequest) GetFamily() FilterFamilies {
	if x != nil {
		return x.Family
	}
	return FilterFamilies_FAMILY_INVALID
}

func (x *FilterModifyRequest) GetFlag() FilterFlags {
	if x != nil {
		return x.Flag
	}
	return FilterFlags_FLAGS_NONE
}

func (x *FilterModifyRequest) GetTermsList() []*FilterTerm {
	if x != nil {
		return x.TermsList
	}
	return nil
}

// [brief]: Filter input structure used in FilterDelete rpc.
// [detail]: Filter input structure used in FilterDelete rpc.
type FilterDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Filter name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// [brief]: Filter family
	Family FilterFamilies `protobuf:"varint,2,opt,name=family,proto3,enum=jnx.jet.firewall.FilterFamilies" json:"family,omitempty"`
}

func (x *FilterDeleteRequest) Reset() {
	*x = FilterDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterDeleteRequest) ProtoMessage() {}

func (x *FilterDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterDeleteRequest.ProtoReflect.Descriptor instead.
func (*FilterDeleteRequest) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{93}
}

func (x *FilterDeleteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FilterDeleteRequest) GetFamily() FilterFamilies {
	if x != nil {
		return x.Family
	}
	return FilterFamilies_FAMILY_INVALID
}

// [brief]: Input request messages for Filter counter get
// [detail]: Input request messages for Filter counter by name and counter
// name should be fully resolved.
type FilterCounterGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: only Filter name
	FilterName string `protobuf:"bytes,1,opt,name=filter_name,json=filterName,proto3" json:"filter_name,omitempty"`
	// [brief]: Counter name.
	CounterName string `protobuf:"bytes,2,opt,name=counter_name,json=counterName,proto3" json:"counter_name,omitempty"`
}

func (x *FilterCounterGetRequest) Reset() {
	*x = FilterCounterGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterCounterGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterCounterGetRequest) ProtoMessage() {}

func (x *FilterCounterGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterCounterGetRequest.ProtoReflect.Descriptor instead.
func (*FilterCounterGetRequest) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{94}
}

func (x *FilterCounterGetRequest) GetFilterName() string {
	if x != nil {
		return x.FilterName
	}
	return ""
}

func (x *FilterCounterGetRequest) GetCounterName() string {
	if x != nil {
		return x.CounterName
	}
	return ""
}

// [brief]: Input request messages for Filter policer counter get
// [detail]: Input request messages for Filter policer counter by name and
// counter name should be fully resolved.
type PolicerCounterGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: only Filter name
	FilterName string `protobuf:"bytes,1,opt,name=filter_name,json=filterName,proto3" json:"filter_name,omitempty"`
	// [brief]: Counter name.
	CounterName string `protobuf:"bytes,2,opt,name=counter_name,json=counterName,proto3" json:"counter_name,omitempty"`
}

func (x *PolicerCounterGetRequest) Reset() {
	*x = PolicerCounterGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicerCounterGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicerCounterGetRequest) ProtoMessage() {}

func (x *PolicerCounterGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicerCounterGetRequest.ProtoReflect.Descriptor instead.
func (*PolicerCounterGetRequest) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{95}
}

func (x *PolicerCounterGetRequest) GetFilterName() string {
	if x != nil {
		return x.FilterName
	}
	return ""
}

func (x *PolicerCounterGetRequest) GetCounterName() string {
	if x != nil {
		return x.CounterName
	}
	return ""
}

// [brief]: Input request messages for Filter, policer counter clear
// [detail]: Input request messages for Filter, policer counter clear by
// counter name which should be fully resolved.
type FilterCounterSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: only Filter name
	FilterName string `protobuf:"bytes,1,opt,name=filter_name,json=filterName,proto3" json:"filter_name,omitempty"`
	// [brief]: Counter name.
	CounterName string `protobuf:"bytes,2,opt,name=counter_name,json=counterName,proto3" json:"counter_name,omitempty"`
}

func (x *FilterCounterSetRequest) Reset() {
	*x = FilterCounterSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterCounterSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterCounterSetRequest) ProtoMessage() {}

func (x *FilterCounterSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterCounterSetRequest.ProtoReflect.Descriptor instead.
func (*FilterCounterSetRequest) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{96}
}

func (x *FilterCounterSetRequest) GetFilterName() string {
	if x != nil {
		return x.FilterName
	}
	return ""
}

func (x *FilterCounterSetRequest) GetCounterName() string {
	if x != nil {
		return x.CounterName
	}
	return ""
}

// [brief]: Return/Response values for counter set Request RPC.
// [detail]: Return/Response values for counter set Request RPC.
type FilterCounterSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: RPC execution status information
	// [detail]: RPC execution status.code as SUCCESS or FAILURE.
	// status.message is a string containing reason for failure
	Status *RpcStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// [brief]: RPC execution internal status code
	SubCode FilterCounterSetResponse_StatusCode `protobuf:"varint,2,opt,name=sub_code,json=subCode,proto3,enum=jnx.jet.firewall.FilterCounterSetResponse_StatusCode" json:"sub_code,omitempty"`
}

func (x *FilterCounterSetResponse) Reset() {
	*x = FilterCounterSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterCounterSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterCounterSetResponse) ProtoMessage() {}

func (x *FilterCounterSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterCounterSetResponse.ProtoReflect.Descriptor instead.
func (*FilterCounterSetResponse) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{97}
}

func (x *FilterCounterSetResponse) GetStatus() *RpcStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FilterCounterSetResponse) GetSubCode() FilterCounterSetResponse_StatusCode {
	if x != nil {
		return x.SubCode
	}
	return FilterCounterSetResponse_EOK
}

// [brief]: Input request messages for policer counter clear
// [detail]: Input request messages for policer counter clear by
// counter name which should be fully resolved.
type PolicerCounterSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: only filter name
	FilterName string `protobuf:"bytes,1,opt,name=filter_name,json=filterName,proto3" json:"filter_name,omitempty"`
	// [brief]: Counter name.
	CounterName string `protobuf:"bytes,2,opt,name=counter_name,json=counterName,proto3" json:"counter_name,omitempty"`
}

func (x *PolicerCounterSetRequest) Reset() {
	*x = PolicerCounterSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicerCounterSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicerCounterSetRequest) ProtoMessage() {}

func (x *PolicerCounterSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicerCounterSetRequest.ProtoReflect.Descriptor instead.
func (*PolicerCounterSetRequest) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{98}
}

func (x *PolicerCounterSetRequest) GetFilterName() string {
	if x != nil {
		return x.FilterName
	}
	return ""
}

func (x *PolicerCounterSetRequest) GetCounterName() string {
	if x != nil {
		return x.CounterName
	}
	return ""
}

// [brief]: Return/Response values for policer counter set Request RPC.
// [detail]: Return/Response values for policer counter set Request RPC.
type PolicerCounterSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: RPC execution status information
	// [detail]: RPC execution status.code as SUCCESS or FAILURE.
	// status.message is a string containing reason for failure
	Status *RpcStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// [brief]: RPC execution internal status code
	SubCode PolicerCounterSetResponse_StatusCode `protobuf:"varint,2,opt,name=sub_code,json=subCode,proto3,enum=jnx.jet.firewall.PolicerCounterSetResponse_StatusCode" json:"sub_code,omitempty"`
}

func (x *PolicerCounterSetResponse) Reset() {
	*x = PolicerCounterSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicerCounterSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicerCounterSetResponse) ProtoMessage() {}

func (x *PolicerCounterSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicerCounterSetResponse.ProtoReflect.Descriptor instead.
func (*PolicerCounterSetResponse) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{99}
}

func (x *PolicerCounterSetResponse) GetStatus() *RpcStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PolicerCounterSetResponse) GetSubCode() PolicerCounterSetResponse_StatusCode {
	if x != nil {
		return x.SubCode
	}
	return PolicerCounterSetResponse_EOK
}

// [brief]: Return/Response values for Filter Add Request RPC.
// [detail]: Return/Response values for Filter Add Request RPC.
type FilterAddResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: RPC execution status information
	// [detail]: RPC execution status.code as SUCCESS or FAILURE.
	// status.message is a string containing reason for failure
	Status *RpcStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// [brief]: RPC execution internal status code
	SubCode FilterAddResponse_StatusCode `protobuf:"varint,2,opt,name=sub_code,json=subCode,proto3,enum=jnx.jet.firewall.FilterAddResponse_StatusCode" json:"sub_code,omitempty"`
}

func (x *FilterAddResponse) Reset() {
	*x = FilterAddResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterAddResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterAddResponse) ProtoMessage() {}

func (x *FilterAddResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterAddResponse.ProtoReflect.Descriptor instead.
func (*FilterAddResponse) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{100}
}

func (x *FilterAddResponse) GetStatus() *RpcStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FilterAddResponse) GetSubCode() FilterAddResponse_StatusCode {
	if x != nil {
		return x.SubCode
	}
	return FilterAddResponse_EOK
}

// [brief]: Return/Response values for Filter Delete Request RPC.
// [detail]: Return/Response values for Filter Delete Request RPC.
type FilterDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: RPC execution status information
	// [detail]: RPC execution status.code as SUCCESS or FAILURE.
	// status.message is a string containing reason for failure
	Status *RpcStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// [brief]: RPC execution internal status code
	SubCode FilterDeleteResponse_StatusCode `protobuf:"varint,2,opt,name=sub_code,json=subCode,proto3,enum=jnx.jet.firewall.FilterDeleteResponse_StatusCode" json:"sub_code,omitempty"`
}

func (x *FilterDeleteResponse) Reset() {
	*x = FilterDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterDeleteResponse) ProtoMessage() {}

func (x *FilterDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterDeleteResponse.ProtoReflect.Descriptor instead.
func (*FilterDeleteResponse) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{101}
}

func (x *FilterDeleteResponse) GetStatus() *RpcStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FilterDeleteResponse) GetSubCode() FilterDeleteResponse_StatusCode {
	if x != nil {
		return x.SubCode
	}
	return FilterDeleteResponse_EOK
}

// [brief]: Return/Response values for Filter Modify Request RPC.
// [detail]: Return/Response values for Filter Modify Request RPC.
type FilterModifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: RPC execution status information
	// [detail]: RPC execution status.code as SUCCESS or FAILURE.
	// status.message is a string containing reason for failure
	Status *RpcStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// [brief]: RPC execution internal status code
	SubCode FilterModifyResponse_StatusCode `protobuf:"varint,2,opt,name=sub_code,json=subCode,proto3,enum=jnx.jet.firewall.FilterModifyResponse_StatusCode" json:"sub_code,omitempty"`
}

func (x *FilterModifyResponse) Reset() {
	*x = FilterModifyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterModifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterModifyResponse) ProtoMessage() {}

func (x *FilterModifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterModifyResponse.ProtoReflect.Descriptor instead.
func (*FilterModifyResponse) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{102}
}

func (x *FilterModifyResponse) GetStatus() *RpcStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FilterModifyResponse) GetSubCode() FilterModifyResponse_StatusCode {
	if x != nil {
		return x.SubCode
	}
	return FilterModifyResponse_EOK
}

// [brief]: Return/Response values for Filter Bind Add Request RPC.
// [detail]: Return/Response values for Filter Bind Add Request RPC.
type FilterBindAddResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: RPC execution status information
	// [detail]: RPC execution status.code as SUCCESS or FAILURE.
	// status.message is a string containing reason for failure
	Status *RpcStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// [brief]: RPC execution internal status code
	SubCode FilterBindAddResponse_StatusCode `protobuf:"varint,2,opt,name=sub_code,json=subCode,proto3,enum=jnx.jet.firewall.FilterBindAddResponse_StatusCode" json:"sub_code,omitempty"`
}

func (x *FilterBindAddResponse) Reset() {
	*x = FilterBindAddResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterBindAddResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterBindAddResponse) ProtoMessage() {}

func (x *FilterBindAddResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterBindAddResponse.ProtoReflect.Descriptor instead.
func (*FilterBindAddResponse) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{103}
}

func (x *FilterBindAddResponse) GetStatus() *RpcStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FilterBindAddResponse) GetSubCode() FilterBindAddResponse_StatusCode {
	if x != nil {
		return x.SubCode
	}
	return FilterBindAddResponse_EOK
}

// [brief]: Return/Response values for Filter Bind Delete Request RPC.
// [detail]: Return/Response values for Filter Bind Delete Request RPC.
type FilterBindDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: RPC execution status information
	// [detail]: RPC execution status.code as SUCCESS or FAILURE.
	// status.message is a string containing reason for failure
	Status *RpcStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// [brief]: RPC execution internal status code
	SubCode FilterBindDeleteResponse_StatusCode `protobuf:"varint,2,opt,name=sub_code,json=subCode,proto3,enum=jnx.jet.firewall.FilterBindDeleteResponse_StatusCode" json:"sub_code,omitempty"`
}

func (x *FilterBindDeleteResponse) Reset() {
	*x = FilterBindDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterBindDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterBindDeleteResponse) ProtoMessage() {}

func (x *FilterBindDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterBindDeleteResponse.ProtoReflect.Descriptor instead.
func (*FilterBindDeleteResponse) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{104}
}

func (x *FilterBindDeleteResponse) GetStatus() *RpcStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FilterBindDeleteResponse) GetSubCode() FilterBindDeleteResponse_StatusCode {
	if x != nil {
		return x.SubCode
	}
	return FilterBindDeleteResponse_EOK
}

// [brief]: Return/Response values for Policer Add Request RPC.
// [detail]: Return/Response values for Policer Add Request RPC.
type PolicerAddResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: RPC execution status information
	// [detail]: RPC execution status.code as SUCCESS or FAILURE.
	// status.message is a string containing reason for failure
	Status *RpcStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// [brief]: RPC execution internal status code
	SubCode PolicerAddResponse_StatusCode `protobuf:"varint,2,opt,name=sub_code,json=subCode,proto3,enum=jnx.jet.firewall.PolicerAddResponse_StatusCode" json:"sub_code,omitempty"`
}

func (x *PolicerAddResponse) Reset() {
	*x = PolicerAddResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicerAddResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicerAddResponse) ProtoMessage() {}

func (x *PolicerAddResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicerAddResponse.ProtoReflect.Descriptor instead.
func (*PolicerAddResponse) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{105}
}

func (x *PolicerAddResponse) GetStatus() *RpcStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PolicerAddResponse) GetSubCode() PolicerAddResponse_StatusCode {
	if x != nil {
		return x.SubCode
	}
	return PolicerAddResponse_EOK
}

// [brief]: Return/Response values for Policer Delete Request RPC.
// [detail]: Return/Response values for Policer Delete Request RPC.
type PolicerDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: RPC execution status information
	// [detail]: RPC execution status.code as SUCCESS or FAILURE.
	// status.message is a string containing reason for failure
	Status *RpcStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// [brief]: RPC execution internal status code
	SubCode PolicerDeleteResponse_StatusCode `protobuf:"varint,2,opt,name=sub_code,json=subCode,proto3,enum=jnx.jet.firewall.PolicerDeleteResponse_StatusCode" json:"sub_code,omitempty"`
}

func (x *PolicerDeleteResponse) Reset() {
	*x = PolicerDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicerDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicerDeleteResponse) ProtoMessage() {}

func (x *PolicerDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicerDeleteResponse.ProtoReflect.Descriptor instead.
func (*PolicerDeleteResponse) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{106}
}

func (x *PolicerDeleteResponse) GetStatus() *RpcStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PolicerDeleteResponse) GetSubCode() PolicerDeleteResponse_StatusCode {
	if x != nil {
		return x.SubCode
	}
	return PolicerDeleteResponse_EOK
}

// [brief]: Return/Response values for Policer Modify Request RPC.
// [detail]: Return/Response values for Policer Modify Request RPC.
type PolicerModifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: RPC execution status information
	// [detail]: RPC execution status.code as SUCCESS or FAILURE.
	// status.message is a string containing reason for failure
	Status *RpcStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// [brief]: RPC execution internal status code
	SubCode PolicerModifyResponse_StatusCode `protobuf:"varint,2,opt,name=sub_code,json=subCode,proto3,enum=jnx.jet.firewall.PolicerModifyResponse_StatusCode" json:"sub_code,omitempty"`
}

func (x *PolicerModifyResponse) Reset() {
	*x = PolicerModifyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicerModifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicerModifyResponse) ProtoMessage() {}

func (x *PolicerModifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicerModifyResponse.ProtoReflect.Descriptor instead.
func (*PolicerModifyResponse) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{107}
}

func (x *PolicerModifyResponse) GetStatus() *RpcStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PolicerModifyResponse) GetSubCode() PolicerModifyResponse_StatusCode {
	if x != nil {
		return x.SubCode
	}
	return PolicerModifyResponse_EOK
}

// [brief]: Return/Response values for Filter counter get Request RPC.
// [detail]: Return/Response values for Filter counter get Request RPC.
type FilterCounterGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: RPC execution status information
	// [detail]: RPC execution status.code as SUCCESS or FAILURE.
	// status.message is a string containing reason for failure
	Status *RpcStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// [brief]: RPC execution internal status code
	SubCode FilterCounterGetResponse_StatusCode `protobuf:"varint,2,opt,name=sub_code,json=subCode,proto3,enum=jnx.jet.firewall.FilterCounterGetResponse_StatusCode" json:"sub_code,omitempty"`
	// [brief]: counter name
	CounterName string `protobuf:"bytes,3,opt,name=counter_name,json=counterName,proto3" json:"counter_name,omitempty"`
	// [brief]: byte count
	Bytes uint64 `protobuf:"varint,4,opt,name=bytes,proto3" json:"bytes,omitempty"`
	// [brief]: packet count
	Packets uint64 `protobuf:"varint,5,opt,name=packets,proto3" json:"packets,omitempty"`
}

func (x *FilterCounterGetResponse) Reset() {
	*x = FilterCounterGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterCounterGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterCounterGetResponse) ProtoMessage() {}

func (x *FilterCounterGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterCounterGetResponse.ProtoReflect.Descriptor instead.
func (*FilterCounterGetResponse) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{108}
}

func (x *FilterCounterGetResponse) GetStatus() *RpcStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FilterCounterGetResponse) GetSubCode() FilterCounterGetResponse_StatusCode {
	if x != nil {
		return x.SubCode
	}
	return FilterCounterGetResponse_EOK
}

func (x *FilterCounterGetResponse) GetCounterName() string {
	if x != nil {
		return x.CounterName
	}
	return ""
}

func (x *FilterCounterGetResponse) GetBytes() uint64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *FilterCounterGetResponse) GetPackets() uint64 {
	if x != nil {
		return x.Packets
	}
	return 0
}

// [brief]: Return/Response values for Filter Policer counter get Request RPC.
// [detail]: Return/Response values for Filter Policer counter get Request RPC.
type PolicerCounterGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: RPC execution status information
	// [detail]: RPC execution status.code as SUCCESS or FAILURE.
	// status.message is a string containing reason for failure
	Status *RpcStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// [brief]: RPC execution internal status code
	SubCode PolicerCounterGetResponse_StatusCode `protobuf:"varint,2,opt,name=sub_code,json=subCode,proto3,enum=jnx.jet.firewall.PolicerCounterGetResponse_StatusCode" json:"sub_code,omitempty"`
	// [brief]: counter name
	CounterName string `protobuf:"bytes,3,opt,name=counter_name,json=counterName,proto3" json:"counter_name,omitempty"`
	// [brief]: byte count
	Bytes uint64 `protobuf:"varint,4,opt,name=bytes,proto3" json:"bytes,omitempty"`
	// [brief]: packet count
	Packets uint64 `protobuf:"varint,5,opt,name=packets,proto3" json:"packets,omitempty"`
}

func (x *PolicerCounterGetResponse) Reset() {
	*x = PolicerCounterGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicerCounterGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicerCounterGetResponse) ProtoMessage() {}

func (x *PolicerCounterGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicerCounterGetResponse.ProtoReflect.Descriptor instead.
func (*PolicerCounterGetResponse) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{109}
}

func (x *PolicerCounterGetResponse) GetStatus() *RpcStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PolicerCounterGetResponse) GetSubCode() PolicerCounterGetResponse_StatusCode {
	if x != nil {
		return x.SubCode
	}
	return PolicerCounterGetResponse_EOK
}

func (x *PolicerCounterGetResponse) GetCounterName() string {
	if x != nil {
		return x.CounterName
	}
	return ""
}

func (x *PolicerCounterGetResponse) GetBytes() uint64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *PolicerCounterGetResponse) GetPackets() uint64 {
	if x != nil {
		return x.Packets
	}
	return 0
}

// [brief]: Filter Bind object Vlan
// [detail]: Filter Bind object Vlan
type FilterBindObjVlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Bind object VLAN name where the Filter is to be bound
	VlanName string `protobuf:"bytes,1,opt,name=vlan_name,json=vlanName,proto3" json:"vlan_name,omitempty"`
	// [brief]: Bind object Routing Instance name of vlan  where the Filter is to be bound
	RouteTable string `protobuf:"bytes,2,opt,name=route_table,json=routeTable,proto3" json:"route_table,omitempty"`
}

func (x *FilterBindObjVlan) Reset() {
	*x = FilterBindObjVlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterBindObjVlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterBindObjVlan) ProtoMessage() {}

func (x *FilterBindObjVlan) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterBindObjVlan.ProtoReflect.Descriptor instead.
func (*FilterBindObjVlan) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{110}
}

func (x *FilterBindObjVlan) GetVlanName() string {
	if x != nil {
		return x.VlanName
	}
	return ""
}

func (x *FilterBindObjVlan) GetRouteTable() string {
	if x != nil {
		return x.RouteTable
	}
	return ""
}

// [brief]: Filter Bind object BridgeDomain
// [detail]: Filter Bind object BridgeDomain
type FilterBindObjBridgeDomain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Bind object bd name where the Filter is to be bound
	BridgeDomain string `protobuf:"bytes,1,opt,name=bridge_domain,json=bridgeDomain,proto3" json:"bridge_domain,omitempty"`
	// [brief]: Bind object Routing Instance name of bridge domain where the Filter is to be bound
	RouteTable string `protobuf:"bytes,2,opt,name=route_table,json=routeTable,proto3" json:"route_table,omitempty"`
}

func (x *FilterBindObjBridgeDomain) Reset() {
	*x = FilterBindObjBridgeDomain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterBindObjBridgeDomain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterBindObjBridgeDomain) ProtoMessage() {}

func (x *FilterBindObjBridgeDomain) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterBindObjBridgeDomain.ProtoReflect.Descriptor instead.
func (*FilterBindObjBridgeDomain) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{111}
}

func (x *FilterBindObjBridgeDomain) GetBridgeDomain() string {
	if x != nil {
		return x.BridgeDomain
	}
	return ""
}

func (x *FilterBindObjBridgeDomain) GetRouteTable() string {
	if x != nil {
		return x.RouteTable
	}
	return ""
}

// [brief]: List of bind points where the Filter is to be bound
// [detail]: List of bind points where the Filter is to be bound
type FilterBindObjPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: List of bind points where the Filter is to be bound but only one at
	// a time.
	//
	// Types that are assignable to BindPoint:
	//	*FilterBindObjPoint_InterfaceName
	//	*FilterBindObjPoint_ForwardingTable
	//	*FilterBindObjPoint_Vlan
	//	*FilterBindObjPoint_BridgeDomain
	BindPoint isFilterBindObjPoint_BindPoint `protobuf_oneof:"bind_point"`
}

func (x *FilterBindObjPoint) Reset() {
	*x = FilterBindObjPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterBindObjPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterBindObjPoint) ProtoMessage() {}

func (x *FilterBindObjPoint) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterBindObjPoint.ProtoReflect.Descriptor instead.
func (*FilterBindObjPoint) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{112}
}

func (m *FilterBindObjPoint) GetBindPoint() isFilterBindObjPoint_BindPoint {
	if m != nil {
		return m.BindPoint
	}
	return nil
}

func (x *FilterBindObjPoint) GetInterfaceName() string {
	if x, ok := x.GetBindPoint().(*FilterBindObjPoint_InterfaceName); ok {
		return x.InterfaceName
	}
	return ""
}

func (x *FilterBindObjPoint) GetForwardingTable() string {
	if x, ok := x.GetBindPoint().(*FilterBindObjPoint_ForwardingTable); ok {
		return x.ForwardingTable
	}
	return ""
}

func (x *FilterBindObjPoint) GetVlan() *FilterBindObjVlan {
	if x, ok := x.GetBindPoint().(*FilterBindObjPoint_Vlan); ok {
		return x.Vlan
	}
	return nil
}

func (x *FilterBindObjPoint) GetBridgeDomain() *FilterBindObjBridgeDomain {
	if x, ok := x.GetBindPoint().(*FilterBindObjPoint_BridgeDomain); ok {
		return x.BridgeDomain
	}
	return nil
}

type isFilterBindObjPoint_BindPoint interface {
	isFilterBindObjPoint_BindPoint()
}

type FilterBindObjPoint_InterfaceName struct {
	// [brief]: Bind object, interface name where the Filter is to be bound
	InterfaceName string `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3,oneof"`
}

type FilterBindObjPoint_ForwardingTable struct {
	// [brief]: Bind object, forwarding table name where the Filter is to be bound
	ForwardingTable string `protobuf:"bytes,2,opt,name=forwarding_table,json=forwardingTable,proto3,oneof"`
}

type FilterBindObjPoint_Vlan struct {
	// [brief]: Bind object, vlan  where the Filter is to be bound
	Vlan *FilterBindObjVlan `protobuf:"bytes,3,opt,name=vlan,proto3,oneof"`
}

type FilterBindObjPoint_BridgeDomain struct {
	// [brief]: bind object, bridge domain where the Filter is to be bound
	BridgeDomain *FilterBindObjBridgeDomain `protobuf:"bytes,4,opt,name=bridge_domain,json=bridgeDomain,proto3,oneof"`
}

func (*FilterBindObjPoint_InterfaceName) isFilterBindObjPoint_BindPoint() {}

func (*FilterBindObjPoint_ForwardingTable) isFilterBindObjPoint_BindPoint() {}

func (*FilterBindObjPoint_Vlan) isFilterBindObjPoint_BindPoint() {}

func (*FilterBindObjPoint_BridgeDomain) isFilterBindObjPoint_BindPoint() {}

// [brief]: Filter object bind add request
// [detail]: Per forwarding element Filter binding. The order of filters execution
// as shown below
// In Input direction:
// input_interface-> Client Filter -> CLI Filter -> route_lookup
// In Output direction:
// route_lookup -> CLI Filter -> Client Filter -> output_interface.
type FilterObjBindAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Filter
	Filter *Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	// [brief]: Binding object type
	ObjType FilterBindObjType `protobuf:"varint,2,opt,name=obj_type,json=objType,proto3,enum=jnx.jet.firewall.FilterBindObjType" json:"obj_type,omitempty"`
	// [brief]: Bind object name where the Filter is to be bound
	BindObject *FilterBindObjPoint `protobuf:"bytes,3,opt,name=bind_object,json=bindObject,proto3" json:"bind_object,omitempty"`
	// [brief]: Bind direction
	BindDirection FilterBindDirection `protobuf:"varint,4,opt,name=bind_direction,json=bindDirection,proto3,enum=jnx.jet.firewall.FilterBindDirection" json:"bind_direction,omitempty"`
	// [brief]: Family on the bind object. Must match with the Filter family
	BindFamily FilterFamilies `protobuf:"varint,5,opt,name=bind_family,json=bindFamily,proto3,enum=jnx.jet.firewall.FilterFamilies" json:"bind_family,omitempty"`
}

func (x *FilterObjBindAddRequest) Reset() {
	*x = FilterObjBindAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterObjBindAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterObjBindAddRequest) ProtoMessage() {}

func (x *FilterObjBindAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterObjBindAddRequest.ProtoReflect.Descriptor instead.
func (*FilterObjBindAddRequest) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{113}
}

func (x *FilterObjBindAddRequest) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *FilterObjBindAddRequest) GetObjType() FilterBindObjType {
	if x != nil {
		return x.ObjType
	}
	return FilterBindObjType_BIND_OBJ_TYPE_INVALID
}

func (x *FilterObjBindAddRequest) GetBindObject() *FilterBindObjPoint {
	if x != nil {
		return x.BindObject
	}
	return nil
}

func (x *FilterObjBindAddRequest) GetBindDirection() FilterBindDirection {
	if x != nil {
		return x.BindDirection
	}
	return FilterBindDirection_BIND_DIRECTION_INVALID
}

func (x *FilterObjBindAddRequest) GetBindFamily() FilterFamilies {
	if x != nil {
		return x.BindFamily
	}
	return FilterFamilies_FAMILY_INVALID
}

// [brief]: Filter unbind request per forwarding element
// [detail]: Filter unbind request per forwarding element
type FilterObjBindDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Filter
	Filter *Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	// [brief]: Binding object type
	ObjType FilterBindObjType `protobuf:"varint,2,opt,name=obj_type,json=objType,proto3,enum=jnx.jet.firewall.FilterBindObjType" json:"obj_type,omitempty"`
	// [brief]: Bind object name where the Filter is to be bound
	BindObject *FilterBindObjPoint `protobuf:"bytes,3,opt,name=bind_object,json=bindObject,proto3" json:"bind_object,omitempty"`
	// [brief]: Bind direction
	BindDirection FilterBindDirection `protobuf:"varint,4,opt,name=bind_direction,json=bindDirection,proto3,enum=jnx.jet.firewall.FilterBindDirection" json:"bind_direction,omitempty"`
	// [brief]: Family on the bind object. Must match with the Filter family
	BindFamily FilterFamilies `protobuf:"varint,5,opt,name=bind_family,json=bindFamily,proto3,enum=jnx.jet.firewall.FilterFamilies" json:"bind_family,omitempty"`
}

func (x *FilterObjBindDeleteRequest) Reset() {
	*x = FilterObjBindDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_firewall_service_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterObjBindDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterObjBindDeleteRequest) ProtoMessage() {}

func (x *FilterObjBindDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_firewall_service_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterObjBindDeleteRequest.ProtoReflect.Descriptor instead.
func (*FilterObjBindDeleteRequest) Descriptor() ([]byte, []int) {
	return file_jnx_firewall_service_proto_rawDescGZIP(), []int{114}
}

func (x *FilterObjBindDeleteRequest) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *FilterObjBindDeleteRequest) GetObjType() FilterBindObjType {
	if x != nil {
		return x.ObjType
	}
	return FilterBindObjType_BIND_OBJ_TYPE_INVALID
}

func (x *FilterObjBindDeleteRequest) GetBindObject() *FilterBindObjPoint {
	if x != nil {
		return x.BindObject
	}
	return nil
}

func (x *FilterObjBindDeleteRequest) GetBindDirection() FilterBindDirection {
	if x != nil {
		return x.BindDirection
	}
	return FilterBindDirection_BIND_DIRECTION_INVALID
}

func (x *FilterObjBindDeleteRequest) GetBindFamily() FilterFamilies {
	if x != nil {
		return x.BindFamily
	}
	return FilterFamilies_FAMILY_INVALID
}

var File_jnx_firewall_service_proto protoreflect.FileDescriptor

var file_jnx_firewall_service_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x6a, 0x6e, 0x78, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x1a, 0x1b,
	0x6a, 0x6e, 0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6a, 0x6e, 0x78,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe7, 0x01, 0x0a, 0x0f, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x65, 0x72, 0x54, 0x77, 0x6f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75,
	0x72, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x62, 0x75, 0x72, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x49, 0x0a, 0x0d, 0x6c, 0x6f, 0x73,
	0x73, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x73, 0x73, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x6c, 0x6f, 0x73, 0x73, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x22, 0x83, 0x02, 0x0a, 0x1b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x42, 0x75, 0x72, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x65,
	0x78, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x42, 0x75,
	0x72, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x12, 0x45, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e,
	0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xa1, 0x02, 0x0a, 0x18, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x65, 0x72, 0x54, 0x77, 0x6f, 0x52, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x65,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x42, 0x75, 0x72, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x65,
	0x73, 0x73, 0x42, 0x75, 0x72, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x12, 0x45, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6a, 0x6e, 0x78, 0x2e,
	0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xd9, 0x01, 0x0a,
	0x13, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x63, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x42, 0x75, 0x72, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x5f, 0x62, 0x75, 0x72, 0x73,
	0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x72,
	0x65, 0x6d, 0x69, 0x75, 0x6d, 0x42, 0x75, 0x72, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x22, 0xb7, 0x03, 0x0a, 0x10, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x53, 0x0a,
	0x13, 0x74, 0x77, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x65, 0x72, 0x54, 0x77, 0x6f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x11, 0x74, 0x77, 0x6f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x12, 0x74, 0x0a, 0x1e, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x72, 0x69, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x54,
	0x68, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x1b, 0x73, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x6b, 0x0a, 0x1b, 0x74, 0x77, 0x6f, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x69, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x54, 0x77, 0x6f, 0x52, 0x61, 0x74, 0x65, 0x54,
	0x68, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x18, 0x74, 0x77, 0x6f,
	0x52, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x16, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e,
	0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72,
	0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x15,
	0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x22, 0xbf, 0x01, 0x0a, 0x07, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x46, 0x6c,
	0x61, 0x67, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x3a, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a,
	0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x22, 0xc9, 0x01, 0x0a, 0x11, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6a,
	0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x31, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x04,
	0x66, 0x6c, 0x61, 0x67, 0x12, 0x3a, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x22, 0xcc, 0x01, 0x0a, 0x14, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x31, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c,
	0x6c, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x04, 0x66,
	0x6c, 0x61, 0x67, 0x12, 0x3a, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22,
	0x90, 0x01, 0x0a, 0x14, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x31, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x04, 0x66, 0x6c,
	0x61, 0x67, 0x22, 0xa4, 0x01, 0x0a, 0x0e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x04,
	0x61, 0x64, 0x64, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x3e, 0x0a, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6a,
	0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6f, 0x0a, 0x09, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x3e, 0x0a, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbf, 0x01, 0x0a, 0x11, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x70, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x34, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x34, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x72, 0x65,
	0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x3e, 0x0a, 0x09,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x77, 0x0a, 0x11,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x3e, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a,
	0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x73, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x73,
	0x63, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x3e, 0x0a, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x73, 0x0a, 0x0d, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12,
	0x3e, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x73, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x63, 0x6d, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d,
	0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6d, 0x61, 0x78, 0x12, 0x3e, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65,
	0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x73, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x63, 0x6d,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x3e, 0x0a, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6a,
	0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x77, 0x0a, 0x11, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x69, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d,
	0x61, 0x78, 0x12, 0x3e, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e,
	0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x95, 0x01, 0x0a, 0x11, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x73, 0x73,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x73, 0x73, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xaa, 0x01, 0x0a, 0x14, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x52, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x75, 0x0a, 0x0f, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x4e, 0x65, 0x78, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x3e,
	0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x74,
	0x0a, 0x0e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d,
	0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6d, 0x61, 0x78, 0x12, 0x3e, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65,
	0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x71, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x56, 0x6c, 0x61,
	0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x3e, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x74, 0x0a, 0x0e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x4d, 0x65, 0x73, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x65, 0x73,
	0x68, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x6d, 0x65, 0x73, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x3e, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x64, 0x0a,
	0x0c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x32, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x3e, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74,
	0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x6c, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x66, 0x6d, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x66, 0x6d, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x66, 0x6d, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x3e, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x74, 0x0a, 0x0e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x66, 0x6d, 0x4f, 0x70, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x3e, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6e, 0x0a, 0x08, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x74, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x3e, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x79, 0x0a, 0x13, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x69, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d,
	0x61, 0x78, 0x12, 0x3e, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e,
	0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x44, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x07, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x52,
	0x07, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x22, 0x32, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x35, 0x0a, 0x12,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x33, 0x0a, 0x10, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x70,
	0x79, 0x54, 0x6f, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x77, 0x0a, 0x15, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x33, 0x0a, 0x07, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x52, 0x07, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x22, 0x71, 0x0a, 0x16, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x28, 0x0a, 0x10, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x56,
	0x0a, 0x12, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x73, 0x73, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74,
	0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x4c, 0x6f, 0x73, 0x73, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x36, 0x0a, 0x18, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x50,
	0x0a, 0x15, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x02, 0x66, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x02, 0x66, 0x63,
	0x22, 0x25, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x70, 0x44,
	0x73, 0x63, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x73, 0x63, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x64, 0x73, 0x63, 0x70, 0x22, 0x62, 0x0a, 0x13, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1d,
	0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x0b,
	0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x13,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e,
	0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x22, 0x96, 0x01, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x78,
	0x74, 0x49, 0x70, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x69, 0x0a, 0x0f, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x39,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6a,
	0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x72,
	0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65,
	0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x61, 0x0a, 0x12, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x09,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x0b, 0x0a, 0x09,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0x75, 0x0a, 0x0f, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x46, 0x6c, 0x65, 0x78, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x61, 0x78,
	0x12, 0x3e, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x81, 0x02, 0x0a, 0x12, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62,
	0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x53, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x46, 0x6c, 0x65, 0x78, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x73, 0x74, 0x52,
	0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x69, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x62, 0x69, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x69, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x62, 0x69, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x79,
	0x74, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x62, 0x79, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x05, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x46, 0x6c, 0x65, 0x78, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x05, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x22, 0x75, 0x0a, 0x18, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6c, 0x65,
	0x78, 0x69, 0x62, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x50, 0x0a, 0x10, 0x66, 0x6c, 0x65, 0x78, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x0e, 0x66, 0x6c, 0x65, 0x78, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x42, 0x07, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x80, 0x02, 0x0a, 0x11,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x73,
	0x6b, 0x12, 0x53, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65,
	0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x54, 0x65, 0x72, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6c, 0x65, 0x78, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x74, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x69, 0x74, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x69, 0x74, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x70,
	0x0a, 0x17, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x4d, 0x0a, 0x0f, 0x66, 0x6c, 0x65,
	0x78, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6c, 0x65, 0x78, 0x69,
	0x62, 0x6c, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x6c, 0x65, 0x78, 0x4d,
	0x61, 0x73, 0x6b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x06, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b,
	0x22, 0xa2, 0x01, 0x0a, 0x0f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x04,
	0x61, 0x64, 0x64, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x3e, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a,
	0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x74, 0x0a, 0x0e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x3e, 0x0a, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c,
	0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x76, 0x0a, 0x10, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x69,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6d, 0x61, 0x78, 0x12, 0x3e, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74,
	0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x7c, 0x0a, 0x16, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x56, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x61,
	0x78, 0x12, 0x3e, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xcc, 0x09, 0x0a, 0x13, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x65, 0x74, 0x12, 0x46, 0x0a, 0x0e, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x0c, 0x69, 0x70, 0x76, 0x34, 0x44, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x73, 0x12, 0x46, 0x0a, 0x0e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e,
	0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x69, 0x70, 0x76,
	0x34, 0x53, 0x72, 0x63, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x73, 0x74,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6a,
	0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x08, 0x64, 0x73, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74,
	0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x08, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x3e, 0x0a,
	0x0a, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x73, 0x63, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x09, 0x64, 0x73, 0x63, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x3d, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x3e, 0x0a, 0x0a,
	0x69, 0x63, 0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x63, 0x6d, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x69, 0x63, 0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0a,
	0x69, 0x63, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x63, 0x6d, 0x70, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x09, 0x69, 0x63, 0x6d, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0e,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x74, 0x6c, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74,
	0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x74, 0x6c, 0x52, 0x04, 0x74, 0x74, 0x6c, 0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x66, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x0c, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x48, 0x0a, 0x0c, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x52, 0x0b, 0x66, 0x72, 0x61, 0x67, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x12, 0x4d,
	0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65,
	0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x4a, 0x0a,
	0x0e, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e,
	0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x70,
	0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x69, 0x70, 0x50, 0x72,
	0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x09, 0x69, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6a, 0x6e, 0x78, 0x2e,
	0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x49, 0x0a,
	0x0a, 0x66, 0x6c, 0x65, 0x78, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62,
	0x6c, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x66,
	0x6c, 0x65, 0x78, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x66, 0x6c, 0x65, 0x78,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x66, 0x6c, 0x65, 0x78, 0x4d, 0x61, 0x73, 0x6b,
	0x22, 0xe7, 0x01, 0x0a, 0x1f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x49,
	0x6e, 0x65, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x1a,
	0x0a, 0x07, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x07, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x12, 0x42, 0x0a, 0x06, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x63, 0x6d, 0x70, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x34,
	0x0a, 0x15, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x13, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf5, 0x01, 0x0a, 0x22, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x49, 0x6e, 0x65, 0x74, 0x4e, 0x6f, 0x6e,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x35, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79,
	0x73, 0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x79, 0x73, 0x6c,
	0x6f, 0x67, 0x12, 0x39, 0x0a, 0x07, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x65,
	0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x65,
	0x72, 0x6d, 0x22, 0xb9, 0x01, 0x0a, 0x14, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72,
	0x6d, 0x49, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x49, 0x6e, 0x65,
	0x74, 0x4e, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4e, 0x74,
	0x12, 0x4c, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d,
	0x49, 0x6e, 0x65, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x22, 0xb1,
	0x02, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x65, 0x74, 0x54, 0x65, 0x72,
	0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e,
	0x0a, 0x07, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x74, 0x65, 0x72, 0x6d, 0x4f, 0x70, 0x12, 0x3f,
	0x0a, 0x09, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x64, 0x6a, 0x61, 0x63,
	0x65, 0x6e, 0x63, 0x79, 0x52, 0x09, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x3f, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x6e, 0x65, 0x74, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x12, 0x40, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x49,
	0x6e, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xcb, 0x06, 0x0a, 0x20, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72,
	0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x6d,
	0x61, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x6e, 0x78, 0x2e,
	0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x64, 0x73,
	0x74, 0x4d, 0x61, 0x63, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x6d, 0x61, 0x63,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65,
	0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x73, 0x72, 0x63, 0x4d,
	0x61, 0x63, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74,
	0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x08, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x38, 0x0a,
	0x09, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x08, 0x73,
	0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x64, 0x73, 0x63, 0x70, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x73, 0x63, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x64, 0x73,
	0x63, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x63, 0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x69, 0x63, 0x6d,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x63, 0x6d, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x69, 0x63, 0x6d,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x45, 0x74, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x72,
	0x6e, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x56, 0x6c,
	0x61, 0x6e, 0x49, 0x64, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x56, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x73, 0x12, 0x5c, 0x0a, 0x15, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x56,
	0x6c, 0x61, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x13, 0x6c, 0x65, 0x61,
	0x72, 0x6e, 0x56, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x22, 0xc5, 0x01, 0x0a, 0x1d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x45,
	0x73, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x1a, 0x0a, 0x07,
	0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x07, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x12, 0x34, 0x0a, 0x02, 0x6e, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x48, 0x00, 0x52, 0x02, 0x6e, 0x68, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x48, 0x6f,
	0x73, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x91, 0x02, 0x0a, 0x20, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x45, 0x73, 0x4e, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a,
	0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x12, 0x39,
	0x0a, 0x07, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72,
	0x52, 0x07, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x65,
	0x78, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x34, 0x0a, 0x02, 0x6c, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x73, 0x73,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x02, 0x6c, 0x70, 0x22, 0xb3, 0x01, 0x0a,
	0x12, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x45, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65,
	0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x54, 0x65, 0x72, 0x6d, 0x45, 0x73, 0x4e, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x4e, 0x74, 0x12, 0x4a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a,
	0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x45, 0x73, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x22, 0xba, 0x02, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x73, 0x54,
	0x65, 0x72, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x3e, 0x0a, 0x07, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x74, 0x65, 0x72, 0x6d, 0x4f, 0x70,
	0x12, 0x3f, 0x0a, 0x09, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x64, 0x6a,
	0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x09, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x4c, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12,
	0x3e, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x45, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xd4, 0x0a, 0x0a, 0x14, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x6e, 0x65, 0x74, 0x36, 0x12, 0x46, 0x0a, 0x0e, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x64, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x44, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x73,
	0x12, 0x46, 0x0a, 0x0e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a,
	0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x69, 0x70, 0x76, 0x36,
	0x53, 0x72, 0x63, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x73, 0x74, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x08, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e,
	0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f,
	0x72, 0x74, 0x52, 0x08, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0a,
	0x64, 0x73, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x73, 0x63, 0x70, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x09, 0x64, 0x73, 0x63, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x11,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65,
	0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x10, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x69, 0x63,
	0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c,
	0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x63, 0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x69, 0x63, 0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x69, 0x63,
	0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c,
	0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x63, 0x6d, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x09, 0x69, 0x63, 0x6d, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0e, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x52, 0x0c, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x4d, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74,
	0x73, 0x12, 0x4c, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52,
	0x0e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x3f, 0x0a, 0x0a, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x69, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x73,
	0x12, 0x49, 0x0a, 0x0a, 0x66, 0x6c, 0x65, 0x78, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6c, 0x65,
	0x78, 0x69, 0x62, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x09, 0x66, 0x6c, 0x65, 0x78, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x66,
	0x6c, 0x65, 0x78, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c,
	0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x66, 0x6c, 0x65, 0x78, 0x4d,
	0x61, 0x73, 0x6b, 0x12, 0x4d, 0x0a, 0x11, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c,
	0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x0f, 0x69, 0x70, 0x76, 0x36, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x4c, 0x0a, 0x0f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x73, 0x73, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x0e, 0x6c, 0x6f, 0x73, 0x73, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x51, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x13, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x52,
	0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0xe2, 0x03, 0x0a, 0x20, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x54, 0x65, 0x72, 0x6d, 0x49, 0x6e, 0x65, 0x74, 0x36, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x06, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x1a, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x12, 0x43, 0x0a, 0x06, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x29, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x63, 0x6d, 0x70, 0x36,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x13, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x0d,
	0x74, 0x6f, 0x70, 0x6f, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52,
	0x0c, 0x74, 0x6f, 0x70, 0x6f, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x4c, 0x0a,
	0x0e, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e,
	0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x6e, 0x64, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x73,
	0x65, 0x6e, 0x64, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x48, 0x6f, 0x73, 0x74, 0x12,
	0x34, 0x0a, 0x02, 0x6e, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x48,
	0x00, 0x52, 0x02, 0x6e, 0x68, 0x42, 0x14, 0x0a, 0x12, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe8, 0x06, 0x0a, 0x23,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x49, 0x6e, 0x65, 0x74, 0x36, 0x4e,
	0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x79,
	0x73, 0x6c, 0x6f, 0x67, 0x12, 0x39, 0x0a, 0x07, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e,
	0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x74, 0x65, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74,
	0x54, 0x65, 0x72, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x69, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x4d,
	0x69, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x49, 0x0a, 0x0d, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6a,
	0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x73, 0x73, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x0c, 0x6c, 0x6f, 0x73, 0x73, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x52, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x12, 0x5b, 0x0a, 0x13, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x12, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x4c, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6a, 0x6e, 0x78, 0x2e,
	0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12,
	0x37, 0x0a, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x49, 0x70,
	0x52, 0x06, 0x6e, 0x65, 0x78, 0x74, 0x49, 0x70, 0x12, 0x3a, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x64,
	0x73, 0x63, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x6e, 0x78, 0x2e,
	0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x70, 0x44, 0x73, 0x63, 0x70, 0x52, 0x06, 0x69, 0x70,
	0x44, 0x73, 0x63, 0x70, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x74, 0x6f, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x70, 0x79, 0x54, 0x6f, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x0a,
	0x63, 0x6f, 0x70, 0x79, 0x54, 0x6f, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0c, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65,
	0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x22, 0xbc, 0x01, 0x0a, 0x15, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x54, 0x65, 0x72, 0x6d, 0x49, 0x6e, 0x65, 0x74, 0x36, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x54, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65,
	0x72, 0x6d, 0x49, 0x6e, 0x65, 0x74, 0x36, 0x4e, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x4e, 0x74, 0x12, 0x4d, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a,
	0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x49, 0x6e, 0x65, 0x74, 0x36, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x22, 0xc4, 0x10, 0x0a, 0x13, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x54, 0x65, 0x72, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x56, 0x70, 0x6c, 0x73, 0x12, 0x46, 0x0a,
	0x0e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e,
	0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x69, 0x70, 0x76, 0x34, 0x44, 0x73, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x73, 0x72,
	0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x0c, 0x69, 0x70, 0x76, 0x34, 0x53, 0x72, 0x63, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x46, 0x0a,
	0x0e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e,
	0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x44, 0x73, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x73, 0x72,
	0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x0c, 0x69, 0x70, 0x76, 0x36, 0x53, 0x72, 0x63, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x38, 0x0a,
	0x09, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x08, 0x64,
	0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x08, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e,
	0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x73,
	0x63, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x64, 0x73, 0x63, 0x70, 0x43, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x42, 0x0a, 0x0c, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65,
	0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x0b, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x4c, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x52, 0x10, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65,
	0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x63, 0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x69, 0x63, 0x6d, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65,
	0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x63, 0x6d, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x69, 0x63, 0x6d, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6a,
	0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x73, 0x12, 0x4c, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x52, 0x0e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x4d, 0x0a, 0x11, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0f,
	0x69, 0x70, 0x76, 0x36, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x41, 0x0a, 0x0b, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x74, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x6d, 0x61, 0x63, 0x73, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x73, 0x72, 0x63, 0x4d, 0x61, 0x63, 0x73,
	0x12, 0x3c, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x73, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x63, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x64, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x73, 0x12, 0x4a,
	0x0a, 0x10, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a,
	0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x45, 0x74, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x76, 0x6c, 0x61, 0x6e,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x6c, 0x65,
	0x61, 0x72, 0x6e, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x13, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x56, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x73, 0x12,
	0x41, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74,
	0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x56,
	0x6c, 0x61, 0x6e, 0x49, 0x64, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x73, 0x12, 0x5c, 0x0a, 0x15, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x56,
	0x6c, 0x61, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x13, 0x6c, 0x65, 0x61,
	0x72, 0x6e, 0x56, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x42, 0x0a, 0x09, 0x73, 0x74, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x70,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x08, 0x73, 0x74, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a,
	0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c,
	0x6d, 0x65, 0x73, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x41, 0x0a, 0x0b,
	0x63, 0x66, 0x6d, 0x5f, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x66, 0x6d, 0x4f, 0x70, 0x63,
	0x6f, 0x64, 0x65, 0x52, 0x0a, 0x63, 0x66, 0x6d, 0x4f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x3e, 0x0a, 0x0a, 0x63, 0x66, 0x6d, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x19, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x66, 0x6d, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x09, 0x63, 0x66, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12,
	0x3b, 0x0a, 0x09, 0x6c, 0x32, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x1a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x32, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x08, 0x6c, 0x32, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x0a,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x09, 0x69, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x49, 0x0a,
	0x0a, 0x66, 0x6c, 0x65, 0x78, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62,
	0x6c, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x66,
	0x6c, 0x65, 0x78, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x66, 0x6c, 0x65, 0x78,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x66, 0x6c, 0x65, 0x78, 0x4d, 0x61, 0x73, 0x6b,
	0x12, 0x4a, 0x0a, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a,
	0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x0d, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x73, 0x22, 0x95, 0x02, 0x0a,
	0x1f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x56, 0x70, 0x6c, 0x73, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x1a, 0x0a, 0x07, 0x64, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x64,
	0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x12, 0x4c, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x6f, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c,
	0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65,
	0x6e, 0x64, 0x54, 0x6f, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x02, 0x6e, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x48, 0x00, 0x52, 0x02, 0x6e, 0x68, 0x42, 0x14,
	0x0a, 0x12, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xdd, 0x02, 0x0a, 0x22, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54,
	0x65, 0x72, 0x6d, 0x56, 0x70, 0x6c, 0x73, 0x4e, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x6c, 0x6f, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x12, 0x39, 0x0a, 0x07,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x52, 0x07,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x20, 0x0a, 0x0c,
	0x6e, 0x6f, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x6e, 0x6f, 0x4d, 0x61, 0x63, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x12, 0x44,
	0x0a, 0x0c, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x70, 0x79, 0x54, 0x6f, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x70, 0x79, 0x54, 0x6f,
	0x48, 0x6f, 0x73, 0x74, 0x22, 0xb9, 0x01, 0x0a, 0x14, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54,
	0x65, 0x72, 0x6d, 0x56, 0x70, 0x6c, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x56,
	0x70, 0x6c, 0x73, 0x4e, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x4e, 0x74, 0x12, 0x4c, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65,
	0x72, 0x6d, 0x56, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x22, 0x84, 0x05, 0x0a, 0x12, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x63, 0x63, 0x12, 0x4a, 0x0a, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x52, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x73, 0x12, 0x4d, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6a,
	0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65,
	0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x6d, 0x61, 0x63,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65,
	0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x73, 0x72, 0x63, 0x4d,
	0x61, 0x63, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e,
	0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x64, 0x73, 0x74, 0x4d, 0x61, 0x63,
	0x73, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x66, 0x6d, 0x5f, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74,
	0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x66, 0x6d, 0x4f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x63, 0x66, 0x6d, 0x4f, 0x70, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x66, 0x6d, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a,
	0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x66, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x09, 0x63, 0x66, 0x6d, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x12, 0x49, 0x0a, 0x0a, 0x66, 0x6c, 0x65, 0x78, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a,
	0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x66, 0x6c, 0x65, 0x78, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x46, 0x0a, 0x09, 0x66, 0x6c, 0x65, 0x78, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6c, 0x65, 0x78, 0x69,
	0x62, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x66,
	0x6c, 0x65, 0x78, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xde, 0x01, 0x0a, 0x1e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x43, 0x63, 0x63, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x06, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x12, 0x1a, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x12, 0x4c, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a,
	0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x48, 0x6f,
	0x73, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9d, 0x02, 0x0a, 0x21, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x43, 0x63, 0x63, 0x4e, 0x6f, 0x6e, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x6c, 0x6f,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x12,
	0x39, 0x0a, 0x07, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65,
	0x72, 0x52, 0x07, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a,
	0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x70, 0x79, 0x54, 0x6f, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x0a, 0x63, 0x6f,
	0x70, 0x79, 0x54, 0x6f, 0x48, 0x6f, 0x73, 0x74, 0x22, 0xb6, 0x01, 0x0a, 0x13, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x43, 0x63, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x52, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65,
	0x72, 0x6d, 0x43, 0x63, 0x63, 0x4e, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x4e, 0x74, 0x12, 0x4b, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74,
	0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x54, 0x65, 0x72, 0x6d, 0x43, 0x63, 0x63, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x22, 0xb2, 0x0a, 0x0a, 0x1b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x46, 0x0a, 0x0e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e,
	0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x69, 0x70, 0x76,
	0x34, 0x44, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x0c, 0x69, 0x70, 0x76, 0x34, 0x53, 0x72, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e,
	0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x69, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64,
	0x72, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e,
	0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f,
	0x72, 0x74, 0x52, 0x08, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x09,
	0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x08, 0x73, 0x72,
	0x63, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x0c, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a,
	0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x0b, 0x69,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x4c, 0x0a, 0x11, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e,
	0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x10, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x69, 0x63, 0x6d, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a,
	0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x63, 0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x69,
	0x63, 0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x69, 0x63, 0x6d, 0x70,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a,
	0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x63, 0x6d, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x69,
	0x63, 0x6d, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x11, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0f, 0x69, 0x70, 0x76, 0x36, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x45, 0x74, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x73, 0x72, 0x63,
	0x5f, 0x6d, 0x61, 0x63, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07,
	0x73, 0x72, 0x63, 0x4d, 0x61, 0x63, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x6d,
	0x61, 0x63, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x6e, 0x78, 0x2e,
	0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x64, 0x73,
	0x74, 0x4d, 0x61, 0x63, 0x73, 0x12, 0x4a, 0x0a, 0x10, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x74, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0e, 0x76, 0x6c, 0x61, 0x6e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x42, 0x0a, 0x09, 0x73, 0x74, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x08, 0x73, 0x74, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x0c, 0x6d, 0x65, 0x73, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x3b, 0x0a,
	0x09, 0x6c, 0x32, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x32, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x08, 0x6c, 0x32, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x0e, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x73, 0x18, 0x13, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x73, 0x22, 0xe7, 0x01, 0x0a, 0x27, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x54, 0x65, 0x72, 0x6d, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x1a, 0x0a, 0x07,
	0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x07, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x12, 0x4c, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x6f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x6f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x6f, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a,
	0x73, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x48, 0x6f, 0x73, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xc3, 0x02, 0x0a, 0x2a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x6e, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x35, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c,
	0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x6c,
	0x6f, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67,
	0x12, 0x39, 0x0a, 0x07, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x65, 0x72, 0x52, 0x07, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x65, 0x72, 0x6d,
	0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74,
	0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x70, 0x79, 0x54, 0x6f, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x70, 0x79,
	0x54, 0x6f, 0x48, 0x6f, 0x73, 0x74, 0x22, 0xd1, 0x01, 0x0a, 0x1c, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x54, 0x65, 0x72, 0x6d, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x4e, 0x74, 0x12, 0x54, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74,
	0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x54, 0x65, 0x72, 0x6d, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x22, 0xdc, 0x02, 0x0a, 0x13, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x70,
	0x6c, 0x73, 0x12, 0x3a, 0x0a, 0x07, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x31, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x70, 0x6c, 0x73,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x07, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x31, 0x12, 0x3a,
	0x0a, 0x07, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x52, 0x07, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0x12, 0x3a, 0x0a, 0x07, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x33, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x07, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x33, 0x12, 0x49, 0x0a, 0x0a, 0x66, 0x6c, 0x65, 0x78, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x66, 0x6c, 0x65, 0x78, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x46, 0x0a, 0x09, 0x66, 0x6c, 0x65, 0x78, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6c, 0x65,
	0x78, 0x69, 0x62, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x52,
	0x08, 0x66, 0x6c, 0x65, 0x78, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x6d, 0x0a, 0x1f, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x06,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x1a, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x64, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x96, 0x01, 0x0a, 0x22, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x4d, 0x70, 0x6c, 0x73, 0x4e, 0x6f, 0x6e, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x35, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c,
	0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65,
	0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65,
	0x72, 0x22, 0xb9, 0x01, 0x0a, 0x14, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d,
	0x4d, 0x70, 0x6c, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c,
	0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x4d, 0x70, 0x6c, 0x73,
	0x4e, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4e, 0x74, 0x12,
	0x4c, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x4d,
	0x70, 0x6c, 0x73, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x22, 0xb4, 0x02,
	0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x65, 0x74, 0x36, 0x54, 0x65, 0x72,
	0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e,
	0x0a, 0x07, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x74, 0x65, 0x72, 0x6d, 0x4f, 0x70, 0x12, 0x3f,
	0x0a, 0x09, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x64, 0x6a, 0x61, 0x63,
	0x65, 0x6e, 0x63, 0x79, 0x52, 0x09, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x40, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x6e, 0x65, 0x74, 0x36, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x12, 0x41, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d,
	0x49, 0x6e, 0x65, 0x74, 0x36, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb1, 0x02, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x56,
	0x70, 0x6c, 0x73, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x72, 0x6d, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x72, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x6f, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e,
	0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54,
	0x65, 0x72, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x74, 0x65,
	0x72, 0x6d, 0x4f, 0x70, 0x12, 0x3f, 0x0a, 0x09, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65,
	0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x41, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x09, 0x61, 0x64, 0x6a, 0x61,
	0x63, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3f, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74,
	0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x54, 0x65, 0x72, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x56, 0x70, 0x6c, 0x73, 0x52, 0x07, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65,
	0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x54, 0x65, 0x72, 0x6d, 0x56, 0x70, 0x6c, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xae, 0x02, 0x0a, 0x0d, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x43, 0x63, 0x63, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65,
	0x72, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x74, 0x65, 0x72, 0x6d, 0x5f,
	0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a,
	0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x74, 0x65, 0x72, 0x6d, 0x4f, 0x70, 0x12, 0x3f, 0x0a, 0x09, 0x61, 0x64, 0x6a, 0x61, 0x63,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x41, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x09, 0x61,
	0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3e, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6a, 0x6e, 0x78, 0x2e,
	0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x63, 0x63, 0x52,
	0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6a, 0x6e, 0x78, 0x2e,
	0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x43, 0x63, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc9, 0x02, 0x0a, 0x16, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x65, 0x72, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x72, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x3e, 0x0a, 0x07, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x74, 0x65, 0x72, 0x6d, 0x4f,
	0x70, 0x12, 0x3f, 0x0a, 0x09, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x64,
	0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x09, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x47, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72,
	0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x07, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6a,
	0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb1, 0x02, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x72, 0x6d,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x72,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x6f, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74,
	0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x54, 0x65, 0x72, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x74,
	0x65, 0x72, 0x6d, 0x4f, 0x70, 0x12, 0x3f, 0x0a, 0x09, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a,
	0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x41, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x09, 0x61, 0x64, 0x6a,
	0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3f, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65,
	0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x54, 0x65, 0x72, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x07,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a,
	0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x4d, 0x70, 0x6c, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xec, 0x03, 0x0a, 0x0a, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x3f, 0x0a, 0x09, 0x69, 0x6e, 0x65, 0x74,
	0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x65, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x48, 0x00, 0x52,
	0x08, 0x69, 0x6e, 0x65, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x39, 0x0a, 0x07, 0x65, 0x73, 0x5f,
	0x74, 0x65, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x45, 0x73, 0x54, 0x65, 0x72, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x65, 0x73,
	0x54, 0x65, 0x72, 0x6d, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x6e, 0x65, 0x74, 0x36, 0x5f, 0x74, 0x65,
	0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a,
	0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x65, 0x74, 0x36, 0x54, 0x65, 0x72, 0x6d, 0x48, 0x00, 0x52, 0x09, 0x69,
	0x6e, 0x65, 0x74, 0x36, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x3f, 0x0a, 0x09, 0x76, 0x70, 0x6c, 0x73,
	0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x56, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x72, 0x6d, 0x48, 0x00, 0x52,
	0x08, 0x76, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x3c, 0x0a, 0x08, 0x63, 0x63, 0x63,
	0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x63, 0x63, 0x54, 0x65, 0x72, 0x6d, 0x48, 0x00, 0x52, 0x07,
	0x63, 0x63, 0x63, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x4f, 0x0a, 0x0d, 0x6d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c,
	0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x3f, 0x0a, 0x09, 0x6d, 0x70, 0x6c, 0x73,
	0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x72, 0x6d, 0x48, 0x00, 0x52,
	0x08, 0x6d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x72, 0x6d, 0x42, 0x0d, 0x0a, 0x0b, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x22, 0x56, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74,
	0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x22, 0x83, 0x02, 0x0a, 0x10, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65,
	0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x06,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6a,
	0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x52, 0x06,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x31, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x3b, 0x0a, 0x0a, 0x74, 0x65, 0x72,
	0x6d, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x09, 0x74, 0x65, 0x72,
	0x6d, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x86, 0x02, 0x0a, 0x13, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e,
	0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46,
	0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12,
	0x31, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x04, 0x66, 0x6c,
	0x61, 0x67, 0x12, 0x3b, 0x0a, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74,
	0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x54, 0x65, 0x72, 0x6d, 0x52, 0x09, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x63, 0x0a, 0x13, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x52, 0x06, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x22, 0x5d, 0x0a, 0x17, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x5e, 0x0a, 0x18, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x5d, 0x0a, 0x17, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x81, 0x02, 0x0a, 0x18, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x50, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x60, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x02,
	0x12, 0x13, 0x0a, 0x0f, 0x45, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x5f, 0x4f, 0x50, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x10, 0x04, 0x22, 0x5e, 0x0a, 0x18, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x83, 0x02, 0x0a, 0x19, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x51, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6a, 0x6e, 0x78, 0x2e,
	0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x60, 0x0a, 0x0a, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x4f, 0x4b, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x55, 0x4e, 0x53, 0x55, 0x50,
	0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x4f, 0x50, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4e,
	0x4f, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x04, 0x22, 0xf3, 0x01, 0x0a,
	0x11, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65,
	0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x60, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x07,
	0x0a, 0x03, 0x45, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x45, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f,
	0x45, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x4f, 0x50, 0x10,
	0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x10, 0x04, 0x22, 0xf9, 0x01, 0x0a, 0x14, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x70, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4c,
	0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x31, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x60, 0x0a, 0x0a,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x4f,
	0x4b, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x55, 0x4e, 0x53,
	0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x4f, 0x50, 0x10, 0x03, 0x12, 0x0f, 0x0a,
	0x0b, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x04, 0x22, 0xf9,
	0x01, 0x0a, 0x14, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65,
	0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4c, 0x0a, 0x08, 0x73, 0x75,
	0x62, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6a,
	0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x60, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x4f, 0x4b, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e,
	0x41, 0x4c, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f,
	0x52, 0x54, 0x45, 0x44, 0x5f, 0x4f, 0x50, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x04, 0x22, 0xfb, 0x01, 0x0a, 0x15, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4d, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6a, 0x6e, 0x78, 0x2e,
	0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x60, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c,
	0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54,
	0x45, 0x44, 0x5f, 0x4f, 0x50, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x04, 0x22, 0x81, 0x02, 0x0a, 0x18, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x50, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x60, 0x0a, 0x0a, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x4f, 0x4b, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x55, 0x4e, 0x53, 0x55, 0x50,
	0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x4f, 0x50, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4e,
	0x4f, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x04, 0x22, 0xf5, 0x01, 0x0a,
	0x12, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a,
	0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x65, 0x72, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x60, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x07, 0x0a, 0x03, 0x45, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x45, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x13,
	0x0a, 0x0f, 0x45, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x4f,
	0x50, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x10, 0x04, 0x22, 0xfb, 0x01, 0x0a, 0x15, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x52, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x4d, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x60, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x07,
	0x0a, 0x03, 0x45, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x45, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f,
	0x45, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x4f, 0x50, 0x10,
	0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x10, 0x04, 0x22, 0xfb, 0x01, 0x0a, 0x15, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a,
	0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x70,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x4d, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x32, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x60,
	0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x07, 0x0a, 0x03,
	0x45, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x45,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x55,
	0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x4f, 0x50, 0x10, 0x03, 0x12,
	0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x04,
	0x22, 0xe1, 0x02, 0x0a, 0x18, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x50, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x22, 0x6d, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x45, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10,
	0x02, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45,
	0x44, 0x5f, 0x4f, 0x50, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x49, 0x4d, 0x45, 0x4f,
	0x55, 0x54, 0x10, 0x05, 0x22, 0xe3, 0x02, 0x0a, 0x19, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x51, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65,
	0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x22, 0x6d, 0x0a, 0x0a, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x4f, 0x4b,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x55, 0x4e, 0x53, 0x55,
	0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x4f, 0x50, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b,
	0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x04, 0x12, 0x0b, 0x0a,
	0x07, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x05, 0x22, 0x51, 0x0a, 0x11, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x4f, 0x62, 0x6a, 0x56, 0x6c, 0x61, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x61, 0x0a,
	0x19, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x4f, 0x62, 0x6a, 0x42, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x22, 0x87, 0x02, 0x0a, 0x12, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x4f,
	0x62, 0x6a, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2b, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x39, 0x0a,
	0x04, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x4f, 0x62, 0x6a, 0x56, 0x6c, 0x61, 0x6e,
	0x48, 0x00, 0x52, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x52, 0x0a, 0x0d, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x4f, 0x62, 0x6a,
	0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0c,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x0c, 0x0a, 0x0a,
	0x62, 0x69, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xe3, 0x02, 0x0a, 0x17, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x42, 0x69, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74,
	0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x4f, 0x62, 0x6a, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x07, 0x6f, 0x62, 0x6a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x62, 0x69, 0x6e, 0x64,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x4f, 0x62, 0x6a, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x0a, 0x62, 0x69, 0x6e, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x4c, 0x0a, 0x0e, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65,
	0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x42, 0x69, 0x6e, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x62, 0x69, 0x6e, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a,
	0x0b, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x62, 0x69, 0x6e, 0x64, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x22, 0xe6, 0x02, 0x0a, 0x1a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x42, 0x69,
	0x6e, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x30, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x3e, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e,
	0x64, 0x4f, 0x62, 0x6a, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x45, 0x0a, 0x0b, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74,
	0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x42, 0x69, 0x6e, 0x64, 0x4f, 0x62, 0x6a, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x62, 0x69,
	0x6e, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x4c, 0x0a, 0x0e, 0x62, 0x69, 0x6e, 0x64,
	0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x62, 0x69, 0x6e, 0x64, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0b, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x66,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x62,
	0x69, 0x6e, 0x64, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x2a, 0x40, 0x0a, 0x0e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x0a, 0x4f,
	0x50, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4f,
	0x50, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x50, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x02, 0x2a, 0x9a, 0x01, 0x0a, 0x0b,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x54, 0x57, 0x4f, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x45, 0x52, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x49, 0x4e, 0x47, 0x4c,
	0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x45, 0x5f, 0x43, 0x4f, 0x4c,
	0x4f, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c,
	0x54, 0x57, 0x4f, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x45, 0x5f, 0x43,
	0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52, 0x10, 0x03, 0x12, 0x18,
	0x0a, 0x14, 0x48, 0x49, 0x45, 0x52, 0x41, 0x52, 0x43, 0x48, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52, 0x10, 0x04, 0x2a, 0x69, 0x0a, 0x0b, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x45, 0x52, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52, 0x5f, 0x46, 0x4c, 0x41,
	0x47, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x10,
	0x01, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52, 0x5f, 0x46, 0x4c, 0x41,
	0x47, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x43, 0x10, 0x02, 0x2a, 0x66, 0x0a, 0x14, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x43,
	0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x42, 0x4c, 0x49, 0x4e, 0x44, 0x10, 0x01, 0x12,
	0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f,
	0x4c, 0x4f, 0x52, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x45, 0x10, 0x02, 0x2a, 0x9b, 0x01, 0x0a, 0x12,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x73, 0x73, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x4f, 0x53, 0x53, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x4c, 0x4f, 0x53, 0x53, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x48,
	0x49, 0x47, 0x48, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x4f, 0x53, 0x53, 0x5f, 0x50, 0x52,
	0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x5f, 0x48, 0x49,
	0x47, 0x48, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x4f, 0x53, 0x53, 0x5f, 0x50, 0x52, 0x49,
	0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x5f, 0x4c, 0x4f, 0x57,
	0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x4f, 0x53, 0x53, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x04, 0x2a, 0xbb, 0x01, 0x0a, 0x15, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x41, 0x53, 0x53, 0x55, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x20, 0x0a, 0x1c, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x5f, 0x42, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x46, 0x46, 0x4f, 0x52, 0x54, 0x10,
	0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x45, 0x44, 0x49, 0x54, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x24, 0x0a, 0x20, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10, 0x04, 0x2a, 0x5b, 0x0a, 0x13, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x54, 0x50, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x50, 0x5f, 0x46, 0x4c, 0x41, 0x47,
	0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53,
	0x54, 0x50, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x2a, 0xf5, 0x03, 0x0a, 0x16, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x63, 0x6d, 0x70, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x24, 0x0a, 0x20, 0x49, 0x43, 0x4d, 0x50, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x49, 0x53, 0x54,
	0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x4c, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x48, 0x49, 0x42, 0x49,
	0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x43, 0x4d, 0x50, 0x5f, 0x42, 0x41,
	0x44, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x54, 0x4f, 0x53, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14,
	0x49, 0x43, 0x4d, 0x50, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x54, 0x4f, 0x53, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x43, 0x4d, 0x50, 0x5f, 0x46,
	0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x45, 0x45,
	0x44, 0x45, 0x44, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x43, 0x4d, 0x50, 0x5f, 0x48, 0x4f,
	0x53, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x48, 0x49, 0x42, 0x49, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12,
	0x15, 0x0a, 0x11, 0x49, 0x43, 0x4d, 0x50, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x43, 0x4d, 0x50, 0x5f, 0x48,
	0x4f, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x06, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x43, 0x4d, 0x50, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x48, 0x49, 0x42, 0x49, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x18,
	0x0a, 0x14, 0x49, 0x43, 0x4d, 0x50, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x43, 0x4d, 0x50,
	0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x43, 0x4d, 0x50, 0x5f, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x43, 0x4d, 0x50, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x45, 0x44,
	0x45, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x55, 0x54, 0x4f, 0x46, 0x46, 0x10, 0x0b, 0x12, 0x1d, 0x0a,
	0x19, 0x49, 0x43, 0x4d, 0x50, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x45, 0x44, 0x45, 0x4e, 0x43, 0x45,
	0x5f, 0x56, 0x49, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0c, 0x12, 0x1d, 0x0a, 0x19,
	0x49, 0x43, 0x4d, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x4e,
	0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0d, 0x12, 0x1d, 0x0a, 0x19, 0x49,
	0x43, 0x4d, 0x50, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x5f,
	0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x43,
	0x4d, 0x50, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x43, 0x4d, 0x50,
	0x5f, 0x54, 0x43, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x10, 0x2a, 0xda, 0x03, 0x0a,
	0x17, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x63, 0x6d, 0x70, 0x36, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x21, 0x49, 0x43, 0x4d, 0x50,
	0x36, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x4c, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x48, 0x49, 0x42, 0x49, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x21, 0x0a, 0x1d, 0x49, 0x43, 0x4d, 0x50, 0x36, 0x5f, 0x4e, 0x4f, 0x5f, 0x52, 0x4f, 0x55, 0x54,
	0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x43, 0x4d, 0x50, 0x36, 0x5f, 0x42, 0x45, 0x59, 0x4f,
	0x4e, 0x44, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x43,
	0x4d, 0x50, 0x36, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x52, 0x45,
	0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x43, 0x4d,
	0x50, 0x36, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x2a, 0x0a, 0x26, 0x49, 0x43, 0x4d, 0x50, 0x36, 0x5f, 0x54,
	0x54, 0x4c, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x5f, 0x54, 0x4f, 0x5f, 0x5a, 0x45, 0x52, 0x4f,
	0x5f, 0x44, 0x55, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x10,
	0x05, 0x12, 0x2d, 0x0a, 0x29, 0x49, 0x43, 0x4d, 0x50, 0x36, 0x5f, 0x54, 0x54, 0x4c, 0x5f, 0x45,
	0x51, 0x55, 0x41, 0x4c, 0x5f, 0x54, 0x4f, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x5f, 0x44, 0x55, 0x52,
	0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x53, 0x45, 0x4d, 0x42, 0x4c, 0x59, 0x10, 0x06,
	0x12, 0x18, 0x0a, 0x14, 0x49, 0x43, 0x4d, 0x50, 0x36, 0x5f, 0x49, 0x50, 0x36, 0x5f, 0x48, 0x45,
	0x41, 0x44, 0x45, 0x52, 0x5f, 0x42, 0x41, 0x44, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x43,
	0x4d, 0x50, 0x36, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x43, 0x4f, 0x47, 0x4e, 0x49, 0x5a, 0x45, 0x44,
	0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x43, 0x4d,
	0x50, 0x36, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x43, 0x4f, 0x47, 0x4e, 0x49, 0x5a, 0x45, 0x44, 0x5f,
	0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x09, 0x12, 0x24, 0x0a,
	0x20, 0x49, 0x43, 0x4d, 0x50, 0x36, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45,
	0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e,
	0x44, 0x10, 0x0a, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x43, 0x4d, 0x50, 0x36, 0x5f, 0x52, 0x4f, 0x55,
	0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x0b, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x43, 0x4d, 0x50,
	0x36, 0x5f, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45,
	0x52, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x0c, 0x2a, 0x73, 0x0a, 0x13, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x11, 0x0a, 0x0d, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x4f, 0x4e, 0x54, 0x5f, 0x46, 0x52, 0x41, 0x47,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x53, 0x5f, 0x46, 0x52, 0x41,
	0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x49, 0x52, 0x53, 0x54,
	0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x4c,
	0x41, 0x53, 0x54, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x2a, 0xde,
	0x01, 0x0a, 0x10, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x45, 0x43, 0x45, 0x44, 0x45, 0x4e, 0x43,
	0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x50,
	0x52, 0x45, 0x43, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59,
	0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x45, 0x43, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49,
	0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52,
	0x45, 0x43, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x46, 0x4c, 0x41, 0x53, 0x48, 0x10, 0x03, 0x12, 0x1b,
	0x0a, 0x17, 0x50, 0x52, 0x45, 0x43, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x46, 0x4c, 0x41, 0x53, 0x48,
	0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x45, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x50,
	0x52, 0x45, 0x43, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c,
	0x5f, 0x45, 0x43, 0x50, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52, 0x45, 0x43, 0x45, 0x4e,
	0x43, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x4f, 0x4c, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x45, 0x43, 0x45, 0x4e, 0x43,
	0x45, 0x5f, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10, 0x07, 0x2a,
	0x80, 0x01, 0x0a, 0x13, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x45, 0x52, 0x4d, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x54,
	0x45, 0x52, 0x4d, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45,
	0x10, 0x03, 0x2a, 0x36, 0x0a, 0x13, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x64, 0x6a, 0x61,
	0x63, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x45, 0x52,
	0x4d, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x45, 0x52,
	0x4d, 0x5f, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45, 0x10, 0x01, 0x2a, 0x8b, 0x01, 0x0a, 0x1e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6c,
	0x65, 0x78, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x13, 0x46, 0x4c, 0x45, 0x58, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x4c, 0x45, 0x58, 0x5f, 0x4f,
	0x46, 0x46, 0x53, 0x45, 0x54, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x52, 0x45,
	0x45, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x4c, 0x45, 0x58, 0x5f, 0x4f, 0x46, 0x46, 0x53,
	0x45, 0x54, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x46, 0x4f, 0x55, 0x52, 0x10, 0x02, 0x12,
	0x17, 0x0a, 0x13, 0x46, 0x4c, 0x45, 0x58, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x5f, 0x50,
	0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x03, 0x2a, 0x31, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x43, 0x10, 0x01, 0x2a, 0xa1, 0x01, 0x0a, 0x0e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x12,
	0x0a, 0x0e, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x49, 0x4e, 0x45,
	0x54, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x49, 0x4e,
	0x45, 0x54, 0x36, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f,
	0x45, 0x53, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x56,
	0x50, 0x4c, 0x53, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f,
	0x4d, 0x55, 0x4c, 0x54, 0x49, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x05, 0x12, 0x0e,
	0x0a, 0x0a, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x43, 0x43, 0x43, 0x10, 0x06, 0x12, 0x0f,
	0x0a, 0x0b, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x10, 0x07, 0x2a,
	0x1d, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x0e,
	0x0a, 0x0a, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x2a, 0x66,
	0x0a, 0x13, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x44, 0x49,
	0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x42,
	0x49, 0x4e, 0x44, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x55,
	0x54, 0x50, 0x55, 0x54, 0x10, 0x02, 0x2a, 0x9e, 0x01, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x42, 0x69, 0x6e, 0x64, 0x4f, 0x62, 0x6a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x42, 0x49, 0x4e, 0x44, 0x5f, 0x4f, 0x42, 0x4a, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x49, 0x4e, 0x44, 0x5f,
	0x4f, 0x42, 0x4a, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x4f, 0x42, 0x4a,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x57, 0x44, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x02, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x4f, 0x42, 0x4a, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x49, 0x4e,
	0x44, 0x5f, 0x4f, 0x42, 0x4a, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x52, 0x47, 0x5f, 0x44,
	0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x04, 0x32, 0xd8, 0x09, 0x0a, 0x08, 0x46, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x12, 0x56, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x12, 0x22, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e,
	0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0c,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x6a,
	0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a,
	0x0c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x12, 0x25, 0x2e,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65,
	0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x12,
	0x29, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x42, 0x69, 0x6e, 0x64,
	0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x10, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42,
	0x69, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2c, 0x2e, 0x6a, 0x6e, 0x78, 0x2e,
	0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x42, 0x69, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65,
	0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x42, 0x69, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0a, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x12, 0x23, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a,
	0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x65, 0x72, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x62, 0x0a, 0x0d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x12, 0x26, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6a, 0x6e, 0x78, 0x2e,
	0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e,
	0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x10, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x65, 0x74, 0x12, 0x29, 0x2e, 0x6a,
	0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65,
	0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x11, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x65, 0x74, 0x12, 0x2a, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74,
	0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x10, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x29, 0x2e, 0x6a, 0x6e, 0x78, 0x2e,
	0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x6e, 0x0a, 0x11, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x2a, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65,
	0x74, 0x2e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x66, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x24, 0x5a, 0x11, 0x6c, 0x61, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x82, 0xb5, 0x18, 0x05, 0x30, 0x2e, 0x30, 0x2e, 0x30,
	0x8a, 0xb5, 0x18, 0x04, 0x31, 0x39, 0x2e, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_jnx_firewall_service_proto_rawDescOnce sync.Once
	file_jnx_firewall_service_proto_rawDescData = file_jnx_firewall_service_proto_rawDesc
)

func file_jnx_firewall_service_proto_rawDescGZIP() []byte {
	file_jnx_firewall_service_proto_rawDescOnce.Do(func() {
		file_jnx_firewall_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_jnx_firewall_service_proto_rawDescData)
	})
	return file_jnx_firewall_service_proto_rawDescData
}

var file_jnx_firewall_service_proto_enumTypes = make([]protoimpl.EnumInfo, 31)
var file_jnx_firewall_service_proto_msgTypes = make([]protoimpl.MessageInfo, 115)
var file_jnx_firewall_service_proto_goTypes = []interface{}{
	(MatchOperation)(0),                                // 0: jnx.jet.firewall.MatchOperation
	(PolicerType)(0),                                   // 1: jnx.jet.firewall.PolicerType
	(PolicerFlag)(0),                                   // 2: jnx.jet.firewall.PolicerFlag
	(PolicerColorModeType)(0),                          // 3: jnx.jet.firewall.PolicerColorModeType
	(FilterLossPriority)(0),                            // 4: jnx.jet.firewall.FilterLossPriority
	(FilterForwardingClass)(0),                         // 5: jnx.jet.firewall.FilterForwardingClass
	(FilterStpMatchFlags)(0),                           // 6: jnx.jet.firewall.FilterStpMatchFlags
	(ActionIcmpRejectReason)(0),                        // 7: jnx.jet.firewall.ActionIcmpRejectReason
	(ActionIcmp6RejectReason)(0),                       // 8: jnx.jet.firewall.ActionIcmp6RejectReason
	(FilterFragmentFlags)(0),                           // 9: jnx.jet.firewall.FilterFragmentFlags
	(FilterPrecedence)(0),                              // 10: jnx.jet.firewall.FilterPrecedence
	(FilterTermOperation)(0),                           // 11: jnx.jet.firewall.FilterTermOperation
	(FilterAdjacencyType)(0),                           // 12: jnx.jet.firewall.FilterAdjacencyType
	(FilterTermMatchFlexStartOffest)(0),                // 13: jnx.jet.firewall.FilterTermMatchFlexStartOffest
	(FilterTypes)(0),                                   // 14: jnx.jet.firewall.FilterTypes
	(FilterFamilies)(0),                                // 15: jnx.jet.firewall.FilterFamilies
	(FilterFlags)(0),                                   // 16: jnx.jet.firewall.FilterFlags
	(FilterBindDirection)(0),                           // 17: jnx.jet.firewall.FilterBindDirection
	(FilterBindObjType)(0),                             // 18: jnx.jet.firewall.FilterBindObjType
	(FilterCounterSetResponse_StatusCode)(0),           // 19: jnx.jet.firewall.FilterCounterSetResponse.StatusCode
	(PolicerCounterSetResponse_StatusCode)(0),          // 20: jnx.jet.firewall.PolicerCounterSetResponse.StatusCode
	(FilterAddResponse_StatusCode)(0),                  // 21: jnx.jet.firewall.FilterAddResponse.StatusCode
	(FilterDeleteResponse_StatusCode)(0),               // 22: jnx.jet.firewall.FilterDeleteResponse.StatusCode
	(FilterModifyResponse_StatusCode)(0),               // 23: jnx.jet.firewall.FilterModifyResponse.StatusCode
	(FilterBindAddResponse_StatusCode)(0),              // 24: jnx.jet.firewall.FilterBindAddResponse.StatusCode
	(FilterBindDeleteResponse_StatusCode)(0),           // 25: jnx.jet.firewall.FilterBindDeleteResponse.StatusCode
	(PolicerAddResponse_StatusCode)(0),                 // 26: jnx.jet.firewall.PolicerAddResponse.StatusCode
	(PolicerDeleteResponse_StatusCode)(0),              // 27: jnx.jet.firewall.PolicerDeleteResponse.StatusCode
	(PolicerModifyResponse_StatusCode)(0),              // 28: jnx.jet.firewall.PolicerModifyResponse.StatusCode
	(FilterCounterGetResponse_StatusCode)(0),           // 29: jnx.jet.firewall.FilterCounterGetResponse.StatusCode
	(PolicerCounterGetResponse_StatusCode)(0),          // 30: jnx.jet.firewall.PolicerCounterGetResponse.StatusCode
	(*PolicerTwoColor)(nil),                            // 31: jnx.jet.firewall.PolicerTwoColor
	(*PolicerSingleRateThreeColor)(nil),                // 32: jnx.jet.firewall.PolicerSingleRateThreeColor
	(*PolicerTwoRateThreeColor)(nil),                   // 33: jnx.jet.firewall.PolicerTwoRateThreeColor
	(*PolicerHierarchical)(nil),                        // 34: jnx.jet.firewall.PolicerHierarchical
	(*PolicerParameter)(nil),                           // 35: jnx.jet.firewall.PolicerParameter
	(*Policer)(nil),                                    // 36: jnx.jet.firewall.Policer
	(*PolicerAddRequest)(nil),                          // 37: jnx.jet.firewall.PolicerAddRequest
	(*PolicerModifyRequest)(nil),                       // 38: jnx.jet.firewall.PolicerModifyRequest
	(*PolicerDeleteRequest)(nil),                       // 39: jnx.jet.firewall.PolicerDeleteRequest
	(*MatchIpAddress)(nil),                             // 40: jnx.jet.firewall.MatchIpAddress
	(*MatchPort)(nil),                                  // 41: jnx.jet.firewall.MatchPort
	(*MatchIpPrecedence)(nil),                          // 42: jnx.jet.firewall.MatchIpPrecedence
	(*MatchTrafficClass)(nil),                          // 43: jnx.jet.firewall.MatchTrafficClass
	(*MatchDscpCode)(nil),                              // 44: jnx.jet.firewall.MatchDscpCode
	(*MatchProtocol)(nil),                              // 45: jnx.jet.firewall.MatchProtocol
	(*MatchIcmpType)(nil),                              // 46: jnx.jet.firewall.MatchIcmpType
	(*MatchIcmpCode)(nil),                              // 47: jnx.jet.firewall.MatchIcmpCode
	(*MatchPacketLength)(nil),                          // 48: jnx.jet.firewall.MatchPacketLength
	(*MatchLossPriority)(nil),                          // 49: jnx.jet.firewall.MatchLossPriority
	(*MatchForwardingClass)(nil),                       // 50: jnx.jet.firewall.MatchForwardingClass
	(*MatchNextHeader)(nil),                            // 51: jnx.jet.firewall.MatchNextHeader
	(*MatchMplsLabel)(nil),                             // 52: jnx.jet.firewall.MatchMplsLabel
	(*MatchVlanId)(nil),                                // 53: jnx.jet.firewall.MatchVlanId
	(*MatchMeshGroup)(nil),                             // 54: jnx.jet.firewall.MatchMeshGroup
	(*MatchL2Token)(nil),                               // 55: jnx.jet.firewall.MatchL2Token
	(*MatchCfmLevel)(nil),                              // 56: jnx.jet.firewall.MatchCfmLevel
	(*MatchCfmOpcode)(nil),                             // 57: jnx.jet.firewall.MatchCfmOpcode
	(*MatchTtl)(nil),                                   // 58: jnx.jet.firewall.MatchTtl
	(*MatchFragmentOffset)(nil),                        // 59: jnx.jet.firewall.MatchFragmentOffset
	(*ActionPolicer)(nil),                              // 60: jnx.jet.firewall.ActionPolicer
	(*ActionCounter)(nil),                              // 61: jnx.jet.firewall.ActionCounter
	(*ActionSendToClient)(nil),                         // 62: jnx.jet.firewall.ActionSendToClient
	(*ActionCopyToHost)(nil),                           // 63: jnx.jet.firewall.ActionCopyToHost
	(*ActionPolicerInstance)(nil),                      // 64: jnx.jet.firewall.ActionPolicerInstance
	(*ActionTopologyRedirect)(nil),                     // 65: jnx.jet.firewall.ActionTopologyRedirect
	(*ActionSetNexthop)(nil),                           // 66: jnx.jet.firewall.ActionSetNexthop
	(*ActionLossPriority)(nil),                         // 67: jnx.jet.firewall.ActionLossPriority
	(*ActionForwardingPriority)(nil),                   // 68: jnx.jet.firewall.ActionForwardingPriority
	(*ActionForwardingClass)(nil),                      // 69: jnx.jet.firewall.ActionForwardingClass
	(*ActionSetIpDscp)(nil),                            // 70: jnx.jet.firewall.ActionSetIpDscp
	(*ActionInterfaceUnit)(nil),                        // 71: jnx.jet.firewall.ActionInterfaceUnit
	(*ActionNextInterface)(nil),                        // 72: jnx.jet.firewall.ActionNextInterface
	(*ActionNextIp)(nil),                               // 73: jnx.jet.firewall.ActionNextIp
	(*FilterAdjacency)(nil),                            // 74: jnx.jet.firewall.FilterAdjacency
	(*MatchInterfaceUnit)(nil),                         // 75: jnx.jet.firewall.MatchInterfaceUnit
	(*MatchFlexOffset)(nil),                            // 76: jnx.jet.firewall.MatchFlexOffset
	(*MatchFlexibleRange)(nil),                         // 77: jnx.jet.firewall.MatchFlexibleRange
	(*MatchFlexibleOffsetRange)(nil),                   // 78: jnx.jet.firewall.MatchFlexibleOffsetRange
	(*MatchFlexibleMask)(nil),                          // 79: jnx.jet.firewall.MatchFlexibleMask
	(*MatchFlexibleOffsetMask)(nil),                    // 80: jnx.jet.firewall.MatchFlexibleOffsetMask
	(*MatchMacAddress)(nil),                            // 81: jnx.jet.firewall.MatchMacAddress
	(*MatchEtherType)(nil),                             // 82: jnx.jet.firewall.MatchEtherType
	(*MatchLearnVlanId)(nil),                           // 83: jnx.jet.firewall.MatchLearnVlanId
	(*MatchLearnVlanPriority)(nil),                     // 84: jnx.jet.firewall.MatchLearnVlanPriority
	(*FilterTermMatchInet)(nil),                        // 85: jnx.jet.firewall.FilterTermMatchInet
	(*FilterTermInetTerminatingAction)(nil),            // 86: jnx.jet.firewall.FilterTermInetTerminatingAction
	(*FilterTermInetNonTerminatingAction)(nil),         // 87: jnx.jet.firewall.FilterTermInetNonTerminatingAction
	(*FilterTermInetAction)(nil),                       // 88: jnx.jet.firewall.FilterTermInetAction
	(*FilterInetTerm)(nil),                             // 89: jnx.jet.firewall.FilterInetTerm
	(*FilterTermMatchEthernetSwitching)(nil),           // 90: jnx.jet.firewall.FilterTermMatchEthernetSwitching
	(*FilterTermEsTerminatingAction)(nil),              // 91: jnx.jet.firewall.FilterTermEsTerminatingAction
	(*FilterTermEsNonTerminatingAction)(nil),           // 92: jnx.jet.firewall.FilterTermEsNonTerminatingAction
	(*FilterTermEsAction)(nil),                         // 93: jnx.jet.firewall.FilterTermEsAction
	(*FilterEsTerm)(nil),                               // 94: jnx.jet.firewall.FilterEsTerm
	(*FilterTermMatchInet6)(nil),                       // 95: jnx.jet.firewall.FilterTermMatchInet6
	(*FilterTermInet6TerminatingAction)(nil),           // 96: jnx.jet.firewall.FilterTermInet6TerminatingAction
	(*FilterTermInet6NonTerminatingAction)(nil),        // 97: jnx.jet.firewall.FilterTermInet6NonTerminatingAction
	(*FilterTermInet6Action)(nil),                      // 98: jnx.jet.firewall.FilterTermInet6Action
	(*FilterTermMatchVpls)(nil),                        // 99: jnx.jet.firewall.FilterTermMatchVpls
	(*FilterTermVplsTerminatingAction)(nil),            // 100: jnx.jet.firewall.FilterTermVplsTerminatingAction
	(*FilterTermVplsNonTerminatingAction)(nil),         // 101: jnx.jet.firewall.FilterTermVplsNonTerminatingAction
	(*FilterTermVplsAction)(nil),                       // 102: jnx.jet.firewall.FilterTermVplsAction
	(*FilterTermMatchCcc)(nil),                         // 103: jnx.jet.firewall.FilterTermMatchCcc
	(*FilterTermCccTerminatingAction)(nil),             // 104: jnx.jet.firewall.FilterTermCccTerminatingAction
	(*FilterTermCccNonTerminatingAction)(nil),          // 105: jnx.jet.firewall.FilterTermCccNonTerminatingAction
	(*FilterTermCccAction)(nil),                        // 106: jnx.jet.firewall.FilterTermCccAction
	(*FilterTermMatchMultiService)(nil),                // 107: jnx.jet.firewall.FilterTermMatchMultiService
	(*FilterTermMultiServiceTerminatingAction)(nil),    // 108: jnx.jet.firewall.FilterTermMultiServiceTerminatingAction
	(*FilterTermMultiServiceNonTerminatingAction)(nil), // 109: jnx.jet.firewall.FilterTermMultiServiceNonTerminatingAction
	(*FilterTermMultiServiceAction)(nil),               // 110: jnx.jet.firewall.FilterTermMultiServiceAction
	(*FilterTermMatchMpls)(nil),                        // 111: jnx.jet.firewall.FilterTermMatchMpls
	(*FilterTermMplsTerminatingAction)(nil),            // 112: jnx.jet.firewall.FilterTermMplsTerminatingAction
	(*FilterTermMplsNonTerminatingAction)(nil),         // 113: jnx.jet.firewall.FilterTermMplsNonTerminatingAction
	(*FilterTermMplsAction)(nil),                       // 114: jnx.jet.firewall.FilterTermMplsAction
	(*FilterInet6Term)(nil),                            // 115: jnx.jet.firewall.FilterInet6Term
	(*FilterVplsTerm)(nil),                             // 116: jnx.jet.firewall.FilterVplsTerm
	(*FilterCccTerm)(nil),                              // 117: jnx.jet.firewall.FilterCccTerm
	(*FilterMultiServiceTerm)(nil),                     // 118: jnx.jet.firewall.FilterMultiServiceTerm
	(*FilterMplsTerm)(nil),                             // 119: jnx.jet.firewall.FilterMplsTerm
	(*FilterTerm)(nil),                                 // 120: jnx.jet.firewall.FilterTerm
	(*Filter)(nil),                                     // 121: jnx.jet.firewall.Filter
	(*FilterAddRequest)(nil),                           // 122: jnx.jet.firewall.FilterAddRequest
	(*FilterModifyRequest)(nil),                        // 123: jnx.jet.firewall.FilterModifyRequest
	(*FilterDeleteRequest)(nil),                        // 124: jnx.jet.firewall.FilterDeleteRequest
	(*FilterCounterGetRequest)(nil),                    // 125: jnx.jet.firewall.FilterCounterGetRequest
	(*PolicerCounterGetRequest)(nil),                   // 126: jnx.jet.firewall.PolicerCounterGetRequest
	(*FilterCounterSetRequest)(nil),                    // 127: jnx.jet.firewall.FilterCounterSetRequest
	(*FilterCounterSetResponse)(nil),                   // 128: jnx.jet.firewall.FilterCounterSetResponse
	(*PolicerCounterSetRequest)(nil),                   // 129: jnx.jet.firewall.PolicerCounterSetRequest
	(*PolicerCounterSetResponse)(nil),                  // 130: jnx.jet.firewall.PolicerCounterSetResponse
	(*FilterAddResponse)(nil),                          // 131: jnx.jet.firewall.FilterAddResponse
	(*FilterDeleteResponse)(nil),                       // 132: jnx.jet.firewall.FilterDeleteResponse
	(*FilterModifyResponse)(nil),                       // 133: jnx.jet.firewall.FilterModifyResponse
	(*FilterBindAddResponse)(nil),                      // 134: jnx.jet.firewall.FilterBindAddResponse
	(*FilterBindDeleteResponse)(nil),                   // 135: jnx.jet.firewall.FilterBindDeleteResponse
	(*PolicerAddResponse)(nil),                         // 136: jnx.jet.firewall.PolicerAddResponse
	(*PolicerDeleteResponse)(nil),                      // 137: jnx.jet.firewall.PolicerDeleteResponse
	(*PolicerModifyResponse)(nil),                      // 138: jnx.jet.firewall.PolicerModifyResponse
	(*FilterCounterGetResponse)(nil),                   // 139: jnx.jet.firewall.FilterCounterGetResponse
	(*PolicerCounterGetResponse)(nil),                  // 140: jnx.jet.firewall.PolicerCounterGetResponse
	(*FilterBindObjVlan)(nil),                          // 141: jnx.jet.firewall.FilterBindObjVlan
	(*FilterBindObjBridgeDomain)(nil),                  // 142: jnx.jet.firewall.FilterBindObjBridgeDomain
	(*FilterBindObjPoint)(nil),                         // 143: jnx.jet.firewall.FilterBindObjPoint
	(*FilterObjBindAddRequest)(nil),                    // 144: jnx.jet.firewall.FilterObjBindAddRequest
	(*FilterObjBindDeleteRequest)(nil),                 // 145: jnx.jet.firewall.FilterObjBindDeleteRequest
	(*IpAddress)(nil),                                  // 146: jnx.jet.common.IpAddress
	(*MacAddress)(nil),                                 // 147: jnx.jet.common.MacAddress
	(*RpcStatus)(nil),                                  // 148: jnx.jet.common.RpcStatus
}
var file_jnx_firewall_service_proto_depIdxs = []int32{
	4,   // 0: jnx.jet.firewall.PolicerTwoColor.loss_priority:type_name -> jnx.jet.firewall.FilterLossPriority
	3,   // 1: jnx.jet.firewall.PolicerSingleRateThreeColor.color_mode:type_name -> jnx.jet.firewall.PolicerColorModeType
	3,   // 2: jnx.jet.firewall.PolicerTwoRateThreeColor.color_mode:type_name -> jnx.jet.firewall.PolicerColorModeType
	31,  // 3: jnx.jet.firewall.PolicerParameter.two_color_parameter:type_name -> jnx.jet.firewall.PolicerTwoColor
	32,  // 4: jnx.jet.firewall.PolicerParameter.single_rate_tricolor_parameter:type_name -> jnx.jet.firewall.PolicerSingleRateThreeColor
	33,  // 5: jnx.jet.firewall.PolicerParameter.two_rate_tricolor_parameter:type_name -> jnx.jet.firewall.PolicerTwoRateThreeColor
	34,  // 6: jnx.jet.firewall.PolicerParameter.hierarchical_parameter:type_name -> jnx.jet.firewall.PolicerHierarchical
	1,   // 7: jnx.jet.firewall.Policer.type:type_name -> jnx.jet.firewall.PolicerType
	2,   // 8: jnx.jet.firewall.Policer.flag:type_name -> jnx.jet.firewall.PolicerFlag
	35,  // 9: jnx.jet.firewall.Policer.params:type_name -> jnx.jet.firewall.PolicerParameter
	1,   // 10: jnx.jet.firewall.PolicerAddRequest.type:type_name -> jnx.jet.firewall.PolicerType
	2,   // 11: jnx.jet.firewall.PolicerAddRequest.flag:type_name -> jnx.jet.firewall.PolicerFlag
	35,  // 12: jnx.jet.firewall.PolicerAddRequest.params:type_name -> jnx.jet.firewall.PolicerParameter
	1,   // 13: jnx.jet.firewall.PolicerModifyRequest.type:type_name -> jnx.jet.firewall.PolicerType
	2,   // 14: jnx.jet.firewall.PolicerModifyRequest.flag:type_name -> jnx.jet.firewall.PolicerFlag
	35,  // 15: jnx.jet.firewall.PolicerModifyRequest.params:type_name -> jnx.jet.firewall.PolicerParameter
	1,   // 16: jnx.jet.firewall.PolicerDeleteRequest.type:type_name -> jnx.jet.firewall.PolicerType
	2,   // 17: jnx.jet.firewall.PolicerDeleteRequest.flag:type_name -> jnx.jet.firewall.PolicerFlag
	146, // 18: jnx.jet.firewall.MatchIpAddress.addr:type_name -> jnx.jet.common.IpAddress
	0,   // 19: jnx.jet.firewall.MatchIpAddress.operation:type_name -> jnx.jet.firewall.MatchOperation
	0,   // 20: jnx.jet.firewall.MatchPort.operation:type_name -> jnx.jet.firewall.MatchOperation
	10,  // 21: jnx.jet.firewall.MatchIpPrecedence.min:type_name -> jnx.jet.firewall.FilterPrecedence
	10,  // 22: jnx.jet.firewall.MatchIpPrecedence.max:type_name -> jnx.jet.firewall.FilterPrecedence
	0,   // 23: jnx.jet.firewall.MatchIpPrecedence.operation:type_name -> jnx.jet.firewall.MatchOperation
	0,   // 24: jnx.jet.firewall.MatchTrafficClass.operation:type_name -> jnx.jet.firewall.MatchOperation
	0,   // 25: jnx.jet.firewall.MatchDscpCode.operation:type_name -> jnx.jet.firewall.MatchOperation
	0,   // 26: jnx.jet.firewall.MatchProtocol.operation:type_name -> jnx.jet.firewall.MatchOperation
	0,   // 27: jnx.jet.firewall.MatchIcmpType.operation:type_name -> jnx.jet.firewall.MatchOperation
	0,   // 28: jnx.jet.firewall.MatchIcmpCode.operation:type_name -> jnx.jet.firewall.MatchOperation
	0,   // 29: jnx.jet.firewall.MatchPacketLength.operation:type_name -> jnx.jet.firewall.MatchOperation
	4,   // 30: jnx.jet.firewall.MatchLossPriority.priority:type_name -> jnx.jet.firewall.FilterLossPriority
	0,   // 31: jnx.jet.firewall.MatchLossPriority.operation:type_name -> jnx.jet.firewall.MatchOperation
	5,   // 32: jnx.jet.firewall.MatchForwardingClass.forwarding_class:type_name -> jnx.jet.firewall.FilterForwardingClass
	0,   // 33: jnx.jet.firewall.MatchForwardingClass.operation:type_name -> jnx.jet.firewall.MatchOperation
	0,   // 34: jnx.jet.firewall.MatchNextHeader.operation:type_name -> jnx.jet.firewall.MatchOperation
	0,   // 35: jnx.jet.firewall.MatchMplsLabel.operation:type_name -> jnx.jet.firewall.MatchOperation
	0,   // 36: jnx.jet.firewall.MatchVlanId.operation:type_name -> jnx.jet.firewall.MatchOperation
	0,   // 37: jnx.jet.firewall.MatchMeshGroup.operation:type_name -> jnx.jet.firewall.MatchOperation
	0,   // 38: jnx.jet.firewall.MatchL2Token.operation:type_name -> jnx.jet.firewall.MatchOperation
	0,   // 39: jnx.jet.firewall.MatchCfmLevel.operation:type_name -> jnx.jet.firewall.MatchOperation
	0,   // 40: jnx.jet.firewall.MatchCfmOpcode.operation:type_name -> jnx.jet.firewall.MatchOperation
	0,   // 41: jnx.jet.firewall.MatchTtl.operation:type_name -> jnx.jet.firewall.MatchOperation
	0,   // 42: jnx.jet.firewall.MatchFragmentOffset.operation:type_name -> jnx.jet.firewall.MatchOperation
	36,  // 43: jnx.jet.firewall.ActionPolicer.policer:type_name -> jnx.jet.firewall.Policer
	36,  // 44: jnx.jet.firewall.ActionPolicerInstance.policer:type_name -> jnx.jet.firewall.Policer
	4,   // 45: jnx.jet.firewall.ActionLossPriority.priority:type_name -> jnx.jet.firewall.FilterLossPriority
	5,   // 46: jnx.jet.firewall.ActionForwardingClass.fc:type_name -> jnx.jet.firewall.FilterForwardingClass
	71,  // 47: jnx.jet.firewall.ActionNextInterface.unit:type_name -> jnx.jet.firewall.ActionInterfaceUnit
	146, // 48: jnx.jet.firewall.ActionNextIp.addr:type_name -> jnx.jet.common.IpAddress
	12,  // 49: jnx.jet.firewall.FilterAdjacency.type:type_name -> jnx.jet.firewall.FilterAdjacencyType
	0,   // 50: jnx.jet.firewall.MatchFlexOffset.operation:type_name -> jnx.jet.firewall.MatchOperation
	13,  // 51: jnx.jet.firewall.MatchFlexibleRange.start_offset:type_name -> jnx.jet.firewall.FilterTermMatchFlexStartOffest
	76,  // 52: jnx.jet.firewall.MatchFlexibleRange.range:type_name -> jnx.jet.firewall.MatchFlexOffset
	77,  // 53: jnx.jet.firewall.MatchFlexibleOffsetRange.flex_range_match:type_name -> jnx.jet.firewall.MatchFlexibleRange
	13,  // 54: jnx.jet.firewall.MatchFlexibleMask.start_offset:type_name -> jnx.jet.firewall.FilterTermMatchFlexStartOffest
	79,  // 55: jnx.jet.firewall.MatchFlexibleOffsetMask.flex_mask_match:type_name -> jnx.jet.firewall.MatchFlexibleMask
	147, // 56: jnx.jet.firewall.MatchMacAddress.addr:type_name -> jnx.jet.common.MacAddress
	0,   // 57: jnx.jet.firewall.MatchMacAddress.operation:type_name -> jnx.jet.firewall.MatchOperation
	0,   // 58: jnx.jet.firewall.MatchEtherType.operation:type_name -> jnx.jet.firewall.MatchOperation
	0,   // 59: jnx.jet.firewall.MatchLearnVlanId.operation:type_name -> jnx.jet.firewall.MatchOperation
	0,   // 60: jnx.jet.firewall.MatchLearnVlanPriority.operation:type_name -> jnx.jet.firewall.MatchOperation
	40,  // 61: jnx.jet.firewall.FilterTermMatchInet.ipv4_dst_addrs:type_name -> jnx.jet.firewall.MatchIpAddress
	40,  // 62: jnx.jet.firewall.FilterTermMatchInet.ipv4_src_addrs:type_name -> jnx.jet.firewall.MatchIpAddress
	41,  // 63: jnx.jet.firewall.FilterTermMatchInet.dst_ports:type_name -> jnx.jet.firewall.MatchPort
	41,  // 64: jnx.jet.firewall.FilterTermMatchInet.src_ports:type_name -> jnx.jet.firewall.MatchPort
	44,  // 65: jnx.jet.firewall.FilterTermMatchInet.dscp_codes:type_name -> jnx.jet.firewall.MatchDscpCode
	45,  // 66: jnx.jet.firewall.FilterTermMatchInet.protocols:type_name -> jnx.jet.firewall.MatchProtocol
	46,  // 67: jnx.jet.firewall.FilterTermMatchInet.icmp_types:type_name -> jnx.jet.firewall.MatchIcmpType
	47,  // 68: jnx.jet.firewall.FilterTermMatchInet.icmp_codes:type_name -> jnx.jet.firewall.MatchIcmpCode
	48,  // 69: jnx.jet.firewall.FilterTermMatchInet.packet_lengths:type_name -> jnx.jet.firewall.MatchPacketLength
	58,  // 70: jnx.jet.firewall.FilterTermMatchInet.ttls:type_name -> jnx.jet.firewall.MatchTtl
	9,   // 71: jnx.jet.firewall.FilterTermMatchInet.fragment_flag:type_name -> jnx.jet.firewall.FilterFragmentFlags
	59,  // 72: jnx.jet.firewall.FilterTermMatchInet.frag_offsets:type_name -> jnx.jet.firewall.MatchFragmentOffset
	75,  // 73: jnx.jet.firewall.FilterTermMatchInet.interface_units:type_name -> jnx.jet.firewall.MatchInterfaceUnit
	42,  // 74: jnx.jet.firewall.FilterTermMatchInet.ip_precedences:type_name -> jnx.jet.firewall.MatchIpPrecedence
	40,  // 75: jnx.jet.firewall.FilterTermMatchInet.ipv4_addrs:type_name -> jnx.jet.firewall.MatchIpAddress
	41,  // 76: jnx.jet.firewall.FilterTermMatchInet.ports:type_name -> jnx.jet.firewall.MatchPort
	78,  // 77: jnx.jet.firewall.FilterTermMatchInet.flex_range:type_name -> jnx.jet.firewall.MatchFlexibleOffsetRange
	80,  // 78: jnx.jet.firewall.FilterTermMatchInet.flex_mask:type_name -> jnx.jet.firewall.MatchFlexibleOffsetMask
	7,   // 79: jnx.jet.firewall.FilterTermInetTerminatingAction.reject:type_name -> jnx.jet.firewall.ActionIcmpRejectReason
	61,  // 80: jnx.jet.firewall.FilterTermInetNonTerminatingAction.count:type_name -> jnx.jet.firewall.ActionCounter
	60,  // 81: jnx.jet.firewall.FilterTermInetNonTerminatingAction.policer:type_name -> jnx.jet.firewall.ActionPolicer
	87,  // 82: jnx.jet.firewall.FilterTermInetAction.actions_nt:type_name -> jnx.jet.firewall.FilterTermInetNonTerminatingAction
	86,  // 83: jnx.jet.firewall.FilterTermInetAction.action_t:type_name -> jnx.jet.firewall.FilterTermInetTerminatingAction
	11,  // 84: jnx.jet.firewall.FilterInetTerm.term_op:type_name -> jnx.jet.firewall.FilterTermOperation
	74,  // 85: jnx.jet.firewall.FilterInetTerm.adjacency:type_name -> jnx.jet.firewall.FilterAdjacency
	85,  // 86: jnx.jet.firewall.FilterInetTerm.matches:type_name -> jnx.jet.firewall.FilterTermMatchInet
	88,  // 87: jnx.jet.firewall.FilterInetTerm.actions:type_name -> jnx.jet.firewall.FilterTermInetAction
	81,  // 88: jnx.jet.firewall.FilterTermMatchEthernetSwitching.dst_macs:type_name -> jnx.jet.firewall.MatchMacAddress
	81,  // 89: jnx.jet.firewall.FilterTermMatchEthernetSwitching.src_macs:type_name -> jnx.jet.firewall.MatchMacAddress
	41,  // 90: jnx.jet.firewall.FilterTermMatchEthernetSwitching.dst_ports:type_name -> jnx.jet.firewall.MatchPort
	41,  // 91: jnx.jet.firewall.FilterTermMatchEthernetSwitching.src_ports:type_name -> jnx.jet.firewall.MatchPort
	44,  // 92: jnx.jet.firewall.FilterTermMatchEthernetSwitching.dscp_codes:type_name -> jnx.jet.firewall.MatchDscpCode
	45,  // 93: jnx.jet.firewall.FilterTermMatchEthernetSwitching.protocols:type_name -> jnx.jet.firewall.MatchProtocol
	46,  // 94: jnx.jet.firewall.FilterTermMatchEthernetSwitching.icmp_types:type_name -> jnx.jet.firewall.MatchIcmpType
	47,  // 95: jnx.jet.firewall.FilterTermMatchEthernetSwitching.icmp_codes:type_name -> jnx.jet.firewall.MatchIcmpCode
	75,  // 96: jnx.jet.firewall.FilterTermMatchEthernetSwitching.interface_units:type_name -> jnx.jet.firewall.MatchInterfaceUnit
	82,  // 97: jnx.jet.firewall.FilterTermMatchEthernetSwitching.ether_types:type_name -> jnx.jet.firewall.MatchEtherType
	83,  // 98: jnx.jet.firewall.FilterTermMatchEthernetSwitching.learn_vlan_ids:type_name -> jnx.jet.firewall.MatchLearnVlanId
	84,  // 99: jnx.jet.firewall.FilterTermMatchEthernetSwitching.learn_vlan_priorities:type_name -> jnx.jet.firewall.MatchLearnVlanPriority
	66,  // 100: jnx.jet.firewall.FilterTermEsTerminatingAction.nh:type_name -> jnx.jet.firewall.ActionSetNexthop
	61,  // 101: jnx.jet.firewall.FilterTermEsNonTerminatingAction.count:type_name -> jnx.jet.firewall.ActionCounter
	60,  // 102: jnx.jet.firewall.FilterTermEsNonTerminatingAction.policer:type_name -> jnx.jet.firewall.ActionPolicer
	67,  // 103: jnx.jet.firewall.FilterTermEsNonTerminatingAction.lp:type_name -> jnx.jet.firewall.ActionLossPriority
	92,  // 104: jnx.jet.firewall.FilterTermEsAction.actions_nt:type_name -> jnx.jet.firewall.FilterTermEsNonTerminatingAction
	91,  // 105: jnx.jet.firewall.FilterTermEsAction.action_t:type_name -> jnx.jet.firewall.FilterTermEsTerminatingAction
	11,  // 106: jnx.jet.firewall.FilterEsTerm.term_op:type_name -> jnx.jet.firewall.FilterTermOperation
	74,  // 107: jnx.jet.firewall.FilterEsTerm.adjacency:type_name -> jnx.jet.firewall.FilterAdjacency
	90,  // 108: jnx.jet.firewall.FilterEsTerm.matches:type_name -> jnx.jet.firewall.FilterTermMatchEthernetSwitching
	93,  // 109: jnx.jet.firewall.FilterEsTerm.actions:type_name -> jnx.jet.firewall.FilterTermEsAction
	40,  // 110: jnx.jet.firewall.FilterTermMatchInet6.ipv6_dst_addrs:type_name -> jnx.jet.firewall.MatchIpAddress
	40,  // 111: jnx.jet.firewall.FilterTermMatchInet6.ipv6_src_addrs:type_name -> jnx.jet.firewall.MatchIpAddress
	41,  // 112: jnx.jet.firewall.FilterTermMatchInet6.dst_ports:type_name -> jnx.jet.firewall.MatchPort
	41,  // 113: jnx.jet.firewall.FilterTermMatchInet6.src_ports:type_name -> jnx.jet.firewall.MatchPort
	44,  // 114: jnx.jet.firewall.FilterTermMatchInet6.dscp_codes:type_name -> jnx.jet.firewall.MatchDscpCode
	45,  // 115: jnx.jet.firewall.FilterTermMatchInet6.payload_protocols:type_name -> jnx.jet.firewall.MatchProtocol
	46,  // 116: jnx.jet.firewall.FilterTermMatchInet6.icmp_types:type_name -> jnx.jet.firewall.MatchIcmpType
	47,  // 117: jnx.jet.firewall.FilterTermMatchInet6.icmp_codes:type_name -> jnx.jet.firewall.MatchIcmpCode
	48,  // 118: jnx.jet.firewall.FilterTermMatchInet6.packet_lengths:type_name -> jnx.jet.firewall.MatchPacketLength
	9,   // 119: jnx.jet.firewall.FilterTermMatchInet6.fragment_flag:type_name -> jnx.jet.firewall.FilterFragmentFlags
	75,  // 120: jnx.jet.firewall.FilterTermMatchInet6.interface_units:type_name -> jnx.jet.firewall.MatchInterfaceUnit
	43,  // 121: jnx.jet.firewall.FilterTermMatchInet6.traffic_classes:type_name -> jnx.jet.firewall.MatchTrafficClass
	40,  // 122: jnx.jet.firewall.FilterTermMatchInet6.ipv6_addrs:type_name -> jnx.jet.firewall.MatchIpAddress
	78,  // 123: jnx.jet.firewall.FilterTermMatchInet6.flex_range:type_name -> jnx.jet.firewall.MatchFlexibleOffsetRange
	80,  // 124: jnx.jet.firewall.FilterTermMatchInet6.flex_mask:type_name -> jnx.jet.firewall.MatchFlexibleOffsetMask
	51,  // 125: jnx.jet.firewall.FilterTermMatchInet6.ipv6_next_headers:type_name -> jnx.jet.firewall.MatchNextHeader
	49,  // 126: jnx.jet.firewall.FilterTermMatchInet6.loss_priorities:type_name -> jnx.jet.firewall.MatchLossPriority
	50,  // 127: jnx.jet.firewall.FilterTermMatchInet6.forwarding_class:type_name -> jnx.jet.firewall.MatchForwardingClass
	41,  // 128: jnx.jet.firewall.FilterTermMatchInet6.ports:type_name -> jnx.jet.firewall.MatchPort
	8,   // 129: jnx.jet.firewall.FilterTermInet6TerminatingAction.reject:type_name -> jnx.jet.firewall.ActionIcmp6RejectReason
	65,  // 130: jnx.jet.firewall.FilterTermInet6TerminatingAction.topo_redirect:type_name -> jnx.jet.firewall.ActionTopologyRedirect
	62,  // 131: jnx.jet.firewall.FilterTermInet6TerminatingAction.send_to_client:type_name -> jnx.jet.firewall.ActionSendToClient
	66,  // 132: jnx.jet.firewall.FilterTermInet6TerminatingAction.nh:type_name -> jnx.jet.firewall.ActionSetNexthop
	61,  // 133: jnx.jet.firewall.FilterTermInet6NonTerminatingAction.count:type_name -> jnx.jet.firewall.ActionCounter
	60,  // 134: jnx.jet.firewall.FilterTermInet6NonTerminatingAction.policer:type_name -> jnx.jet.firewall.ActionPolicer
	67,  // 135: jnx.jet.firewall.FilterTermInet6NonTerminatingAction.loss_priority:type_name -> jnx.jet.firewall.ActionLossPriority
	69,  // 136: jnx.jet.firewall.FilterTermInet6NonTerminatingAction.forwarding_class:type_name -> jnx.jet.firewall.ActionForwardingClass
	68,  // 137: jnx.jet.firewall.FilterTermInet6NonTerminatingAction.forwarding_priority:type_name -> jnx.jet.firewall.ActionForwardingPriority
	72,  // 138: jnx.jet.firewall.FilterTermInet6NonTerminatingAction.next_interface:type_name -> jnx.jet.firewall.ActionNextInterface
	73,  // 139: jnx.jet.firewall.FilterTermInet6NonTerminatingAction.next_ip:type_name -> jnx.jet.firewall.ActionNextIp
	70,  // 140: jnx.jet.firewall.FilterTermInet6NonTerminatingAction.ip_dscp:type_name -> jnx.jet.firewall.ActionSetIpDscp
	63,  // 141: jnx.jet.firewall.FilterTermInet6NonTerminatingAction.copy_to_host:type_name -> jnx.jet.firewall.ActionCopyToHost
	64,  // 142: jnx.jet.firewall.FilterTermInet6NonTerminatingAction.policer_inst:type_name -> jnx.jet.firewall.ActionPolicerInstance
	97,  // 143: jnx.jet.firewall.FilterTermInet6Action.actions_nt:type_name -> jnx.jet.firewall.FilterTermInet6NonTerminatingAction
	96,  // 144: jnx.jet.firewall.FilterTermInet6Action.action_t:type_name -> jnx.jet.firewall.FilterTermInet6TerminatingAction
	40,  // 145: jnx.jet.firewall.FilterTermMatchVpls.ipv4_dst_addrs:type_name -> jnx.jet.firewall.MatchIpAddress
	40,  // 146: jnx.jet.firewall.FilterTermMatchVpls.ipv4_src_addrs:type_name -> jnx.jet.firewall.MatchIpAddress
	40,  // 147: jnx.jet.firewall.FilterTermMatchVpls.ipv6_dst_addrs:type_name -> jnx.jet.firewall.MatchIpAddress
	40,  // 148: jnx.jet.firewall.FilterTermMatchVpls.ipv6_src_addrs:type_name -> jnx.jet.firewall.MatchIpAddress
	41,  // 149: jnx.jet.firewall.FilterTermMatchVpls.dst_ports:type_name -> jnx.jet.firewall.MatchPort
	41,  // 150: jnx.jet.firewall.FilterTermMatchVpls.src_ports:type_name -> jnx.jet.firewall.MatchPort
	44,  // 151: jnx.jet.firewall.FilterTermMatchVpls.dscp_codes:type_name -> jnx.jet.firewall.MatchDscpCode
	45,  // 152: jnx.jet.firewall.FilterTermMatchVpls.ip_protocols:type_name -> jnx.jet.firewall.MatchProtocol
	45,  // 153: jnx.jet.firewall.FilterTermMatchVpls.payload_protocols:type_name -> jnx.jet.firewall.MatchProtocol
	46,  // 154: jnx.jet.firewall.FilterTermMatchVpls.icmp_types:type_name -> jnx.jet.firewall.MatchIcmpType
	47,  // 155: jnx.jet.firewall.FilterTermMatchVpls.icmp_codes:type_name -> jnx.jet.firewall.MatchIcmpCode
	75,  // 156: jnx.jet.firewall.FilterTermMatchVpls.interface_units:type_name -> jnx.jet.firewall.MatchInterfaceUnit
	43,  // 157: jnx.jet.firewall.FilterTermMatchVpls.traffic_classes:type_name -> jnx.jet.firewall.MatchTrafficClass
	51,  // 158: jnx.jet.firewall.FilterTermMatchVpls.ipv6_next_headers:type_name -> jnx.jet.firewall.MatchNextHeader
	82,  // 159: jnx.jet.firewall.FilterTermMatchVpls.ether_types:type_name -> jnx.jet.firewall.MatchEtherType
	81,  // 160: jnx.jet.firewall.FilterTermMatchVpls.src_macs:type_name -> jnx.jet.firewall.MatchMacAddress
	81,  // 161: jnx.jet.firewall.FilterTermMatchVpls.dst_macs:type_name -> jnx.jet.firewall.MatchMacAddress
	82,  // 162: jnx.jet.firewall.FilterTermMatchVpls.vlan_ether_types:type_name -> jnx.jet.firewall.MatchEtherType
	53,  // 163: jnx.jet.firewall.FilterTermMatchVpls.learn_vlan_ids:type_name -> jnx.jet.firewall.MatchVlanId
	53,  // 164: jnx.jet.firewall.FilterTermMatchVpls.user_vlan_ids:type_name -> jnx.jet.firewall.MatchVlanId
	84,  // 165: jnx.jet.firewall.FilterTermMatchVpls.learn_vlan_priorities:type_name -> jnx.jet.firewall.MatchLearnVlanPriority
	6,   // 166: jnx.jet.firewall.FilterTermMatchVpls.stp_state:type_name -> jnx.jet.firewall.FilterStpMatchFlags
	54,  // 167: jnx.jet.firewall.FilterTermMatchVpls.mesh_group_ids:type_name -> jnx.jet.firewall.MatchMeshGroup
	57,  // 168: jnx.jet.firewall.FilterTermMatchVpls.cfm_opcodes:type_name -> jnx.jet.firewall.MatchCfmOpcode
	56,  // 169: jnx.jet.firewall.FilterTermMatchVpls.cfm_levels:type_name -> jnx.jet.firewall.MatchCfmLevel
	55,  // 170: jnx.jet.firewall.FilterTermMatchVpls.l2_tokens:type_name -> jnx.jet.firewall.MatchL2Token
	40,  // 171: jnx.jet.firewall.FilterTermMatchVpls.ipv6_addrs:type_name -> jnx.jet.firewall.MatchIpAddress
	78,  // 172: jnx.jet.firewall.FilterTermMatchVpls.flex_range:type_name -> jnx.jet.firewall.MatchFlexibleOffsetRange
	80,  // 173: jnx.jet.firewall.FilterTermMatchVpls.flex_mask:type_name -> jnx.jet.firewall.MatchFlexibleOffsetMask
	48,  // 174: jnx.jet.firewall.FilterTermMatchVpls.packet_lengths:type_name -> jnx.jet.firewall.MatchPacketLength
	62,  // 175: jnx.jet.firewall.FilterTermVplsTerminatingAction.send_to_client:type_name -> jnx.jet.firewall.ActionSendToClient
	66,  // 176: jnx.jet.firewall.FilterTermVplsTerminatingAction.nh:type_name -> jnx.jet.firewall.ActionSetNexthop
	61,  // 177: jnx.jet.firewall.FilterTermVplsNonTerminatingAction.count:type_name -> jnx.jet.firewall.ActionCounter
	60,  // 178: jnx.jet.firewall.FilterTermVplsNonTerminatingAction.policer:type_name -> jnx.jet.firewall.ActionPolicer
	63,  // 179: jnx.jet.firewall.FilterTermVplsNonTerminatingAction.copy_to_host:type_name -> jnx.jet.firewall.ActionCopyToHost
	101, // 180: jnx.jet.firewall.FilterTermVplsAction.actions_nt:type_name -> jnx.jet.firewall.FilterTermVplsNonTerminatingAction
	100, // 181: jnx.jet.firewall.FilterTermVplsAction.action_t:type_name -> jnx.jet.firewall.FilterTermVplsTerminatingAction
	48,  // 182: jnx.jet.firewall.FilterTermMatchCcc.packet_lengths:type_name -> jnx.jet.firewall.MatchPacketLength
	75,  // 183: jnx.jet.firewall.FilterTermMatchCcc.interface_units:type_name -> jnx.jet.firewall.MatchInterfaceUnit
	82,  // 184: jnx.jet.firewall.FilterTermMatchCcc.ether_types:type_name -> jnx.jet.firewall.MatchEtherType
	81,  // 185: jnx.jet.firewall.FilterTermMatchCcc.src_macs:type_name -> jnx.jet.firewall.MatchMacAddress
	81,  // 186: jnx.jet.firewall.FilterTermMatchCcc.dst_macs:type_name -> jnx.jet.firewall.MatchMacAddress
	57,  // 187: jnx.jet.firewall.FilterTermMatchCcc.cfm_opcodes:type_name -> jnx.jet.firewall.MatchCfmOpcode
	56,  // 188: jnx.jet.firewall.FilterTermMatchCcc.cfm_levels:type_name -> jnx.jet.firewall.MatchCfmLevel
	78,  // 189: jnx.jet.firewall.FilterTermMatchCcc.flex_range:type_name -> jnx.jet.firewall.MatchFlexibleOffsetRange
	80,  // 190: jnx.jet.firewall.FilterTermMatchCcc.flex_mask:type_name -> jnx.jet.firewall.MatchFlexibleOffsetMask
	62,  // 191: jnx.jet.firewall.FilterTermCccTerminatingAction.send_to_client:type_name -> jnx.jet.firewall.ActionSendToClient
	61,  // 192: jnx.jet.firewall.FilterTermCccNonTerminatingAction.count:type_name -> jnx.jet.firewall.ActionCounter
	60,  // 193: jnx.jet.firewall.FilterTermCccNonTerminatingAction.policer:type_name -> jnx.jet.firewall.ActionPolicer
	63,  // 194: jnx.jet.firewall.FilterTermCccNonTerminatingAction.copy_to_host:type_name -> jnx.jet.firewall.ActionCopyToHost
	105, // 195: jnx.jet.firewall.FilterTermCccAction.actions_nt:type_name -> jnx.jet.firewall.FilterTermCccNonTerminatingAction
	104, // 196: jnx.jet.firewall.FilterTermCccAction.action_t:type_name -> jnx.jet.firewall.FilterTermCccTerminatingAction
	40,  // 197: jnx.jet.firewall.FilterTermMatchMultiService.ipv4_dst_addrs:type_name -> jnx.jet.firewall.MatchIpAddress
	40,  // 198: jnx.jet.firewall.FilterTermMatchMultiService.ipv4_src_addrs:type_name -> jnx.jet.firewall.MatchIpAddress
	40,  // 199: jnx.jet.firewall.FilterTermMatchMultiService.ipv4_addrs:type_name -> jnx.jet.firewall.MatchIpAddress
	41,  // 200: jnx.jet.firewall.FilterTermMatchMultiService.dst_ports:type_name -> jnx.jet.firewall.MatchPort
	41,  // 201: jnx.jet.firewall.FilterTermMatchMultiService.src_ports:type_name -> jnx.jet.firewall.MatchPort
	45,  // 202: jnx.jet.firewall.FilterTermMatchMultiService.ip_protocols:type_name -> jnx.jet.firewall.MatchProtocol
	45,  // 203: jnx.jet.firewall.FilterTermMatchMultiService.payload_protocols:type_name -> jnx.jet.firewall.MatchProtocol
	46,  // 204: jnx.jet.firewall.FilterTermMatchMultiService.icmp_types:type_name -> jnx.jet.firewall.MatchIcmpType
	47,  // 205: jnx.jet.firewall.FilterTermMatchMultiService.icmp_codes:type_name -> jnx.jet.firewall.MatchIcmpCode
	75,  // 206: jnx.jet.firewall.FilterTermMatchMultiService.interface_units:type_name -> jnx.jet.firewall.MatchInterfaceUnit
	51,  // 207: jnx.jet.firewall.FilterTermMatchMultiService.ipv6_next_headers:type_name -> jnx.jet.firewall.MatchNextHeader
	82,  // 208: jnx.jet.firewall.FilterTermMatchMultiService.ether_types:type_name -> jnx.jet.firewall.MatchEtherType
	81,  // 209: jnx.jet.firewall.FilterTermMatchMultiService.src_macs:type_name -> jnx.jet.firewall.MatchMacAddress
	81,  // 210: jnx.jet.firewall.FilterTermMatchMultiService.dst_macs:type_name -> jnx.jet.firewall.MatchMacAddress
	82,  // 211: jnx.jet.firewall.FilterTermMatchMultiService.vlan_ether_types:type_name -> jnx.jet.firewall.MatchEtherType
	6,   // 212: jnx.jet.firewall.FilterTermMatchMultiService.stp_state:type_name -> jnx.jet.firewall.FilterStpMatchFlags
	54,  // 213: jnx.jet.firewall.FilterTermMatchMultiService.mesh_group_ids:type_name -> jnx.jet.firewall.MatchMeshGroup
	55,  // 214: jnx.jet.firewall.FilterTermMatchMultiService.l2_tokens:type_name -> jnx.jet.firewall.MatchL2Token
	48,  // 215: jnx.jet.firewall.FilterTermMatchMultiService.packet_lengths:type_name -> jnx.jet.firewall.MatchPacketLength
	62,  // 216: jnx.jet.firewall.FilterTermMultiServiceTerminatingAction.send_to_client:type_name -> jnx.jet.firewall.ActionSendToClient
	61,  // 217: jnx.jet.firewall.FilterTermMultiServiceNonTerminatingAction.count:type_name -> jnx.jet.firewall.ActionCounter
	60,  // 218: jnx.jet.firewall.FilterTermMultiServiceNonTerminatingAction.policer:type_name -> jnx.jet.firewall.ActionPolicer
	63,  // 219: jnx.jet.firewall.FilterTermMultiServiceNonTerminatingAction.copy_to_host:type_name -> jnx.jet.firewall.ActionCopyToHost
	109, // 220: jnx.jet.firewall.FilterTermMultiServiceAction.actions_nt:type_name -> jnx.jet.firewall.FilterTermMultiServiceNonTerminatingAction
	108, // 221: jnx.jet.firewall.FilterTermMultiServiceAction.action_t:type_name -> jnx.jet.firewall.FilterTermMultiServiceTerminatingAction
	52,  // 222: jnx.jet.firewall.FilterTermMatchMpls.labels1:type_name -> jnx.jet.firewall.MatchMplsLabel
	52,  // 223: jnx.jet.firewall.FilterTermMatchMpls.labels2:type_name -> jnx.jet.firewall.MatchMplsLabel
	52,  // 224: jnx.jet.firewall.FilterTermMatchMpls.labels3:type_name -> jnx.jet.firewall.MatchMplsLabel
	78,  // 225: jnx.jet.firewall.FilterTermMatchMpls.flex_range:type_name -> jnx.jet.firewall.MatchFlexibleOffsetRange
	80,  // 226: jnx.jet.firewall.FilterTermMatchMpls.flex_mask:type_name -> jnx.jet.firewall.MatchFlexibleOffsetMask
	61,  // 227: jnx.jet.firewall.FilterTermMplsNonTerminatingAction.count:type_name -> jnx.jet.firewall.ActionCounter
	60,  // 228: jnx.jet.firewall.FilterTermMplsNonTerminatingAction.policer:type_name -> jnx.jet.firewall.ActionPolicer
	113, // 229: jnx.jet.firewall.FilterTermMplsAction.actions_nt:type_name -> jnx.jet.firewall.FilterTermMplsNonTerminatingAction
	112, // 230: jnx.jet.firewall.FilterTermMplsAction.action_t:type_name -> jnx.jet.firewall.FilterTermMplsTerminatingAction
	11,  // 231: jnx.jet.firewall.FilterInet6Term.term_op:type_name -> jnx.jet.firewall.FilterTermOperation
	74,  // 232: jnx.jet.firewall.FilterInet6Term.adjacency:type_name -> jnx.jet.firewall.FilterAdjacency
	95,  // 233: jnx.jet.firewall.FilterInet6Term.matches:type_name -> jnx.jet.firewall.FilterTermMatchInet6
	98,  // 234: jnx.jet.firewall.FilterInet6Term.actions:type_name -> jnx.jet.firewall.FilterTermInet6Action
	11,  // 235: jnx.jet.firewall.FilterVplsTerm.term_op:type_name -> jnx.jet.firewall.FilterTermOperation
	74,  // 236: jnx.jet.firewall.FilterVplsTerm.adjacency:type_name -> jnx.jet.firewall.FilterAdjacency
	99,  // 237: jnx.jet.firewall.FilterVplsTerm.matches:type_name -> jnx.jet.firewall.FilterTermMatchVpls
	102, // 238: jnx.jet.firewall.FilterVplsTerm.actions:type_name -> jnx.jet.firewall.FilterTermVplsAction
	11,  // 239: jnx.jet.firewall.FilterCccTerm.term_op:type_name -> jnx.jet.firewall.FilterTermOperation
	74,  // 240: jnx.jet.firewall.FilterCccTerm.adjacency:type_name -> jnx.jet.firewall.FilterAdjacency
	103, // 241: jnx.jet.firewall.FilterCccTerm.matches:type_name -> jnx.jet.firewall.FilterTermMatchCcc
	106, // 242: jnx.jet.firewall.FilterCccTerm.actions:type_name -> jnx.jet.firewall.FilterTermCccAction
	11,  // 243: jnx.jet.firewall.FilterMultiServiceTerm.term_op:type_name -> jnx.jet.firewall.FilterTermOperation
	74,  // 244: jnx.jet.firewall.FilterMultiServiceTerm.adjacency:type_name -> jnx.jet.firewall.FilterAdjacency
	107, // 245: jnx.jet.firewall.FilterMultiServiceTerm.matches:type_name -> jnx.jet.firewall.FilterTermMatchMultiService
	110, // 246: jnx.jet.firewall.FilterMultiServiceTerm.actions:type_name -> jnx.jet.firewall.FilterTermMultiServiceAction
	11,  // 247: jnx.jet.firewall.FilterMplsTerm.term_op:type_name -> jnx.jet.firewall.FilterTermOperation
	74,  // 248: jnx.jet.firewall.FilterMplsTerm.adjacency:type_name -> jnx.jet.firewall.FilterAdjacency
	111, // 249: jnx.jet.firewall.FilterMplsTerm.matches:type_name -> jnx.jet.firewall.FilterTermMatchMpls
	114, // 250: jnx.jet.firewall.FilterMplsTerm.actions:type_name -> jnx.jet.firewall.FilterTermMplsAction
	89,  // 251: jnx.jet.firewall.FilterTerm.inet_term:type_name -> jnx.jet.firewall.FilterInetTerm
	94,  // 252: jnx.jet.firewall.FilterTerm.es_term:type_name -> jnx.jet.firewall.FilterEsTerm
	115, // 253: jnx.jet.firewall.FilterTerm.inet6_term:type_name -> jnx.jet.firewall.FilterInet6Term
	116, // 254: jnx.jet.firewall.FilterTerm.vpls_term:type_name -> jnx.jet.firewall.FilterVplsTerm
	117, // 255: jnx.jet.firewall.FilterTerm.ccc_term:type_name -> jnx.jet.firewall.FilterCccTerm
	118, // 256: jnx.jet.firewall.FilterTerm.mservice_term:type_name -> jnx.jet.firewall.FilterMultiServiceTerm
	119, // 257: jnx.jet.firewall.FilterTerm.mpls_term:type_name -> jnx.jet.firewall.FilterMplsTerm
	15,  // 258: jnx.jet.firewall.Filter.family:type_name -> jnx.jet.firewall.FilterFamilies
	14,  // 259: jnx.jet.firewall.FilterAddRequest.type:type_name -> jnx.jet.firewall.FilterTypes
	15,  // 260: jnx.jet.firewall.FilterAddRequest.family:type_name -> jnx.jet.firewall.FilterFamilies
	16,  // 261: jnx.jet.firewall.FilterAddRequest.flag:type_name -> jnx.jet.firewall.FilterFlags
	120, // 262: jnx.jet.firewall.FilterAddRequest.terms_list:type_name -> jnx.jet.firewall.FilterTerm
	14,  // 263: jnx.jet.firewall.FilterModifyRequest.type:type_name -> jnx.jet.firewall.FilterTypes
	15,  // 264: jnx.jet.firewall.FilterModifyRequest.family:type_name -> jnx.jet.firewall.FilterFamilies
	16,  // 265: jnx.jet.firewall.FilterModifyRequest.flag:type_name -> jnx.jet.firewall.FilterFlags
	120, // 266: jnx.jet.firewall.FilterModifyRequest.terms_list:type_name -> jnx.jet.firewall.FilterTerm
	15,  // 267: jnx.jet.firewall.FilterDeleteRequest.family:type_name -> jnx.jet.firewall.FilterFamilies
	148, // 268: jnx.jet.firewall.FilterCounterSetResponse.status:type_name -> jnx.jet.common.RpcStatus
	19,  // 269: jnx.jet.firewall.FilterCounterSetResponse.sub_code:type_name -> jnx.jet.firewall.FilterCounterSetResponse.StatusCode
	148, // 270: jnx.jet.firewall.PolicerCounterSetResponse.status:type_name -> jnx.jet.common.RpcStatus
	20,  // 271: jnx.jet.firewall.PolicerCounterSetResponse.sub_code:type_name -> jnx.jet.firewall.PolicerCounterSetResponse.StatusCode
	148, // 272: jnx.jet.firewall.FilterAddResponse.status:type_name -> jnx.jet.common.RpcStatus
	21,  // 273: jnx.jet.firewall.FilterAddResponse.sub_code:type_name -> jnx.jet.firewall.FilterAddResponse.StatusCode
	148, // 274: jnx.jet.firewall.FilterDeleteResponse.status:type_name -> jnx.jet.common.RpcStatus
	22,  // 275: jnx.jet.firewall.FilterDeleteResponse.sub_code:type_name -> jnx.jet.firewall.FilterDeleteResponse.StatusCode
	148, // 276: jnx.jet.firewall.FilterModifyResponse.status:type_name -> jnx.jet.common.RpcStatus
	23,  // 277: jnx.jet.firewall.FilterModifyResponse.sub_code:type_name -> jnx.jet.firewall.FilterModifyResponse.StatusCode
	148, // 278: jnx.jet.firewall.FilterBindAddResponse.status:type_name -> jnx.jet.common.RpcStatus
	24,  // 279: jnx.jet.firewall.FilterBindAddResponse.sub_code:type_name -> jnx.jet.firewall.FilterBindAddResponse.StatusCode
	148, // 280: jnx.jet.firewall.FilterBindDeleteResponse.status:type_name -> jnx.jet.common.RpcStatus
	25,  // 281: jnx.jet.firewall.FilterBindDeleteResponse.sub_code:type_name -> jnx.jet.firewall.FilterBindDeleteResponse.StatusCode
	148, // 282: jnx.jet.firewall.PolicerAddResponse.status:type_name -> jnx.jet.common.RpcStatus
	26,  // 283: jnx.jet.firewall.PolicerAddResponse.sub_code:type_name -> jnx.jet.firewall.PolicerAddResponse.StatusCode
	148, // 284: jnx.jet.firewall.PolicerDeleteResponse.status:type_name -> jnx.jet.common.RpcStatus
	27,  // 285: jnx.jet.firewall.PolicerDeleteResponse.sub_code:type_name -> jnx.jet.firewall.PolicerDeleteResponse.StatusCode
	148, // 286: jnx.jet.firewall.PolicerModifyResponse.status:type_name -> jnx.jet.common.RpcStatus
	28,  // 287: jnx.jet.firewall.PolicerModifyResponse.sub_code:type_name -> jnx.jet.firewall.PolicerModifyResponse.StatusCode
	148, // 288: jnx.jet.firewall.FilterCounterGetResponse.status:type_name -> jnx.jet.common.RpcStatus
	29,  // 289: jnx.jet.firewall.FilterCounterGetResponse.sub_code:type_name -> jnx.jet.firewall.FilterCounterGetResponse.StatusCode
	148, // 290: jnx.jet.firewall.PolicerCounterGetResponse.status:type_name -> jnx.jet.common.RpcStatus
	30,  // 291: jnx.jet.firewall.PolicerCounterGetResponse.sub_code:type_name -> jnx.jet.firewall.PolicerCounterGetResponse.StatusCode
	141, // 292: jnx.jet.firewall.FilterBindObjPoint.vlan:type_name -> jnx.jet.firewall.FilterBindObjVlan
	142, // 293: jnx.jet.firewall.FilterBindObjPoint.bridge_domain:type_name -> jnx.jet.firewall.FilterBindObjBridgeDomain
	121, // 294: jnx.jet.firewall.FilterObjBindAddRequest.filter:type_name -> jnx.jet.firewall.Filter
	18,  // 295: jnx.jet.firewall.FilterObjBindAddRequest.obj_type:type_name -> jnx.jet.firewall.FilterBindObjType
	143, // 296: jnx.jet.firewall.FilterObjBindAddRequest.bind_object:type_name -> jnx.jet.firewall.FilterBindObjPoint
	17,  // 297: jnx.jet.firewall.FilterObjBindAddRequest.bind_direction:type_name -> jnx.jet.firewall.FilterBindDirection
	15,  // 298: jnx.jet.firewall.FilterObjBindAddRequest.bind_family:type_name -> jnx.jet.firewall.FilterFamilies
	121, // 299: jnx.jet.firewall.FilterObjBindDeleteRequest.filter:type_name -> jnx.jet.firewall.Filter
	18,  // 300: jnx.jet.firewall.FilterObjBindDeleteRequest.obj_type:type_name -> jnx.jet.firewall.FilterBindObjType
	143, // 301: jnx.jet.firewall.FilterObjBindDeleteRequest.bind_object:type_name -> jnx.jet.firewall.FilterBindObjPoint
	17,  // 302: jnx.jet.firewall.FilterObjBindDeleteRequest.bind_direction:type_name -> jnx.jet.firewall.FilterBindDirection
	15,  // 303: jnx.jet.firewall.FilterObjBindDeleteRequest.bind_family:type_name -> jnx.jet.firewall.FilterFamilies
	122, // 304: jnx.jet.firewall.Firewall.FilterAdd:input_type -> jnx.jet.firewall.FilterAddRequest
	124, // 305: jnx.jet.firewall.Firewall.FilterDelete:input_type -> jnx.jet.firewall.FilterDeleteRequest
	123, // 306: jnx.jet.firewall.Firewall.FilterModify:input_type -> jnx.jet.firewall.FilterModifyRequest
	144, // 307: jnx.jet.firewall.Firewall.FilterBindAdd:input_type -> jnx.jet.firewall.FilterObjBindAddRequest
	145, // 308: jnx.jet.firewall.Firewall.FilterBindDelete:input_type -> jnx.jet.firewall.FilterObjBindDeleteRequest
	37,  // 309: jnx.jet.firewall.Firewall.PolicerAdd:input_type -> jnx.jet.firewall.PolicerAddRequest
	38,  // 310: jnx.jet.firewall.Firewall.PolicerModify:input_type -> jnx.jet.firewall.PolicerModifyRequest
	39,  // 311: jnx.jet.firewall.Firewall.PolicerDelete:input_type -> jnx.jet.firewall.PolicerDeleteRequest
	125, // 312: jnx.jet.firewall.Firewall.FilterCounterGet:input_type -> jnx.jet.firewall.FilterCounterGetRequest
	126, // 313: jnx.jet.firewall.Firewall.PolicerCounterGet:input_type -> jnx.jet.firewall.PolicerCounterGetRequest
	127, // 314: jnx.jet.firewall.Firewall.FilterCounterSet:input_type -> jnx.jet.firewall.FilterCounterSetRequest
	129, // 315: jnx.jet.firewall.Firewall.PolicerCounterSet:input_type -> jnx.jet.firewall.PolicerCounterSetRequest
	131, // 316: jnx.jet.firewall.Firewall.FilterAdd:output_type -> jnx.jet.firewall.FilterAddResponse
	132, // 317: jnx.jet.firewall.Firewall.FilterDelete:output_type -> jnx.jet.firewall.FilterDeleteResponse
	133, // 318: jnx.jet.firewall.Firewall.FilterModify:output_type -> jnx.jet.firewall.FilterModifyResponse
	134, // 319: jnx.jet.firewall.Firewall.FilterBindAdd:output_type -> jnx.jet.firewall.FilterBindAddResponse
	135, // 320: jnx.jet.firewall.Firewall.FilterBindDelete:output_type -> jnx.jet.firewall.FilterBindDeleteResponse
	136, // 321: jnx.jet.firewall.Firewall.PolicerAdd:output_type -> jnx.jet.firewall.PolicerAddResponse
	138, // 322: jnx.jet.firewall.Firewall.PolicerModify:output_type -> jnx.jet.firewall.PolicerModifyResponse
	137, // 323: jnx.jet.firewall.Firewall.PolicerDelete:output_type -> jnx.jet.firewall.PolicerDeleteResponse
	139, // 324: jnx.jet.firewall.Firewall.FilterCounterGet:output_type -> jnx.jet.firewall.FilterCounterGetResponse
	140, // 325: jnx.jet.firewall.Firewall.PolicerCounterGet:output_type -> jnx.jet.firewall.PolicerCounterGetResponse
	128, // 326: jnx.jet.firewall.Firewall.FilterCounterSet:output_type -> jnx.jet.firewall.FilterCounterSetResponse
	130, // 327: jnx.jet.firewall.Firewall.PolicerCounterSet:output_type -> jnx.jet.firewall.PolicerCounterSetResponse
	316, // [316:328] is the sub-list for method output_type
	304, // [304:316] is the sub-list for method input_type
	304, // [304:304] is the sub-list for extension type_name
	304, // [304:304] is the sub-list for extension extendee
	0,   // [0:304] is the sub-list for field type_name
}

func init() { file_jnx_firewall_service_proto_init() }
func file_jnx_firewall_service_proto_init() {
	if File_jnx_firewall_service_proto != nil {
		return
	}
	file_jnx_common_addr_types_proto_init()
	file_jnx_common_base_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_jnx_firewall_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicerTwoColor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicerSingleRateThreeColor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicerTwoRateThreeColor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicerHierarchical); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicerParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicerAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicerModifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicerDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchIpAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchIpPrecedence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchTrafficClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchDscpCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchProtocol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchIcmpType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchIcmpCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchPacketLength); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchLossPriority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchForwardingClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchNextHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchMplsLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchVlanId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchMeshGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchL2Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCfmLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCfmOpcode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchTtl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchFragmentOffset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionPolicer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionSendToClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionCopyToHost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionPolicerInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionTopologyRedirect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionSetNexthop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionLossPriority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionForwardingPriority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionForwardingClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionSetIpDscp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionInterfaceUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionNextInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionNextIp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterAdjacency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchInterfaceUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchFlexOffset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchFlexibleRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchFlexibleOffsetRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchFlexibleMask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchFlexibleOffsetMask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchMacAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchEtherType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchLearnVlanId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchLearnVlanPriority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterTermMatchInet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterTermInetTerminatingAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterTermInetNonTerminatingAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterTermInetAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterInetTerm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterTermMatchEthernetSwitching); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterTermEsTerminatingAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterTermEsNonTerminatingAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterTermEsAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterEsTerm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterTermMatchInet6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterTermInet6TerminatingAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterTermInet6NonTerminatingAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterTermInet6Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterTermMatchVpls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterTermVplsTerminatingAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterTermVplsNonTerminatingAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterTermVplsAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterTermMatchCcc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterTermCccTerminatingAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterTermCccNonTerminatingAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterTermCccAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterTermMatchMultiService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterTermMultiServiceTerminatingAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterTermMultiServiceNonTerminatingAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterTermMultiServiceAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterTermMatchMpls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterTermMplsTerminatingAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterTermMplsNonTerminatingAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterTermMplsAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterInet6Term); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterVplsTerm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterCccTerm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterMultiServiceTerm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterMplsTerm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterTerm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterModifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterCounterGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicerCounterGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterCounterSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterCounterSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicerCounterSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicerCounterSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterAddResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterModifyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterBindAddResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterBindDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicerAddResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicerDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicerModifyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterCounterGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicerCounterGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterBindObjVlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterBindObjBridgeDomain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterBindObjPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterObjBindAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_firewall_service_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterObjBindDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_jnx_firewall_service_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*PolicerParameter_TwoColorParameter)(nil),
		(*PolicerParameter_SingleRateTricolorParameter)(nil),
		(*PolicerParameter_TwoRateTricolorParameter)(nil),
		(*PolicerParameter_HierarchicalParameter)(nil),
	}
	file_jnx_firewall_service_proto_msgTypes[40].OneofWrappers = []interface{}{
		(*ActionInterfaceUnit_UnitName)(nil),
		(*ActionInterfaceUnit_UnitIndex)(nil),
	}
	file_jnx_firewall_service_proto_msgTypes[44].OneofWrappers = []interface{}{
		(*MatchInterfaceUnit_UnitName)(nil),
		(*MatchInterfaceUnit_UnitIndex)(nil),
	}
	file_jnx_firewall_service_proto_msgTypes[47].OneofWrappers = []interface{}{
		(*MatchFlexibleOffsetRange_FlexRangeMatch)(nil),
	}
	file_jnx_firewall_service_proto_msgTypes[49].OneofWrappers = []interface{}{
		(*MatchFlexibleOffsetMask_FlexMaskMatch)(nil),
	}
	file_jnx_firewall_service_proto_msgTypes[55].OneofWrappers = []interface{}{
		(*FilterTermInetTerminatingAction_Accept)(nil),
		(*FilterTermInetTerminatingAction_Discard)(nil),
		(*FilterTermInetTerminatingAction_Reject)(nil),
		(*FilterTermInetTerminatingAction_RoutingInstanceName)(nil),
	}
	file_jnx_firewall_service_proto_msgTypes[60].OneofWrappers = []interface{}{
		(*FilterTermEsTerminatingAction_Accept)(nil),
		(*FilterTermEsTerminatingAction_Discard)(nil),
		(*FilterTermEsTerminatingAction_Nh)(nil),
		(*FilterTermEsTerminatingAction_SendToHost)(nil),
	}
	file_jnx_firewall_service_proto_msgTypes[65].OneofWrappers = []interface{}{
		(*FilterTermInet6TerminatingAction_Accept)(nil),
		(*FilterTermInet6TerminatingAction_Discard)(nil),
		(*FilterTermInet6TerminatingAction_Reject)(nil),
		(*FilterTermInet6TerminatingAction_RoutingInstanceName)(nil),
		(*FilterTermInet6TerminatingAction_TopoRedirect)(nil),
		(*FilterTermInet6TerminatingAction_SendToClient)(nil),
		(*FilterTermInet6TerminatingAction_SendToHost)(nil),
		(*FilterTermInet6TerminatingAction_Nh)(nil),
	}
	file_jnx_firewall_service_proto_msgTypes[69].OneofWrappers = []interface{}{
		(*FilterTermVplsTerminatingAction_Accept)(nil),
		(*FilterTermVplsTerminatingAction_Discard)(nil),
		(*FilterTermVplsTerminatingAction_SendToClient)(nil),
		(*FilterTermVplsTerminatingAction_SendToHost)(nil),
		(*FilterTermVplsTerminatingAction_Nh)(nil),
	}
	file_jnx_firewall_service_proto_msgTypes[73].OneofWrappers = []interface{}{
		(*FilterTermCccTerminatingAction_Accept)(nil),
		(*FilterTermCccTerminatingAction_Discard)(nil),
		(*FilterTermCccTerminatingAction_SendToClient)(nil),
		(*FilterTermCccTerminatingAction_SendToHost)(nil),
	}
	file_jnx_firewall_service_proto_msgTypes[77].OneofWrappers = []interface{}{
		(*FilterTermMultiServiceTerminatingAction_Accept)(nil),
		(*FilterTermMultiServiceTerminatingAction_Discard)(nil),
		(*FilterTermMultiServiceTerminatingAction_SendToClient)(nil),
		(*FilterTermMultiServiceTerminatingAction_SendToHost)(nil),
	}
	file_jnx_firewall_service_proto_msgTypes[81].OneofWrappers = []interface{}{
		(*FilterTermMplsTerminatingAction_Accept)(nil),
		(*FilterTermMplsTerminatingAction_Discard)(nil),
	}
	file_jnx_firewall_service_proto_msgTypes[89].OneofWrappers = []interface{}{
		(*FilterTerm_InetTerm)(nil),
		(*FilterTerm_EsTerm)(nil),
		(*FilterTerm_Inet6Term)(nil),
		(*FilterTerm_VplsTerm)(nil),
		(*FilterTerm_CccTerm)(nil),
		(*FilterTerm_MserviceTerm)(nil),
		(*FilterTerm_MplsTerm)(nil),
	}
	file_jnx_firewall_service_proto_msgTypes[112].OneofWrappers = []interface{}{
		(*FilterBindObjPoint_InterfaceName)(nil),
		(*FilterBindObjPoint_ForwardingTable)(nil),
		(*FilterBindObjPoint_Vlan)(nil),
		(*FilterBindObjPoint_BridgeDomain)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_jnx_firewall_service_proto_rawDesc,
			NumEnums:      31,
			NumMessages:   115,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_jnx_firewall_service_proto_goTypes,
		DependencyIndexes: file_jnx_firewall_service_proto_depIdxs,
		EnumInfos:         file_jnx_firewall_service_proto_enumTypes,
		MessageInfos:      file_jnx_firewall_service_proto_msgTypes,
	}.Build()
	File_jnx_firewall_service_proto = out.File
	file_jnx_firewall_service_proto_rawDesc = nil
	file_jnx_firewall_service_proto_goTypes = nil
	file_jnx_firewall_service_proto_depIdxs = nil
}
