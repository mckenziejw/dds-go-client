//
// Copyright 2020, Juniper Networks, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: jnx_routing_bgp_service.proto

//[brief]: This package gives support for BGP services.

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// [brief]: BGP peer type.
// [detail]: BGP peer type identifies if the associated route as an internal (IBGP)
// or external (EBGP) route.
// [default]: BGP_INTERNAL
type PeerType int32

const (
	// [brief]: IBGP Route
	PeerType_BGP_INTERNAL PeerType = 0
	// [brief]: EBGP Route
	PeerType_BGP_EXTERNAL PeerType = 1
)

// Enum value maps for PeerType.
var (
	PeerType_name = map[int32]string{
		0: "BGP_INTERNAL",
		1: "BGP_EXTERNAL",
	}
	PeerType_value = map[string]int32{
		"BGP_INTERNAL": 0,
		"BGP_EXTERNAL": 1,
	}
)

func (x PeerType) Enum() *PeerType {
	p := new(PeerType)
	*p = x
	return p
}

func (x PeerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PeerType) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_routing_bgp_service_proto_enumTypes[0].Descriptor()
}

func (PeerType) Type() protoreflect.EnumType {
	return &file_jnx_routing_bgp_service_proto_enumTypes[0]
}

func (x PeerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PeerType.Descriptor instead.
func (PeerType) EnumDescriptor() ([]byte, []int) {
	return file_jnx_routing_bgp_service_proto_rawDescGZIP(), []int{0}
}

// [brief]: Route Subscribe operations.
// [detail]: The route operation types for the subscribe entries.
// [default]: ROUTE_UPDATE
type RouteSubscribeEntry_RouteSubscribeOper int32

const (
	// [brief]: A new route is being added or modified.
	// bgp_route will contain the route info.
	RouteSubscribeEntry_ROUTE_UPDATE RouteSubscribeEntry_RouteSubscribeOper = 0
	// [brief]: An existing route is being deleted.
	// bgp_route will contain the route info.
	RouteSubscribeEntry_ROUTE_DELETE RouteSubscribeEntry_RouteSubscribeOper = 1
	// [brief]: The initial set of route subscribing entries following a fresh
	// client registration has been completed. bgp_route will be null for
	// this operation.
	RouteSubscribeEntry_END_OF_RIBS RouteSubscribeEntry_RouteSubscribeOper = 2
)

// Enum value maps for RouteSubscribeEntry_RouteSubscribeOper.
var (
	RouteSubscribeEntry_RouteSubscribeOper_name = map[int32]string{
		0: "ROUTE_UPDATE",
		1: "ROUTE_DELETE",
		2: "END_OF_RIBS",
	}
	RouteSubscribeEntry_RouteSubscribeOper_value = map[string]int32{
		"ROUTE_UPDATE": 0,
		"ROUTE_DELETE": 1,
		"END_OF_RIBS":  2,
	}
)

func (x RouteSubscribeEntry_RouteSubscribeOper) Enum() *RouteSubscribeEntry_RouteSubscribeOper {
	p := new(RouteSubscribeEntry_RouteSubscribeOper)
	*p = x
	return p
}

func (x RouteSubscribeEntry_RouteSubscribeOper) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RouteSubscribeEntry_RouteSubscribeOper) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_routing_bgp_service_proto_enumTypes[1].Descriptor()
}

func (RouteSubscribeEntry_RouteSubscribeOper) Type() protoreflect.EnumType {
	return &file_jnx_routing_bgp_service_proto_enumTypes[1]
}

func (x RouteSubscribeEntry_RouteSubscribeOper) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RouteSubscribeEntry_RouteSubscribeOper.Descriptor instead.
func (RouteSubscribeEntry_RouteSubscribeOper) EnumDescriptor() ([]byte, []int) {
	return file_jnx_routing_bgp_service_proto_rawDescGZIP(), []int{3, 0}
}

// [brief]: Initialize status code.
// [detail]: Possible return codes for route service initialize operations.
// [default]: SUCCESS
type InitializeResponse_StatusCode int32

const (
	// [brief]: Request successfully completed. Note that no preexisting
	// state for old clients with the same name was rebound.
	InitializeResponse_SUCCESS InitializeResponse_StatusCode = 0
	// [brief]: Request successfully completed AND preexisting routing state
	// for an old client connection of the same name has been recovered
	// and bound to this client connection.
	InitializeResponse_SUCCESS_STATE_REBOUND InitializeResponse_StatusCode = 1
	// [brief]: Request failed due to an internal server error.
	InitializeResponse_INTERNAL_ERROR InitializeResponse_StatusCode = 2
	// [brief]: Failed due to previous initialization operation.
	InitializeResponse_ALREADY_INITIALIZED InitializeResponse_StatusCode = 3
	// [brief]: Failed to find or create a gateway.
	InitializeResponse_GATEWAY_INVALID InitializeResponse_StatusCode = 4
	// [brief]: Previous clean up work is pending try again later.
	InitializeResponse_CLEANUP_PENDING InitializeResponse_StatusCode = 5
	// [brief]: The BGP protocol is not configured and initialized.
	InitializeResponse_BGP_NOT_READY InitializeResponse_StatusCode = 6
)

// Enum value maps for InitializeResponse_StatusCode.
var (
	InitializeResponse_StatusCode_name = map[int32]string{
		0: "SUCCESS",
		1: "SUCCESS_STATE_REBOUND",
		2: "INTERNAL_ERROR",
		3: "ALREADY_INITIALIZED",
		4: "GATEWAY_INVALID",
		5: "CLEANUP_PENDING",
		6: "BGP_NOT_READY",
	}
	InitializeResponse_StatusCode_value = map[string]int32{
		"SUCCESS":               0,
		"SUCCESS_STATE_REBOUND": 1,
		"INTERNAL_ERROR":        2,
		"ALREADY_INITIALIZED":   3,
		"GATEWAY_INVALID":       4,
		"CLEANUP_PENDING":       5,
		"BGP_NOT_READY":         6,
	}
)

func (x InitializeResponse_StatusCode) Enum() *InitializeResponse_StatusCode {
	p := new(InitializeResponse_StatusCode)
	*p = x
	return p
}

func (x InitializeResponse_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InitializeResponse_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_routing_bgp_service_proto_enumTypes[2].Descriptor()
}

func (InitializeResponse_StatusCode) Type() protoreflect.EnumType {
	return &file_jnx_routing_bgp_service_proto_enumTypes[2]
}

func (x InitializeResponse_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InitializeResponse_StatusCode.Descriptor instead.
func (InitializeResponse_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_jnx_routing_bgp_service_proto_rawDescGZIP(), []int{5, 0}
}

// [brief]: Cleanup status code.
// [detail]: Possible return codes for route service cleanup operations.
// [default]: SUCCESS.
type CleanupResponse_StatusCode int32

const (
	// [brief]: Request successfully completed.
	CleanupResponse_SUCCESS CleanupResponse_StatusCode = 0
	// [brief]: Request failed due to an internal server error.
	CleanupResponse_INTERNAL_ERROR CleanupResponse_StatusCode = 1
	// [brief]: Request failed because there was no initialized state
	// to cleanup.
	CleanupResponse_NOT_INITIALIZED CleanupResponse_StatusCode = 2
)

// Enum value maps for CleanupResponse_StatusCode.
var (
	CleanupResponse_StatusCode_name = map[int32]string{
		0: "SUCCESS",
		1: "INTERNAL_ERROR",
		2: "NOT_INITIALIZED",
	}
	CleanupResponse_StatusCode_value = map[string]int32{
		"SUCCESS":         0,
		"INTERNAL_ERROR":  1,
		"NOT_INITIALIZED": 2,
	}
)

func (x CleanupResponse_StatusCode) Enum() *CleanupResponse_StatusCode {
	p := new(CleanupResponse_StatusCode)
	*p = x
	return p
}

func (x CleanupResponse_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CleanupResponse_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_routing_bgp_service_proto_enumTypes[3].Descriptor()
}

func (CleanupResponse_StatusCode) Type() protoreflect.EnumType {
	return &file_jnx_routing_bgp_service_proto_enumTypes[3]
}

func (x CleanupResponse_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CleanupResponse_StatusCode.Descriptor instead.
func (CleanupResponse_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_jnx_routing_bgp_service_proto_rawDescGZIP(), []int{7, 0}
}

// [brief]: Response sub-code.
// [detail]: Possible return sub-code for route add/modify/update/remove operations.
// [default]: SUCCESS.
type RouteOperResponse_StatusCode int32

const (
	// [brief]: Request successfully completed in full.
	RouteOperResponse_SUCCESS RouteOperResponse_StatusCode = 0
	// [brief]: Request failed due to an internal server error.
	RouteOperResponse_INTERNAL_ERROR RouteOperResponse_StatusCode = 1
	// [brief]: The BGP route service has not been initialized.
	RouteOperResponse_NOT_INITIALIZED RouteOperResponse_StatusCode = 2
	// [brief]: Request did not result in any operations.
	RouteOperResponse_NO_OP RouteOperResponse_StatusCode = 3
	// [brief]: Request contained too many operations.
	RouteOperResponse_TOO_MANY_OPS RouteOperResponse_StatusCode = 4
	// [brief]: Request contained an invalid table.
	RouteOperResponse_TABLE_INVALID RouteOperResponse_StatusCode = 5
	// [brief]: Request contained a table that was not ready for operations.
	RouteOperResponse_TABLE_NOT_READY RouteOperResponse_StatusCode = 6
	// [brief]: Request contained an invalid destination address prefix.
	RouteOperResponse_PREFIX_INVALID RouteOperResponse_StatusCode = 7
	// [brief]: Request contained a destination prefix length too short for
	// the supplied address/NLRI.
	RouteOperResponse_PREFIX_LEN_TOO_SHORT RouteOperResponse_StatusCode = 8
	// [brief]: Request contained a destination prefix length too long for
	// the supplied address/NLRI.
	RouteOperResponse_PREFIX_LEN_TOO_LONG RouteOperResponse_StatusCode = 9
	// [brief]: The server did not have a valid gateway associated with the
	// client.
	RouteOperResponse_GATEWAY_INVALID RouteOperResponse_StatusCode = 10
	// [brief]: Request contained an invalid nexthop.
	RouteOperResponse_NEXTHOP_INVALID RouteOperResponse_StatusCode = 11
	// [brief]: Request contained a nexthop with an invalid address.
	RouteOperResponse_NEXTHOP_ADDRESS_INVALID RouteOperResponse_StatusCode = 12
	// [brief]: Request to add paths exceeding maximum ECMP paths for a
	// destination.
	RouteOperResponse_NEXTHOP_ECMP_LIMIT RouteOperResponse_StatusCode = 13
	// [brief]: Request contained an invalid community.
	RouteOperResponse_COMMUNITY_LIST_INVALID RouteOperResponse_StatusCode = 14
	// [brief]: Request contained an invalid AS path.
	RouteOperResponse_ASPATH_INVALID RouteOperResponse_StatusCode = 15
	// [brief]: Request contained a invalid label information.
	RouteOperResponse_LABEL_INFO_INVALID RouteOperResponse_StatusCode = 16
	// [brief]: Request contains a route that is already present in the table.
	RouteOperResponse_ROUTE_EXISTS RouteOperResponse_StatusCode = 17
	// [brief]: Request contains a route that is NOT present in the table.
	RouteOperResponse_ROUTE_NOT_FOUND RouteOperResponse_StatusCode = 18
	// [brief]: Request contains an invalid cluster list.
	RouteOperResponse_CLUSTER_LIST_INVALID RouteOperResponse_StatusCode = 19
	// [brief]: Request contains an invalid protocol. Only PROTO_UNSPECIFID
	// or PROTO_BGP_STATIC are allowed in route change operations.
	RouteOperResponse_PROTOCOL_INVALID RouteOperResponse_StatusCode = 20
	// [brief]: Request contains a route that is NOT present in the table.
	RouteOperResponse_ROUTE_ADD_FAILED RouteOperResponse_StatusCode = 21
	// [brief]: The BGP protocol is not initialized and ready to accept
	// route change operations.
	RouteOperResponse_BGP_NOT_READY RouteOperResponse_StatusCode = 22
	// [brief]: Request cannot be serviced until current requests are processed.
	RouteOperResponse_REQUEST_NOT_DONE RouteOperResponse_StatusCode = 23
	// [brief]: Request contains a parameter that is not currently supported.
	RouteOperResponse_REQUEST_UNSUPPORTED RouteOperResponse_StatusCode = 24
	// [brief]: Request contained an invalid BGP peer type.
	RouteOperResponse_PEER_TYPE_INVALID RouteOperResponse_StatusCode = 25
	// [brief]: SR-TE Segment Lists is invalid, like zero segment list.
	RouteOperResponse_SEGMENT_LIST_INVALID RouteOperResponse_StatusCode = 26
	// [brief]: SR-TE Segment is invalid, like zero segment list.
	RouteOperResponse_SEGMENT_INVALID RouteOperResponse_StatusCode = 27
	// [brief]: SR-TE Segment label is invalid; reserved label or
	// label TTL > 255.
	RouteOperResponse_SEGMENT_LABEL_INVALID RouteOperResponse_StatusCode = 28
	// [brief]: SR-TE Segment ID is invalid like segment type is not set.
	RouteOperResponse_SEGMENT_ID_INVALID RouteOperResponse_StatusCode = 29
	// [brief]: Number of SR-TE Segment Lists exceeded limit (8).
	RouteOperResponse_SEGMENT_LIST_COUNT_INVALID RouteOperResponse_StatusCode = 30
	// [brief]: Number of SR-TE Segments exceeded limit (5).
	RouteOperResponse_SEGMENT_COUNT_INVALID RouteOperResponse_StatusCode = 31
	// [brief]: SRTE Route Data is not set.
	RouteOperResponse_SRTE_ROUTE_DATA_INVALID RouteOperResponse_StatusCode = 32
	// [brief]: Flow spec address field is invalid.
	RouteOperResponse_FLOWSPEC_ADDR_INVALID RouteOperResponse_StatusCode = 33
	// [brief]: Flow spec match fields invalid or no match field is specified.
	RouteOperResponse_FLOWSPEC_MTCH_FLDS_INVALID RouteOperResponse_StatusCode = 34
	// [brief]: Flow spec prefix contains invalid action or no action specified.
	RouteOperResponse_FLOWSPEC_ACTION_INVALID RouteOperResponse_StatusCode = 35
	// [brief]: Flow spec prefix matches an existing flow-spec route added by CLI.
	RouteOperResponse_FLOWSPEC_STATIC_RT_EXISTS RouteOperResponse_StatusCode = 36
	// [brief]: SRTE Priority value is invalid. Valid values are [1,255]
	RouteOperResponse_SRTE_PRIORITY_INVALID RouteOperResponse_StatusCode = 37
)

// Enum value maps for RouteOperResponse_StatusCode.
var (
	RouteOperResponse_StatusCode_name = map[int32]string{
		0:  "SUCCESS",
		1:  "INTERNAL_ERROR",
		2:  "NOT_INITIALIZED",
		3:  "NO_OP",
		4:  "TOO_MANY_OPS",
		5:  "TABLE_INVALID",
		6:  "TABLE_NOT_READY",
		7:  "PREFIX_INVALID",
		8:  "PREFIX_LEN_TOO_SHORT",
		9:  "PREFIX_LEN_TOO_LONG",
		10: "GATEWAY_INVALID",
		11: "NEXTHOP_INVALID",
		12: "NEXTHOP_ADDRESS_INVALID",
		13: "NEXTHOP_ECMP_LIMIT",
		14: "COMMUNITY_LIST_INVALID",
		15: "ASPATH_INVALID",
		16: "LABEL_INFO_INVALID",
		17: "ROUTE_EXISTS",
		18: "ROUTE_NOT_FOUND",
		19: "CLUSTER_LIST_INVALID",
		20: "PROTOCOL_INVALID",
		21: "ROUTE_ADD_FAILED",
		22: "BGP_NOT_READY",
		23: "REQUEST_NOT_DONE",
		24: "REQUEST_UNSUPPORTED",
		25: "PEER_TYPE_INVALID",
		26: "SEGMENT_LIST_INVALID",
		27: "SEGMENT_INVALID",
		28: "SEGMENT_LABEL_INVALID",
		29: "SEGMENT_ID_INVALID",
		30: "SEGMENT_LIST_COUNT_INVALID",
		31: "SEGMENT_COUNT_INVALID",
		32: "SRTE_ROUTE_DATA_INVALID",
		33: "FLOWSPEC_ADDR_INVALID",
		34: "FLOWSPEC_MTCH_FLDS_INVALID",
		35: "FLOWSPEC_ACTION_INVALID",
		36: "FLOWSPEC_STATIC_RT_EXISTS",
		37: "SRTE_PRIORITY_INVALID",
	}
	RouteOperResponse_StatusCode_value = map[string]int32{
		"SUCCESS":                    0,
		"INTERNAL_ERROR":             1,
		"NOT_INITIALIZED":            2,
		"NO_OP":                      3,
		"TOO_MANY_OPS":               4,
		"TABLE_INVALID":              5,
		"TABLE_NOT_READY":            6,
		"PREFIX_INVALID":             7,
		"PREFIX_LEN_TOO_SHORT":       8,
		"PREFIX_LEN_TOO_LONG":        9,
		"GATEWAY_INVALID":            10,
		"NEXTHOP_INVALID":            11,
		"NEXTHOP_ADDRESS_INVALID":    12,
		"NEXTHOP_ECMP_LIMIT":         13,
		"COMMUNITY_LIST_INVALID":     14,
		"ASPATH_INVALID":             15,
		"LABEL_INFO_INVALID":         16,
		"ROUTE_EXISTS":               17,
		"ROUTE_NOT_FOUND":            18,
		"CLUSTER_LIST_INVALID":       19,
		"PROTOCOL_INVALID":           20,
		"ROUTE_ADD_FAILED":           21,
		"BGP_NOT_READY":              22,
		"REQUEST_NOT_DONE":           23,
		"REQUEST_UNSUPPORTED":        24,
		"PEER_TYPE_INVALID":          25,
		"SEGMENT_LIST_INVALID":       26,
		"SEGMENT_INVALID":            27,
		"SEGMENT_LABEL_INVALID":      28,
		"SEGMENT_ID_INVALID":         29,
		"SEGMENT_LIST_COUNT_INVALID": 30,
		"SEGMENT_COUNT_INVALID":      31,
		"SRTE_ROUTE_DATA_INVALID":    32,
		"FLOWSPEC_ADDR_INVALID":      33,
		"FLOWSPEC_MTCH_FLDS_INVALID": 34,
		"FLOWSPEC_ACTION_INVALID":    35,
		"FLOWSPEC_STATIC_RT_EXISTS":  36,
		"SRTE_PRIORITY_INVALID":      37,
	}
)

func (x RouteOperResponse_StatusCode) Enum() *RouteOperResponse_StatusCode {
	p := new(RouteOperResponse_StatusCode)
	*p = x
	return p
}

func (x RouteOperResponse_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RouteOperResponse_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_routing_bgp_service_proto_enumTypes[4].Descriptor()
}

func (RouteOperResponse_StatusCode) Type() protoreflect.EnumType {
	return &file_jnx_routing_bgp_service_proto_enumTypes[4]
}

func (x RouteOperResponse_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RouteOperResponse_StatusCode.Descriptor instead.
func (RouteOperResponse_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_jnx_routing_bgp_service_proto_rawDescGZIP(), []int{11, 0}
}

// [brief]: Get status code.
// [detail]: Possible return codes for route service get operations.
// [default]: SUCCESS
type RouteGetResponse_StatusCode int32

const (
	// [brief]: Request successfully completed in full.
	RouteGetResponse_SUCCESS RouteGetResponse_StatusCode = 0
	// [brief]: Request failed due to an internal server error.
	RouteGetResponse_INTERNAL_ERROR RouteGetResponse_StatusCode = 1
	// [brief]: Request failed because there was no initialized state to
	// cleanup.
	RouteGetResponse_NOT_INITIALIZED RouteGetResponse_StatusCode = 2
	// [brief]: Request contained an invalid table.
	RouteGetResponse_TABLE_INVALID RouteGetResponse_StatusCode = 3
	// [brief]: Request contained a table that was not ready for operations.
	RouteGetResponse_TABLE_NOT_READY RouteGetResponse_StatusCode = 4
	// [brief]: Request contained an invalid destination address prefix.
	RouteGetResponse_PREFIX_INVALID RouteGetResponse_StatusCode = 5
	// [brief]: Request contained a destination prefix length too short for the
	// supplied address/NLRI.
	RouteGetResponse_PREFIX_LEN_TOO_SHORT RouteGetResponse_StatusCode = 6
	// [brief]: Request contained a destination prefix length too long for the
	// supplied address/NLRI.
	RouteGetResponse_PREFIX_LEN_TOO_LONG RouteGetResponse_StatusCode = 7
	// [brief]: Request contained a route that does not match
	// destinations in the routing table.
	RouteGetResponse_ROUTE_NOT_FOUND RouteGetResponse_StatusCode = 8
	// [brief]: Request specified an invalid protocol to match.
	RouteGetResponse_PROTOCOL_INVALID RouteGetResponse_StatusCode = 9
	// [brief]: Request does not contain valid route match parameters.
	RouteGetResponse_ROUTE_INVALID RouteGetResponse_StatusCode = 10
	// [brief]: Request contains a parameter that is not currently supported.
	RouteGetResponse_REQUEST_UNSUPPORTED RouteGetResponse_StatusCode = 11
	// [brief]: Request cannot be serviced until current requests are processed.
	RouteGetResponse_TRY_AGAIN RouteGetResponse_StatusCode = 12
	// [brief]: Request contains a route_count that exceeds the max of 1000.
	RouteGetResponse_ROUTE_COUNT_INVALID RouteGetResponse_StatusCode = 13
	// [brief]: Request contained an invalid community.
	RouteGetResponse_COMMUNITY_LIST_INVALID RouteGetResponse_StatusCode = 14
	// [brief]: Flow spec address field is invalid.
	RouteGetResponse_FLOWSPEC_ADDR_INVALID RouteGetResponse_StatusCode = 15
	// [brief]: Flow spec match fields invalid or no match field is specified.
	RouteGetResponse_FLOWSPEC_MTCH_FLDS_INVALID RouteGetResponse_StatusCode = 16
	// [brief]: Flow spec prefix contains invalid action or no action specified.
	RouteGetResponse_FLOWSPEC_ACTION_INVALID RouteGetResponse_StatusCode = 17
)

// Enum value maps for RouteGetResponse_StatusCode.
var (
	RouteGetResponse_StatusCode_name = map[int32]string{
		0:  "SUCCESS",
		1:  "INTERNAL_ERROR",
		2:  "NOT_INITIALIZED",
		3:  "TABLE_INVALID",
		4:  "TABLE_NOT_READY",
		5:  "PREFIX_INVALID",
		6:  "PREFIX_LEN_TOO_SHORT",
		7:  "PREFIX_LEN_TOO_LONG",
		8:  "ROUTE_NOT_FOUND",
		9:  "PROTOCOL_INVALID",
		10: "ROUTE_INVALID",
		11: "REQUEST_UNSUPPORTED",
		12: "TRY_AGAIN",
		13: "ROUTE_COUNT_INVALID",
		14: "COMMUNITY_LIST_INVALID",
		15: "FLOWSPEC_ADDR_INVALID",
		16: "FLOWSPEC_MTCH_FLDS_INVALID",
		17: "FLOWSPEC_ACTION_INVALID",
	}
	RouteGetResponse_StatusCode_value = map[string]int32{
		"SUCCESS":                    0,
		"INTERNAL_ERROR":             1,
		"NOT_INITIALIZED":            2,
		"TABLE_INVALID":              3,
		"TABLE_NOT_READY":            4,
		"PREFIX_INVALID":             5,
		"PREFIX_LEN_TOO_SHORT":       6,
		"PREFIX_LEN_TOO_LONG":        7,
		"ROUTE_NOT_FOUND":            8,
		"PROTOCOL_INVALID":           9,
		"ROUTE_INVALID":              10,
		"REQUEST_UNSUPPORTED":        11,
		"TRY_AGAIN":                  12,
		"ROUTE_COUNT_INVALID":        13,
		"COMMUNITY_LIST_INVALID":     14,
		"FLOWSPEC_ADDR_INVALID":      15,
		"FLOWSPEC_MTCH_FLDS_INVALID": 16,
		"FLOWSPEC_ACTION_INVALID":    17,
	}
)

func (x RouteGetResponse_StatusCode) Enum() *RouteGetResponse_StatusCode {
	p := new(RouteGetResponse_StatusCode)
	*p = x
	return p
}

func (x RouteGetResponse_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RouteGetResponse_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_routing_bgp_service_proto_enumTypes[5].Descriptor()
}

func (RouteGetResponse_StatusCode) Type() protoreflect.EnumType {
	return &file_jnx_routing_bgp_service_proto_enumTypes[5]
}

func (x RouteGetResponse_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RouteGetResponse_StatusCode.Descriptor instead.
func (RouteGetResponse_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_jnx_routing_bgp_service_proto_rawDescGZIP(), []int{12, 0}
}

// [brief]: Subscribe status code.
// [detail]: Possible return codes for route subscribe operations.
// [default]: SUCCESS
type RouteSubscribeResponse_StatusCode int32

const (
	// [brief]: Request successfully completed in full.
	RouteSubscribeResponse_SUCCESS RouteSubscribeResponse_StatusCode = 0
	// [brief]: Request failed due to an internal server error.
	RouteSubscribeResponse_INTERNAL_ERROR RouteSubscribeResponse_StatusCode = 1
	// [brief]: The BGP route service has not been initialized.
	RouteSubscribeResponse_NOT_INITIALIZED RouteSubscribeResponse_StatusCode = 2
	// [brief]: Too many clients or BMP stations are already subscribed.
	RouteSubscribeResponse_REGISTRATIONS_EXCEEDED RouteSubscribeResponse_StatusCode = 3
	// [brief]: Client is already subscribed.
	RouteSubscribeResponse_ALREADY_SUBSCRIBED RouteSubscribeResponse_StatusCode = 4
	// [brief]: Request contains a route_count that exceeds the max of 1000.
	RouteSubscribeResponse_ROUTE_COUNT_INVALID RouteSubscribeResponse_StatusCode = 5
	// [brief]: Request contains invalid address format.
	RouteSubscribeResponse_ADDRESS_FORMAT_INVALID RouteSubscribeResponse_StatusCode = 6
	// [brief]: Request contains invalid table format.
	RouteSubscribeResponse_TABLE_FORMAT_INVALID RouteSubscribeResponse_StatusCode = 7
)

// Enum value maps for RouteSubscribeResponse_StatusCode.
var (
	RouteSubscribeResponse_StatusCode_name = map[int32]string{
		0: "SUCCESS",
		1: "INTERNAL_ERROR",
		2: "NOT_INITIALIZED",
		3: "REGISTRATIONS_EXCEEDED",
		4: "ALREADY_SUBSCRIBED",
		5: "ROUTE_COUNT_INVALID",
		6: "ADDRESS_FORMAT_INVALID",
		7: "TABLE_FORMAT_INVALID",
	}
	RouteSubscribeResponse_StatusCode_value = map[string]int32{
		"SUCCESS":                0,
		"INTERNAL_ERROR":         1,
		"NOT_INITIALIZED":        2,
		"REGISTRATIONS_EXCEEDED": 3,
		"ALREADY_SUBSCRIBED":     4,
		"ROUTE_COUNT_INVALID":    5,
		"ADDRESS_FORMAT_INVALID": 6,
		"TABLE_FORMAT_INVALID":   7,
	}
)

func (x RouteSubscribeResponse_StatusCode) Enum() *RouteSubscribeResponse_StatusCode {
	p := new(RouteSubscribeResponse_StatusCode)
	*p = x
	return p
}

func (x RouteSubscribeResponse_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RouteSubscribeResponse_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_routing_bgp_service_proto_enumTypes[6].Descriptor()
}

func (RouteSubscribeResponse_StatusCode) Type() protoreflect.EnumType {
	return &file_jnx_routing_bgp_service_proto_enumTypes[6]
}

func (x RouteSubscribeResponse_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RouteSubscribeResponse_StatusCode.Descriptor instead.
func (RouteSubscribeResponse_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_jnx_routing_bgp_service_proto_rawDescGZIP(), []int{14, 0}
}

// [brief]: Unsubscribe status code.
// [detail]: Possible return codes for route unsubscribe operation.
// [default]: SUCCESS
type RouteUnsubscribeResponse_StatusCode int32

const (
	// [brief]: Request successfully completed in full.
	RouteUnsubscribeResponse_SUCCESS RouteUnsubscribeResponse_StatusCode = 0
	// [brief]: Request failed due to an internal server error.
	RouteUnsubscribeResponse_INTERNAL_ERROR RouteUnsubscribeResponse_StatusCode = 1
	// [brief]: The BGP route service has not been initialized.
	RouteUnsubscribeResponse_NOT_INITIALIZED RouteUnsubscribeResponse_StatusCode = 2
	// [brief]: Client is already subscribed.
	RouteUnsubscribeResponse_NOT_SUBSCRIBED RouteUnsubscribeResponse_StatusCode = 3
)

// Enum value maps for RouteUnsubscribeResponse_StatusCode.
var (
	RouteUnsubscribeResponse_StatusCode_name = map[int32]string{
		0: "SUCCESS",
		1: "INTERNAL_ERROR",
		2: "NOT_INITIALIZED",
		3: "NOT_SUBSCRIBED",
	}
	RouteUnsubscribeResponse_StatusCode_value = map[string]int32{
		"SUCCESS":         0,
		"INTERNAL_ERROR":  1,
		"NOT_INITIALIZED": 2,
		"NOT_SUBSCRIBED":  3,
	}
)

func (x RouteUnsubscribeResponse_StatusCode) Enum() *RouteUnsubscribeResponse_StatusCode {
	p := new(RouteUnsubscribeResponse_StatusCode)
	*p = x
	return p
}

func (x RouteUnsubscribeResponse_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RouteUnsubscribeResponse_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_routing_bgp_service_proto_enumTypes[7].Descriptor()
}

func (RouteUnsubscribeResponse_StatusCode) Type() protoreflect.EnumType {
	return &file_jnx_routing_bgp_service_proto_enumTypes[7]
}

func (x RouteUnsubscribeResponse_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RouteUnsubscribeResponse_StatusCode.Descriptor instead.
func (RouteUnsubscribeResponse_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_jnx_routing_bgp_service_proto_rawDescGZIP(), []int{16, 0}
}

// [brief]: Refersh status code.
// [detail]: Possible return codes for route refersh operation.
// [default]: SUCCESS
type RouteRefreshResponse_StatusCode int32

const (
	// [brief]: Request successfully completed in full.
	RouteRefreshResponse_SUCCESS RouteRefreshResponse_StatusCode = 0
	// [brief]: Request failed due to an internal server error.
	RouteRefreshResponse_INTERNAL_ERROR RouteRefreshResponse_StatusCode = 1
	// [brief]: The BGP route service has not been initialized.
	RouteRefreshResponse_NOT_INITIALIZED RouteRefreshResponse_StatusCode = 2
	// [brief]: Client is already subscribed.
	RouteRefreshResponse_NOT_SUBSCRIBED RouteRefreshResponse_StatusCode = 3
)

// Enum value maps for RouteRefreshResponse_StatusCode.
var (
	RouteRefreshResponse_StatusCode_name = map[int32]string{
		0: "SUCCESS",
		1: "INTERNAL_ERROR",
		2: "NOT_INITIALIZED",
		3: "NOT_SUBSCRIBED",
	}
	RouteRefreshResponse_StatusCode_value = map[string]int32{
		"SUCCESS":         0,
		"INTERNAL_ERROR":  1,
		"NOT_INITIALIZED": 2,
		"NOT_SUBSCRIBED":  3,
	}
)

func (x RouteRefreshResponse_StatusCode) Enum() *RouteRefreshResponse_StatusCode {
	p := new(RouteRefreshResponse_StatusCode)
	*p = x
	return p
}

func (x RouteRefreshResponse_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RouteRefreshResponse_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_routing_bgp_service_proto_enumTypes[8].Descriptor()
}

func (RouteRefreshResponse_StatusCode) Type() protoreflect.EnumType {
	return &file_jnx_routing_bgp_service_proto_enumTypes[8]
}

func (x RouteRefreshResponse_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RouteRefreshResponse_StatusCode.Descriptor instead.
func (RouteRefreshResponse_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_jnx_routing_bgp_service_proto_rawDescGZIP(), []int{18, 0}
}

// [brief]: Route Flags message.
// [detail]: Route Flags values that alter route add behavior.
type RouteFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Route flag indicating whether to attach the well-known
	// no-advertise community.
	// [detail]: No-advertise has the effect of instructing the route not to
	// advertise the route further. The community may alternately be
	// included in the community_list.
	// [default_value]: FALSE
	NoAdvertise bool `protobuf:"varint,1,opt,name=no_advertise,json=noAdvertise,proto3" json:"no_advertise,omitempty"`
	// [brief]: Route flag indicating whether to attach the well-known
	// no-export community.
	// [detail]: No-export has the effect of instructing the router not to
	// advertise the route beyond the BGP confederation boundary.
	// The community may alternately be included in the community_list.
	// [default_value]: FALSE
	NoExport bool `protobuf:"varint,2,opt,name=no_export,json=noExport,proto3" json:"no_export,omitempty"`
	// [brief]: Route flag indicating whether to use NH_REJECT for the route.
	// [detail]: This can be used to save memory when there are a high number of
	// unique nexthops. This makes sense to be set only when programming route in RR.
	// [default_value]: FALSE
	UseNexthopReject bool `protobuf:"varint,3,opt,name=use_nexthop_reject,json=useNexthopReject,proto3" json:"use_nexthop_reject,omitempty"`
	// [brief]: Route flag indicating whether the next-hop is fictitious.
	// [detail]: For flow-spec route, the route next-hop will be of type
	// fictitious. If a next-hop is fictitious, it will not have next-hop address.
	// [default_value]: FALSE
	UseNexthopFictitious bool `protobuf:"varint,4,opt,name=use_nexthop_fictitious,json=useNexthopFictitious,proto3" json:"use_nexthop_fictitious,omitempty"`
}

func (x *RouteFlags) Reset() {
	*x = RouteFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_bgp_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteFlags) ProtoMessage() {}

func (x *RouteFlags) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_bgp_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteFlags.ProtoReflect.Descriptor instead.
func (*RouteFlags) Descriptor() ([]byte, []int) {
	return file_jnx_routing_bgp_service_proto_rawDescGZIP(), []int{0}
}

func (x *RouteFlags) GetNoAdvertise() bool {
	if x != nil {
		return x.NoAdvertise
	}
	return false
}

func (x *RouteFlags) GetNoExport() bool {
	if x != nil {
		return x.NoExport
	}
	return false
}

func (x *RouteFlags) GetUseNexthopReject() bool {
	if x != nil {
		return x.UseNexthopReject
	}
	return false
}

func (x *RouteFlags) GetUseNexthopFictitious() bool {
	if x != nil {
		return x.UseNexthopFictitious
	}
	return false
}

// [brief]: The route fields that uniquely identify a route.
// [detail]: Route matching parameters provide the key for identifying
// BGP routes. Programmed BGP-Static routes must be unique
// for the bgp_route_match parameters. Dynamic BGP routes may
// may have multiple matches to a given set of RouteMatch
// parameters.
type RouteMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [mandatory]:
	// [brief]: Destination prefix of the route.
	DestPrefix *RoutePrefix `protobuf:"bytes,1,opt,name=dest_prefix,json=destPrefix,proto3" json:"dest_prefix,omitempty"`
	// [mandatory]:
	// [brief]: Destination prefix length in bits.
	DestPrefixLen uint32 `protobuf:"varint,2,opt,name=dest_prefix_len,json=destPrefixLen,proto3" json:"dest_prefix_len,omitempty"`
	// [mandatory]:
	// [brief]: Route table specified by either name or ID.
	Table *RouteTable `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
	// [brief]: Protocol that installed the route in the table.
	// [detail]: This can accept only PROTO_ANY or PROTO_BGP or PROTO_BGP_STATIC.
	// Permitted values and default behavior are dependent on the RPC.
	// For route change requests, protocol must be either PROTO_ANY or
	// PROTO_BGP_STATIC and the resulting route will have PROTO_BGP_STATIC.
	// For route get requests, matching may be done on either PROTO_ANY, PROTO_BGP
	// or PROTO_BGP_STATIC.
	// OPTIONAL
	Protocol RouteProtoType `protobuf:"varint,4,opt,name=protocol,proto3,enum=jnx.jet.routing.base.RouteProtoType" json:"protocol,omitempty"`
	// [brief]: Path cookie.
	// [detail]: Path cookie value differentiates routes with the same destination.
	// The cookie may be any unsigned 64-bit value. The default is 0,
	// which indicates that cookie is not evaluated for matching.
	// [default_value]: 0
	// OPTIONAL
	Cookie uint64 `protobuf:"varint,5,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// [brief]: List of communities.
	// [detail]: Community string list associated with route. The list could be
	// a single/multiple community string or a regular expression.
	// This is an optional parameter. If this list is null, then all
	// route with or without community would be matched.
	// OPTIONAL
	Communities *Communities `protobuf:"bytes,6,opt,name=communities,proto3" json:"communities,omitempty"`
}

func (x *RouteMatch) Reset() {
	*x = RouteMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_bgp_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteMatch) ProtoMessage() {}

func (x *RouteMatch) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_bgp_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteMatch.ProtoReflect.Descriptor instead.
func (*RouteMatch) Descriptor() ([]byte, []int) {
	return file_jnx_routing_bgp_service_proto_rawDescGZIP(), []int{1}
}

func (x *RouteMatch) GetDestPrefix() *RoutePrefix {
	if x != nil {
		return x.DestPrefix
	}
	return nil
}

func (x *RouteMatch) GetDestPrefixLen() uint32 {
	if x != nil {
		return x.DestPrefixLen
	}
	return 0
}

func (x *RouteMatch) GetTable() *RouteTable {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *RouteMatch) GetProtocol() RouteProtoType {
	if x != nil {
		return x.Protocol
	}
	return RouteProtoType_PROTO_ANY
}

func (x *RouteMatch) GetCookie() uint64 {
	if x != nil {
		return x.Cookie
	}
	return 0
}

func (x *RouteMatch) GetCommunities() *Communities {
	if x != nil {
		return x.Communities
	}
	return nil
}

// [brief]: Route entry.
// [detail]: A route entry specifying a single route destination and BGP path
// along with the route attributes for that path.
type RouteEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [mandatory]:
	// [brief]: Route key attribute.
	Key *RouteMatch `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// [brief]: Route preference.
	// [detail]: Route Preference, is also known as administrative distance.
	// Lower values of route preference are preferred.
	// [range]: 0:4,294,967,295 (2^32 -1).
	// [default_value]: 5
	// OPTIONAL
	RoutePreference *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=route_preference,json=routePreference,proto3" json:"route_preference,omitempty"`
	// [brief]: Local preference.
	// [detail]: Higher values of local preference are preferred.
	// [range]: 0:4,294,967,295 (2^32 -1).
	// [default_value]: 100
	// OPTIONAL
	LocalPreference *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=local_preference,json=localPreference,proto3" json:"local_preference,omitempty"`
	// [brief]: Multi-Exit Discriminator.
	// [detail]: Lower values of MED are preferred.
	// [range]: 0:4,294,967,295 (2^32 -1).
	// [default_value]: No MED is advertised
	// OPTIONAL
	Med *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=med,proto3" json:"med,omitempty"`
	// [brief]: AIGP distance.
	// [detail]: Lower values of AIGP distance are preferred.
	// [range]: 0:2^64-1.
	// [default_value]: No AIGP distance is advertised.
	// OPTIONAL
	AigpDistance *wrapperspb.UInt64Value `protobuf:"bytes,5,opt,name=aigp_distance,json=aigpDistance,proto3" json:"aigp_distance,omitempty"`
	// [brief]: Label information.
	// [detail]: Label information may be provided either as a single label
	// in L3VPN tables, or as a full label stack in BGP-Labeled-Unicast tables.
	// BGP-LU tables for L3VPN should provide a label stack with the VPN label
	// as the bottom-most label in the stack.
	// [default_value]: No label information is advertised.
	// OPTIONAL
	//
	// Types that are assignable to LabelInfo:
	//	*RouteEntry_Label
	//	*RouteEntry_Labels
	LabelInfo isRouteEntry_LabelInfo `protobuf_oneof:"label_info"`
	// [brief]: AS Path.
	// [detail]: AS Path for the route.
	// [default_value]: No non-local AS is advertised in AS Path.
	// OPTIONAL
	Aspath *AsPath `protobuf:"bytes,8,opt,name=aspath,proto3" json:"aspath,omitempty"`
	// [brief]: BGP originator ID.
	// [detail]: BGP originator ID is a unsigned 32-bit BGP Identifier
	// value, as per RFC 6286, encoded in network byte order.
	// [default_value]: No originator ID is advertised.
	// OPTIONAL
	OriginatorId *wrapperspb.UInt32Value `protobuf:"bytes,9,opt,name=originator_id,json=originatorId,proto3" json:"originator_id,omitempty"`
	// [brief]: BGP cluster list.
	// [detail]: BGP cluster list, list of cluster IDs specifying the
	// path of route reflectors though which this route has traversed.
	// [default_value]: No cluster list is advertised.
	// OPTIONAL
	ClusterList []*wrapperspb.UInt32Value `protobuf:"bytes,10,rep,name=cluster_list,json=clusterList,proto3" json:"cluster_list,omitempty"`
	// [brief]: BGP cluster ID.
	// [detail]: BGP Cluster ID is an unsigned 32-bit BGP Identifier value,
	// as per RFC 6286, encoded in network byte order. Cluster ID is
	// append to the cluster_list for advertisement with reflected routes.
	// [default_value]: No cluster ID is advertised.
	// OPTIONAL
	ClusterId *wrapperspb.UInt32Value `protobuf:"bytes,11,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// [mandatory]:
	// [brief]: Protocol next-hops.
	// [detail]: Protocol next-hop(s) for the route. If multiple next-hops are
	// given, the route will be treated as a BGP multipath for load balancing.
	// NOTE: Multipath is not currently supported by the API and
	// an error will be returned when adding/changing a route with more than
	// one next-hop.
	// [max_entries]: 1
	ProtocolNexthops []*IpAddress `protobuf:"bytes,12,rep,name=protocol_nexthops,json=protocolNexthops,proto3" json:"protocol_nexthops,omitempty"`
	// [brief]: BGP Peer type for this route.
	// [default_value]: BGP_INTERNAL.
	// OPTIONAL
	RouteType PeerType `protobuf:"varint,13,opt,name=route_type,json=routeType,proto3,enum=jnx.jet.routing.bgp.PeerType" json:"route_type,omitempty"`
	// [brief]: Flags for routes. These flags are generally non-mutually
	// exclusive states.
	// [default_value]: No flags.
	// OPTIONAL
	RouteFlags *RouteFlags `protobuf:"bytes,14,opt,name=route_flags,json=routeFlags,proto3" json:"route_flags,omitempty"`
	// [brief]: Address family specific route data.
	// [detail]: Mandatory for address family for which it is defined.
	// (e.g. SRTE).
	AddrFamilyData *AddressFamilySpecificData `protobuf:"bytes,15,opt,name=addr_family_data,json=addrFamilyData,proto3" json:"addr_family_data,omitempty"`
}

func (x *RouteEntry) Reset() {
	*x = RouteEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_bgp_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteEntry) ProtoMessage() {}

func (x *RouteEntry) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_bgp_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteEntry.ProtoReflect.Descriptor instead.
func (*RouteEntry) Descriptor() ([]byte, []int) {
	return file_jnx_routing_bgp_service_proto_rawDescGZIP(), []int{2}
}

func (x *RouteEntry) GetKey() *RouteMatch {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *RouteEntry) GetRoutePreference() *wrapperspb.UInt32Value {
	if x != nil {
		return x.RoutePreference
	}
	return nil
}

func (x *RouteEntry) GetLocalPreference() *wrapperspb.UInt32Value {
	if x != nil {
		return x.LocalPreference
	}
	return nil
}

func (x *RouteEntry) GetMed() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Med
	}
	return nil
}

func (x *RouteEntry) GetAigpDistance() *wrapperspb.UInt64Value {
	if x != nil {
		return x.AigpDistance
	}
	return nil
}

func (m *RouteEntry) GetLabelInfo() isRouteEntry_LabelInfo {
	if m != nil {
		return m.LabelInfo
	}
	return nil
}

func (x *RouteEntry) GetLabel() uint32 {
	if x, ok := x.GetLabelInfo().(*RouteEntry_Label); ok {
		return x.Label
	}
	return 0
}

func (x *RouteEntry) GetLabels() *LabelStack {
	if x, ok := x.GetLabelInfo().(*RouteEntry_Labels); ok {
		return x.Labels
	}
	return nil
}

func (x *RouteEntry) GetAspath() *AsPath {
	if x != nil {
		return x.Aspath
	}
	return nil
}

func (x *RouteEntry) GetOriginatorId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.OriginatorId
	}
	return nil
}

func (x *RouteEntry) GetClusterList() []*wrapperspb.UInt32Value {
	if x != nil {
		return x.ClusterList
	}
	return nil
}

func (x *RouteEntry) GetClusterId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClusterId
	}
	return nil
}

func (x *RouteEntry) GetProtocolNexthops() []*IpAddress {
	if x != nil {
		return x.ProtocolNexthops
	}
	return nil
}

func (x *RouteEntry) GetRouteType() PeerType {
	if x != nil {
		return x.RouteType
	}
	return PeerType_BGP_INTERNAL
}

func (x *RouteEntry) GetRouteFlags() *RouteFlags {
	if x != nil {
		return x.RouteFlags
	}
	return nil
}

func (x *RouteEntry) GetAddrFamilyData() *AddressFamilySpecificData {
	if x != nil {
		return x.AddrFamilyData
	}
	return nil
}

type isRouteEntry_LabelInfo interface {
	isRouteEntry_LabelInfo()
}

type RouteEntry_Label struct {
	// [brief]: Label.
	// [detail]: A valid 20-bit unsigned label value must be less than
	// decimal value and not within the reserved label range of
	// 4 through 15 (inclusive). It is not possible to set ToS bits
	// in this case.
	// [range]: 16:1,048,576.
	Label uint32 `protobuf:"varint,6,opt,name=label,proto3,oneof"`
}

type RouteEntry_Labels struct {
	// [brief]: Label stack.
	// [detail]: A properly constructed label stack which may include
	// VPN label in addition to a BGP-LU label stack.
	// NOTE: Label stack is not supported in this release of the API.
	Labels *LabelStack `protobuf:"bytes,7,opt,name=labels,proto3,oneof"`
}

func (*RouteEntry_Label) isRouteEntry_LabelInfo() {}

func (*RouteEntry_Labels) isRouteEntry_LabelInfo() {}

// [brief]: Route Subscribe entry.
// [detail]: A subscribing entry for a single BGP route streamed from BGP
// when the client has subscribed for route subscribing with RouteSubscribe().
type RouteSubscribeEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: The route subscribe operation type.
	Operation RouteSubscribeEntry_RouteSubscribeOper `protobuf:"varint,1,opt,name=operation,proto3,enum=jnx.jet.routing.bgp.RouteSubscribeEntry_RouteSubscribeOper" json:"operation,omitempty"`
	// [brief]: Route entry for subscribing route.
	// [detail]: The route that is the subject of this route subscribing operation.
	// If the operation is END_OF_RIBS, then no route will be
	// present here.
	Route *RouteEntry `protobuf:"bytes,2,opt,name=route,proto3" json:"route,omitempty"`
}

func (x *RouteSubscribeEntry) Reset() {
	*x = RouteSubscribeEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_bgp_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteSubscribeEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteSubscribeEntry) ProtoMessage() {}

func (x *RouteSubscribeEntry) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_bgp_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteSubscribeEntry.ProtoReflect.Descriptor instead.
func (*RouteSubscribeEntry) Descriptor() ([]byte, []int) {
	return file_jnx_routing_bgp_service_proto_rawDescGZIP(), []int{3}
}

func (x *RouteSubscribeEntry) GetOperation() RouteSubscribeEntry_RouteSubscribeOper {
	if x != nil {
		return x.Operation
	}
	return RouteSubscribeEntry_ROUTE_UPDATE
}

func (x *RouteSubscribeEntry) GetRoute() *RouteEntry {
	if x != nil {
		return x.Route
	}
	return nil
}

// [brief]: Initialize request.
// [detail]: Request to initialize the BGP route service. No parameters are needed.
type InitializeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: The format for IP addresses to be used in response message of get and
	// subscribe.
	// [default_value]: string
	// OPTIONAL
	DefaultAddressFormat AddressFormat `protobuf:"varint,1,opt,name=default_address_format,json=defaultAddressFormat,proto3,enum=jnx.jet.common.AddressFormat" json:"default_address_format,omitempty"`
	// [brief]: The format for table name to be used in response message of get and
	// subscribe.
	// [default_value]: string
	// OPTIONAL
	DefaultTableFormat RouteTableFormat `protobuf:"varint,2,opt,name=default_table_format,json=defaultTableFormat,proto3,enum=jnx.jet.routing.base.RouteTableFormat" json:"default_table_format,omitempty"`
}

func (x *InitializeRequest) Reset() {
	*x = InitializeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_bgp_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeRequest) ProtoMessage() {}

func (x *InitializeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_bgp_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeRequest.ProtoReflect.Descriptor instead.
func (*InitializeRequest) Descriptor() ([]byte, []int) {
	return file_jnx_routing_bgp_service_proto_rawDescGZIP(), []int{4}
}

func (x *InitializeRequest) GetDefaultAddressFormat() AddressFormat {
	if x != nil {
		return x.DefaultAddressFormat
	}
	return AddressFormat_ADDRESS_STRING
}

func (x *InitializeRequest) GetDefaultTableFormat() RouteTableFormat {
	if x != nil {
		return x.DefaultTableFormat
	}
	return RouteTableFormat_TABLE_STRING
}

// [brief]: Initilize response.
// [detail]: BGP route service initialize reply containing the status of the
// operation. Replies indicate to the client whether any old routing state
// was recovered and rebound to this connection.
type InitializeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Top level return code.
	Status *RpcStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// [brief]: Return code to indicate operation status.
	SubCode InitializeResponse_StatusCode `protobuf:"varint,2,opt,name=sub_code,json=subCode,proto3,enum=jnx.jet.routing.bgp.InitializeResponse_StatusCode" json:"sub_code,omitempty"`
	// [brief]: Number of routes on gateway.
	// [detail]: Valid only when status is CLEANUP_PENDING and will indicate
	// the number of routes on the gateway, giving an idea of the time
	// required to cleanup.
	NumClientRoutes uint32 `protobuf:"varint,3,opt,name=num_client_routes,json=numClientRoutes,proto3" json:"num_client_routes,omitempty"`
}

func (x *InitializeResponse) Reset() {
	*x = InitializeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_bgp_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeResponse) ProtoMessage() {}

func (x *InitializeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_bgp_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeResponse.ProtoReflect.Descriptor instead.
func (*InitializeResponse) Descriptor() ([]byte, []int) {
	return file_jnx_routing_bgp_service_proto_rawDescGZIP(), []int{5}
}

func (x *InitializeResponse) GetStatus() *RpcStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *InitializeResponse) GetSubCode() InitializeResponse_StatusCode {
	if x != nil {
		return x.SubCode
	}
	return InitializeResponse_SUCCESS
}

func (x *InitializeResponse) GetNumClientRoutes() uint32 {
	if x != nil {
		return x.NumClientRoutes
	}
	return 0
}

// [brief]: Request to reset the BGP route service.
// [detail]: Any routes that were added by the client will be removed during
// the cleanup of the client's state. No parameters are needed.
type CleanupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CleanupRequest) Reset() {
	*x = CleanupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_bgp_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanupRequest) ProtoMessage() {}

func (x *CleanupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_bgp_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanupRequest.ProtoReflect.Descriptor instead.
func (*CleanupRequest) Descriptor() ([]byte, []int) {
	return file_jnx_routing_bgp_service_proto_rawDescGZIP(), []int{6}
}

// [brief]: Cleanup response.
// [detail]: Route service cleanup reply containing the status of the operation.
type CleanupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Top level return code.
	Status *RpcStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// [brief]: The final return code for the request.
	SubCode CleanupResponse_StatusCode `protobuf:"varint,2,opt,name=sub_code,json=subCode,proto3,enum=jnx.jet.routing.bgp.CleanupResponse_StatusCode" json:"sub_code,omitempty"`
}

func (x *CleanupResponse) Reset() {
	*x = CleanupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_bgp_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanupResponse) ProtoMessage() {}

func (x *CleanupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_bgp_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanupResponse.ProtoReflect.Descriptor instead.
func (*CleanupResponse) Descriptor() ([]byte, []int) {
	return file_jnx_routing_bgp_service_proto_rawDescGZIP(), []int{7}
}

func (x *CleanupResponse) GetStatus() *RpcStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CleanupResponse) GetSubCode() CleanupResponse_StatusCode {
	if x != nil {
		return x.SubCode
	}
	return CleanupResponse_SUCCESS
}

// [brief]: Route update request.
// [detail]: Route add/modify/update operation request parameters.
type RouteUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [mandatory]:
	// [brief]: One or more programmed BGP routes to add.
	// [max_entries]: 1000
	Routes []*RouteEntry `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
}

func (x *RouteUpdateRequest) Reset() {
	*x = RouteUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_bgp_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteUpdateRequest) ProtoMessage() {}

func (x *RouteUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_bgp_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteUpdateRequest.ProtoReflect.Descriptor instead.
func (*RouteUpdateRequest) Descriptor() ([]byte, []int) {
	return file_jnx_routing_bgp_service_proto_rawDescGZIP(), []int{8}
}

func (x *RouteUpdateRequest) GetRoutes() []*RouteEntry {
	if x != nil {
		return x.Routes
	}
	return nil
}

// [brief]: Route delete operation request.
// [detail]: Route delete operation request parameters.
type RouteDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Flag to match longer prefix.
	// [detail]: If or_longer is FALSE only routes for the exact
	// destination prefix and prefix length will be matched.
	// If or_longer is TRUE, routes for the given destination prefix
	// or longer prefixes will be matched.
	// [default_value]: FALSE
	// OPTIONAL
	OrLonger bool `protobuf:"varint,1,opt,name=or_longer,json=orLonger,proto3" json:"or_longer,omitempty"`
	// [mandatory]:
	// [brief]: One or more programmed BGP routes to delete.
	// [max_entries]: 1000
	Routes []*RouteMatch `protobuf:"bytes,2,rep,name=routes,proto3" json:"routes,omitempty"`
}

func (x *RouteDeleteRequest) Reset() {
	*x = RouteDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_bgp_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteDeleteRequest) ProtoMessage() {}

func (x *RouteDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_bgp_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteDeleteRequest.ProtoReflect.Descriptor instead.
func (*RouteDeleteRequest) Descriptor() ([]byte, []int) {
	return file_jnx_routing_bgp_service_proto_rawDescGZIP(), []int{9}
}

func (x *RouteDeleteRequest) GetOrLonger() bool {
	if x != nil {
		return x.OrLonger
	}
	return false
}

func (x *RouteDeleteRequest) GetRoutes() []*RouteMatch {
	if x != nil {
		return x.Routes
	}
	return nil
}

// [brief]: Route get operation request.
// [detail]: Route get operation request parameters.
type RouteGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Route matching parameters.
	Route *RouteMatch `protobuf:"bytes,1,opt,name=route,proto3" json:"route,omitempty"`
	// [brief]: Flag to match longer prefix.
	// [detail]: If or_longer is FALSE only routes for the exact destination
	// prefix and prefix length will be matched.
	// If or_longer is TRUE, routes for the given destination prefix
	// or longer prefixes will be matched.
	// [default_value]: FALSE
	// OPTIONAL
	OrLonger bool `protobuf:"varint,2,opt,name=or_longer,json=orLonger,proto3" json:"or_longer,omitempty"`
	// [brief]: Flag to select active only routes.
	// [detail]: If active_only is TRUE, inactive and hidden routes for a
	// matching prefix will be omitted from the results. If FALSE, inactive
	// and hidden routes are also returned.
	// [default_value]: FALSE
	// OPTIONAL
	ActiveOnly bool `protobuf:"varint,3,opt,name=active_only,json=activeOnly,proto3" json:"active_only,omitempty"`
	// [brief]: Maximum routes in reply.
	// [detail]: The maximum number of routes requested in each reply.
	// Replies will be streamed in multiple RPCs each having no more
	// routes than given by this value. Counts from 1 through the maximum of
	// 1000 may be specified. A value of zero indicates that
	// the server will choose an appropriate.
	// [range]: 1:1,000.
	// [default_value]: 1
	// OPTIONAL
	RouteCount uint32 `protobuf:"varint,4,opt,name=route_count,json=routeCount,proto3" json:"route_count,omitempty"`
}

func (x *RouteGetRequest) Reset() {
	*x = RouteGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_bgp_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteGetRequest) ProtoMessage() {}

func (x *RouteGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_bgp_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteGetRequest.ProtoReflect.Descriptor instead.
func (*RouteGetRequest) Descriptor() ([]byte, []int) {
	return file_jnx_routing_bgp_service_proto_rawDescGZIP(), []int{10}
}

func (x *RouteGetRequest) GetRoute() *RouteMatch {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *RouteGetRequest) GetOrLonger() bool {
	if x != nil {
		return x.OrLonger
	}
	return false
}

func (x *RouteGetRequest) GetActiveOnly() bool {
	if x != nil {
		return x.ActiveOnly
	}
	return false
}

func (x *RouteGetRequest) GetRouteCount() uint32 {
	if x != nil {
		return x.RouteCount
	}
	return 0
}

// [brief]: Route operation response.
// [detail]: Route operation response contains the status of the operation.
// Response always returns the final status (either success or the first error
// encountered) and the number of routes that were successfully processed
// prior to any error or full completion of the request.
type RouteOperResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Top level return code.
	Status *RpcStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// [brief]: The final return code for the request.
	SubCode RouteOperResponse_StatusCode `protobuf:"varint,2,opt,name=sub_code,json=subCode,proto3,enum=jnx.jet.routing.bgp.RouteOperResponse_StatusCode" json:"sub_code,omitempty"`
	// [brief]: Number of successful operations.
	// [detail]: The number of requested operations for which the operation
	// completed successfully. Note that in the case of remove
	// operations with or_longer=TRUE or cookie=0, this is not the number of
	// routes matched and removed.
	OperationsCompleted uint32 `protobuf:"varint,3,opt,name=operations_completed,json=operationsCompleted,proto3" json:"operations_completed,omitempty"`
}

func (x *RouteOperResponse) Reset() {
	*x = RouteOperResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_bgp_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteOperResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteOperResponse) ProtoMessage() {}

func (x *RouteOperResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_bgp_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteOperResponse.ProtoReflect.Descriptor instead.
func (*RouteOperResponse) Descriptor() ([]byte, []int) {
	return file_jnx_routing_bgp_service_proto_rawDescGZIP(), []int{11}
}

func (x *RouteOperResponse) GetStatus() *RpcStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *RouteOperResponse) GetSubCode() RouteOperResponse_StatusCode {
	if x != nil {
		return x.SubCode
	}
	return RouteOperResponse_SUCCESS
}

func (x *RouteOperResponse) GetOperationsCompleted() uint32 {
	if x != nil {
		return x.OperationsCompleted
	}
	return 0
}

// [brief]: Route get response.
// [detail]: Route get reply containing the status of the operation and the
// full or partial set of matching routes, depending on how many reply RPCs
// the stream of routes is split among.
type RouteGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Top level return code.
	Status *RpcStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// [brief]: The final return code for the request.
	SubCode RouteGetResponse_StatusCode `protobuf:"varint,2,opt,name=sub_code,json=subCode,proto3,enum=jnx.jet.routing.bgp.RouteGetResponse_StatusCode" json:"sub_code,omitempty"`
	// [brief]: One or more matching BGP routes.
	// [detail]: The maximum number of routes received will be always equal to
	// route_count mentioned when RouteGetRequest RPC was called.
	Routes []*RouteEntry `protobuf:"bytes,3,rep,name=routes,proto3" json:"routes,omitempty"`
}

func (x *RouteGetResponse) Reset() {
	*x = RouteGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_bgp_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteGetResponse) ProtoMessage() {}

func (x *RouteGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_bgp_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteGetResponse.ProtoReflect.Descriptor instead.
func (*RouteGetResponse) Descriptor() ([]byte, []int) {
	return file_jnx_routing_bgp_service_proto_rawDescGZIP(), []int{12}
}

func (x *RouteGetResponse) GetStatus() *RpcStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *RouteGetResponse) GetSubCode() RouteGetResponse_StatusCode {
	if x != nil {
		return x.SubCode
	}
	return RouteGetResponse_SUCCESS
}

func (x *RouteGetResponse) GetRoutes() []*RouteEntry {
	if x != nil {
		return x.Routes
	}
	return nil
}

// [brief]: Route subscribe request.
// [detail]: Route subscribe operation request parameters. Subscribes the
// client for streaming route subscribing.
type RouteSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Number of routes in response.
	// [detail]: The maximum number of routes requested in each subscribing message.
	// Replies will be streamed in multiple RPCs each having no more
	// routes than given by this value. Counts from 1 through the maximum of
	// 1000 may be specified. A value of zero indicates that
	// the server will choose an appropriate.
	// [range]: 1:1,000.
	// [default_value]: 1
	// OPTIONAL
	RouteCount uint32 `protobuf:"varint,1,opt,name=route_count,json=routeCount,proto3" json:"route_count,omitempty"`
}

func (x *RouteSubscribeRequest) Reset() {
	*x = RouteSubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_bgp_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteSubscribeRequest) ProtoMessage() {}

func (x *RouteSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_bgp_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteSubscribeRequest.ProtoReflect.Descriptor instead.
func (*RouteSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_jnx_routing_bgp_service_proto_rawDescGZIP(), []int{13}
}

func (x *RouteSubscribeRequest) GetRouteCount() uint32 {
	if x != nil {
		return x.RouteCount
	}
	return 0
}

// [brief]: Route subscribe response.
// [detail]: The route subscription response is returned immediately upon initial
// subscription for route subscribing via a call to BgpRouteSubscribe.
// Subsequently, subscribing entries are streamed via response containing
// route information and status.
type RouteSubscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Top level return code.
	Status *RpcStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// [brief]: The return code for the registration operation.
	SubCode RouteSubscribeResponse_StatusCode `protobuf:"varint,2,opt,name=sub_code,json=subCode,proto3,enum=jnx.jet.routing.bgp.RouteSubscribeResponse_StatusCode" json:"sub_code,omitempty"`
	// [brief]: A set of subscribe entries for individual routes or
	// the end-of-ribs indication.
	// [detail]: The maximum number of entries received will be always equal
	// to route_count mentioned when RouteSubscribeRequest RPC was called.
	SubscribeEntries []*RouteSubscribeEntry `protobuf:"bytes,3,rep,name=subscribe_entries,json=subscribeEntries,proto3" json:"subscribe_entries,omitempty"`
}

func (x *RouteSubscribeResponse) Reset() {
	*x = RouteSubscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_bgp_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteSubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteSubscribeResponse) ProtoMessage() {}

func (x *RouteSubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_bgp_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteSubscribeResponse.ProtoReflect.Descriptor instead.
func (*RouteSubscribeResponse) Descriptor() ([]byte, []int) {
	return file_jnx_routing_bgp_service_proto_rawDescGZIP(), []int{14}
}

func (x *RouteSubscribeResponse) GetStatus() *RpcStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *RouteSubscribeResponse) GetSubCode() RouteSubscribeResponse_StatusCode {
	if x != nil {
		return x.SubCode
	}
	return RouteSubscribeResponse_SUCCESS
}

func (x *RouteSubscribeResponse) GetSubscribeEntries() []*RouteSubscribeEntry {
	if x != nil {
		return x.SubscribeEntries
	}
	return nil
}

// [brief]: Route unsubscribe request.
// [detail]: Request to unsubscribe the client from the BGP route
// subscribe. No parameters are needed.
type RouteUnsubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RouteUnsubscribeRequest) Reset() {
	*x = RouteUnsubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_bgp_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteUnsubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteUnsubscribeRequest) ProtoMessage() {}

func (x *RouteUnsubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_bgp_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteUnsubscribeRequest.ProtoReflect.Descriptor instead.
func (*RouteUnsubscribeRequest) Descriptor() ([]byte, []int) {
	return file_jnx_routing_bgp_service_proto_rawDescGZIP(), []int{15}
}

// [brief]: Route unsubscribe response.
// [detail]: The route unsubscribe reply confirms that the client
// has unsubscribeed for route updates.
type RouteUnsubscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Top level return code.
	Status *RpcStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// [brief]: The return code for the unregister operation.
	SubCode RouteUnsubscribeResponse_StatusCode `protobuf:"varint,2,opt,name=sub_code,json=subCode,proto3,enum=jnx.jet.routing.bgp.RouteUnsubscribeResponse_StatusCode" json:"sub_code,omitempty"`
}

func (x *RouteUnsubscribeResponse) Reset() {
	*x = RouteUnsubscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_bgp_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteUnsubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteUnsubscribeResponse) ProtoMessage() {}

func (x *RouteUnsubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_bgp_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteUnsubscribeResponse.ProtoReflect.Descriptor instead.
func (*RouteUnsubscribeResponse) Descriptor() ([]byte, []int) {
	return file_jnx_routing_bgp_service_proto_rawDescGZIP(), []int{16}
}

func (x *RouteUnsubscribeResponse) GetStatus() *RpcStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *RouteUnsubscribeResponse) GetSubCode() RouteUnsubscribeResponse_StatusCode {
	if x != nil {
		return x.SubCode
	}
	return RouteUnsubscribeResponse_SUCCESS
}

// [brief]: Route refresh request.
// [detail]: Request to refresh all route subscribing entries to the client.
// No parameters are needed.
type RouteRefreshRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RouteRefreshRequest) Reset() {
	*x = RouteRefreshRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_bgp_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteRefreshRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteRefreshRequest) ProtoMessage() {}

func (x *RouteRefreshRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_bgp_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteRefreshRequest.ProtoReflect.Descriptor instead.
func (*RouteRefreshRequest) Descriptor() ([]byte, []int) {
	return file_jnx_routing_bgp_service_proto_rawDescGZIP(), []int{17}
}

// [brief]: Route refresh response.
// [detail]: The route Refresh response confirms that the client has
// triggered a refresh of route subscribing entries, which
// will be delivered followed by End-of-RIBs via the
// BgpRouteSubscribeResponse stream.
type RouteRefreshResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Top level return code.
	Status *RpcStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// [brief]: The return code for the refresh operation.
	SubCode RouteRefreshResponse_StatusCode `protobuf:"varint,2,opt,name=sub_code,json=subCode,proto3,enum=jnx.jet.routing.bgp.RouteRefreshResponse_StatusCode" json:"sub_code,omitempty"`
}

func (x *RouteRefreshResponse) Reset() {
	*x = RouteRefreshResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_bgp_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteRefreshResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteRefreshResponse) ProtoMessage() {}

func (x *RouteRefreshResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_bgp_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteRefreshResponse.ProtoReflect.Descriptor instead.
func (*RouteRefreshResponse) Descriptor() ([]byte, []int) {
	return file_jnx_routing_bgp_service_proto_rawDescGZIP(), []int{18}
}

func (x *RouteRefreshResponse) GetStatus() *RpcStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *RouteRefreshResponse) GetSubCode() RouteRefreshResponse_StatusCode {
	if x != nil {
		return x.SubCode
	}
	return RouteRefreshResponse_SUCCESS
}

var File_jnx_routing_bgp_service_proto protoreflect.FileDescriptor

var file_jnx_routing_bgp_service_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x6a, 0x6e, 0x78, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x67,
	0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x13, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x62, 0x67, 0x70, 0x1a, 0x1b, 0x6a, 0x6e, 0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x6a, 0x6e, 0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x6a, 0x6e, 0x78, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb0, 0x01, 0x0a,
	0x0a, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e,
	0x6f, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x6e, 0x6f, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6e, 0x6f, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x6e, 0x6f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x75, 0x73, 0x65, 0x4e, 0x65, 0x78, 0x74,
	0x68, 0x6f, 0x70, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x75, 0x73, 0x65,
	0x5f, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x66, 0x69, 0x63, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x75, 0x73, 0x65, 0x4e, 0x65,
	0x78, 0x74, 0x68, 0x6f, 0x70, 0x46, 0x69, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x75, 0x73, 0x22,
	0xcf, 0x02, 0x0a, 0x0a, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x42,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x65, 0x73,
	0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x36, 0x0a, 0x05, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e,
	0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x43, 0x0a, 0x0b,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x22, 0xc0, 0x07, 0x0a, 0x0a, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x31, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x62, 0x67, 0x70, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x10,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x6d, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x03, 0x6d, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x0d, 0x61, 0x69, 0x67, 0x70, 0x5f, 0x64, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x61, 0x69, 0x67, 0x70,
	0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x3a, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x48, 0x00, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x34, 0x0a, 0x06,
	0x61, 0x73, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6a,
	0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x52, 0x06, 0x61, 0x73, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x41, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x62, 0x67, 0x70, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52,
	0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x59, 0x0a, 0x10, 0x61,
	0x64, 0x64, 0x72, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0c, 0x0a, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x22, 0xf2, 0x01, 0x0a, 0x13, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x59, 0x0a, 0x09,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3b, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x52, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x22, 0x49,
	0x0a, 0x12, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4e, 0x44, 0x5f,
	0x4f, 0x46, 0x5f, 0x52, 0x49, 0x42, 0x53, 0x10, 0x02, 0x22, 0xc2, 0x01, 0x0a, 0x11, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x53, 0x0a, 0x16, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x14,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x58, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x12, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0xe3,
	0x02, 0x0a, 0x12, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4d, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x67, 0x70,
	0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x15, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x52, 0x45, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x17,
	0x0a, 0x13, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x41, 0x54, 0x45, 0x57,
	0x41, 0x59, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f,
	0x43, 0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0x05, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x47, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41,
	0x44, 0x59, 0x10, 0x06, 0x22, 0x10, 0x0a, 0x0e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xd4, 0x01, 0x0a, 0x0f, 0x43, 0x6c, 0x65, 0x61, 0x6e,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x70, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4a, 0x0a,
	0x08, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2f, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x07, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x42, 0x0a, 0x0a, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x54, 0x5f,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x02, 0x22, 0x4d, 0x0a,
	0x12, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x22, 0x6a, 0x0a, 0x12,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x72, 0x4c, 0x6f, 0x6e, 0x67, 0x65, 0x72, 0x12,
	0x37, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x0f, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x05,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x67,
	0x70, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x72, 0x4c, 0x6f, 0x6e, 0x67, 0x65, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x6e, 0x6c,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xd1, 0x08, 0x0a, 0x11, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a,
	0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x70, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4c, 0x0a, 0x08, 0x73,
	0x75, 0x62, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x62, 0x67, 0x70, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x07, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x87, 0x07, 0x0a,
	0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x4f, 0x5f, 0x4f, 0x50, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c,
	0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x4f, 0x50, 0x53, 0x10, 0x04, 0x12, 0x11,
	0x0a, 0x0d, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x05, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52,
	0x45, 0x46, 0x49, 0x58, 0x5f, 0x4c, 0x45, 0x4e, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x53, 0x48, 0x4f,
	0x52, 0x54, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x4c,
	0x45, 0x4e, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x09, 0x12, 0x13, 0x0a,
	0x0f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x45, 0x58, 0x54, 0x48,
	0x4f, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x0c, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f,
	0x45, 0x43, 0x4d, 0x50, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16,
	0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x0e, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x53, 0x50, 0x41,
	0x54, 0x48, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x0f, 0x12, 0x16, 0x0a, 0x12,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x10, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x45, 0x58,
	0x49, 0x53, 0x54, 0x53, 0x10, 0x11, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x12, 0x12, 0x18, 0x0a, 0x14, 0x43,
	0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x13, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x14, 0x12, 0x14, 0x0a, 0x10, 0x52,
	0x4f, 0x55, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x15, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x47, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41,
	0x44, 0x59, 0x10, 0x16, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x17, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45,
	0x44, 0x10, 0x18, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x19, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45,
	0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x1a, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x1b, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x47,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x1c, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x49, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x1d, 0x12, 0x1e, 0x0a, 0x1a,
	0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x1e, 0x12, 0x19, 0x0a, 0x15,
	0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x1f, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x52, 0x54, 0x45, 0x5f,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x20, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x4c, 0x4f, 0x57, 0x53, 0x50, 0x45, 0x43,
	0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x21, 0x12,
	0x1e, 0x0a, 0x1a, 0x46, 0x4c, 0x4f, 0x57, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x4d, 0x54, 0x43, 0x48,
	0x5f, 0x46, 0x4c, 0x44, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x22, 0x12,
	0x1b, 0x0a, 0x17, 0x46, 0x4c, 0x4f, 0x57, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x23, 0x12, 0x1d, 0x0a, 0x19,
	0x46, 0x4c, 0x4f, 0x57, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f,
	0x52, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x24, 0x12, 0x19, 0x0a, 0x15, 0x53,
	0x52, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x25, 0x22, 0xf2, 0x04, 0x0a, 0x10, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x70, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4b,
	0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x30, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x67,
	0x70, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x22, 0xa4, 0x03, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10,
	0x04, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f,
	0x4c, 0x45, 0x4e, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10, 0x06, 0x12,
	0x17, 0x0a, 0x13, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x4c, 0x45, 0x4e, 0x5f, 0x54, 0x4f,
	0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x4f, 0x55, 0x54,
	0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x08, 0x12, 0x14, 0x0a,
	0x10, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12,
	0x0d, 0x0a, 0x09, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x47, 0x41, 0x49, 0x4e, 0x10, 0x0c, 0x12, 0x17,
	0x0a, 0x13, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4d, 0x4d, 0x55,
	0x4e, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x0e, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x4c, 0x4f, 0x57, 0x53, 0x50, 0x45, 0x43, 0x5f,
	0x41, 0x44, 0x44, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x0f, 0x12, 0x1e,
	0x0a, 0x1a, 0x46, 0x4c, 0x4f, 0x57, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x4d, 0x54, 0x43, 0x48, 0x5f,
	0x46, 0x4c, 0x44, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x10, 0x12, 0x1b,
	0x0a, 0x17, 0x46, 0x4c, 0x4f, 0x57, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x11, 0x22, 0x38, 0x0a, 0x15, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xbd, 0x03, 0x0a, 0x16, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x52, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x51, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x55, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xc5, 0x01,
	0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x53, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x03, 0x12, 0x16,
	0x0a, 0x12, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52,
	0x49, 0x42, 0x45, 0x44, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x05, 0x12,
	0x1a, 0x0a, 0x16, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x07, 0x22, 0x19, 0x0a, 0x17, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x55, 0x6e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xfa, 0x01, 0x0a, 0x18, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x53, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x55, 0x6e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x73, 0x75,
	0x62, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x56, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x54,
	0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x44, 0x10, 0x03, 0x22, 0x15, 0x0a,
	0x13, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0xf2, 0x01, 0x0a, 0x14, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x4f, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x56, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x42,
	0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x2e, 0x0a, 0x08, 0x50, 0x65, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x47, 0x50, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x47, 0x50, 0x5f, 0x45,
	0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x32, 0xe9, 0x07, 0x0a, 0x03, 0x42, 0x67,
	0x70, 0x12, 0x5f, 0x0a, 0x0a, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12,
	0x26, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65,
	0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x56, 0x0a, 0x07, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x12, 0x23, 0x2e,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x62, 0x67, 0x70, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x08, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x41, 0x64, 0x64, 0x12, 0x27, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0b, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x12, 0x27, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a,
	0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0b, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x67, 0x70,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a,
	0x0b, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x6a,
	0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62,
	0x67, 0x70, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5b, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x47, 0x65, 0x74, 0x12, 0x24, 0x2e, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x67,
	0x70, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x6d, 0x0a, 0x0e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x2a,
	0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x62, 0x67, 0x70, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x67, 0x70,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x71, 0x0a, 0x10, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12,
	0x2c, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x55, 0x6e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x62, 0x67, 0x70, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65,
	0x0a, 0x0c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x28,
	0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x62, 0x67, 0x70, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a,
	0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x24, 0x5a, 0x11, 0x6c, 0x61, 0x62, 0x6e, 0x65, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x82, 0xb5, 0x18, 0x05, 0x30, 0x2e,
	0x31, 0x2e, 0x30, 0x8a, 0xb5, 0x18, 0x04, 0x32, 0x30, 0x2e, 0x34, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_jnx_routing_bgp_service_proto_rawDescOnce sync.Once
	file_jnx_routing_bgp_service_proto_rawDescData = file_jnx_routing_bgp_service_proto_rawDesc
)

func file_jnx_routing_bgp_service_proto_rawDescGZIP() []byte {
	file_jnx_routing_bgp_service_proto_rawDescOnce.Do(func() {
		file_jnx_routing_bgp_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_jnx_routing_bgp_service_proto_rawDescData)
	})
	return file_jnx_routing_bgp_service_proto_rawDescData
}

var file_jnx_routing_bgp_service_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_jnx_routing_bgp_service_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_jnx_routing_bgp_service_proto_goTypes = []interface{}{
	(PeerType)(0), // 0: jnx.jet.routing.bgp.PeerType
	(RouteSubscribeEntry_RouteSubscribeOper)(0), // 1: jnx.jet.routing.bgp.RouteSubscribeEntry.RouteSubscribeOper
	(InitializeResponse_StatusCode)(0),          // 2: jnx.jet.routing.bgp.InitializeResponse.StatusCode
	(CleanupResponse_StatusCode)(0),             // 3: jnx.jet.routing.bgp.CleanupResponse.StatusCode
	(RouteOperResponse_StatusCode)(0),           // 4: jnx.jet.routing.bgp.RouteOperResponse.StatusCode
	(RouteGetResponse_StatusCode)(0),            // 5: jnx.jet.routing.bgp.RouteGetResponse.StatusCode
	(RouteSubscribeResponse_StatusCode)(0),      // 6: jnx.jet.routing.bgp.RouteSubscribeResponse.StatusCode
	(RouteUnsubscribeResponse_StatusCode)(0),    // 7: jnx.jet.routing.bgp.RouteUnsubscribeResponse.StatusCode
	(RouteRefreshResponse_StatusCode)(0),        // 8: jnx.jet.routing.bgp.RouteRefreshResponse.StatusCode
	(*RouteFlags)(nil),                          // 9: jnx.jet.routing.bgp.RouteFlags
	(*RouteMatch)(nil),                          // 10: jnx.jet.routing.bgp.RouteMatch
	(*RouteEntry)(nil),                          // 11: jnx.jet.routing.bgp.RouteEntry
	(*RouteSubscribeEntry)(nil),                 // 12: jnx.jet.routing.bgp.RouteSubscribeEntry
	(*InitializeRequest)(nil),                   // 13: jnx.jet.routing.bgp.InitializeRequest
	(*InitializeResponse)(nil),                  // 14: jnx.jet.routing.bgp.InitializeResponse
	(*CleanupRequest)(nil),                      // 15: jnx.jet.routing.bgp.CleanupRequest
	(*CleanupResponse)(nil),                     // 16: jnx.jet.routing.bgp.CleanupResponse
	(*RouteUpdateRequest)(nil),                  // 17: jnx.jet.routing.bgp.RouteUpdateRequest
	(*RouteDeleteRequest)(nil),                  // 18: jnx.jet.routing.bgp.RouteDeleteRequest
	(*RouteGetRequest)(nil),                     // 19: jnx.jet.routing.bgp.RouteGetRequest
	(*RouteOperResponse)(nil),                   // 20: jnx.jet.routing.bgp.RouteOperResponse
	(*RouteGetResponse)(nil),                    // 21: jnx.jet.routing.bgp.RouteGetResponse
	(*RouteSubscribeRequest)(nil),               // 22: jnx.jet.routing.bgp.RouteSubscribeRequest
	(*RouteSubscribeResponse)(nil),              // 23: jnx.jet.routing.bgp.RouteSubscribeResponse
	(*RouteUnsubscribeRequest)(nil),             // 24: jnx.jet.routing.bgp.RouteUnsubscribeRequest
	(*RouteUnsubscribeResponse)(nil),            // 25: jnx.jet.routing.bgp.RouteUnsubscribeResponse
	(*RouteRefreshRequest)(nil),                 // 26: jnx.jet.routing.bgp.RouteRefreshRequest
	(*RouteRefreshResponse)(nil),                // 27: jnx.jet.routing.bgp.RouteRefreshResponse
	(*RoutePrefix)(nil),                         // 28: jnx.jet.routing.base.RoutePrefix
	(*RouteTable)(nil),                          // 29: jnx.jet.routing.base.RouteTable
	(RouteProtoType)(0),                         // 30: jnx.jet.routing.base.RouteProtoType
	(*Communities)(nil),                         // 31: jnx.jet.routing.base.Communities
	(*wrapperspb.UInt32Value)(nil),              // 32: google.protobuf.UInt32Value
	(*wrapperspb.UInt64Value)(nil),              // 33: google.protobuf.UInt64Value
	(*LabelStack)(nil),                          // 34: jnx.jet.routing.base.LabelStack
	(*AsPath)(nil),                              // 35: jnx.jet.routing.base.AsPath
	(*IpAddress)(nil),                           // 36: jnx.jet.common.IpAddress
	(*AddressFamilySpecificData)(nil),           // 37: jnx.jet.routing.base.AddressFamilySpecificData
	(AddressFormat)(0),                          // 38: jnx.jet.common.AddressFormat
	(RouteTableFormat)(0),                       // 39: jnx.jet.routing.base.RouteTableFormat
	(*RpcStatus)(nil),                           // 40: jnx.jet.common.RpcStatus
}
var file_jnx_routing_bgp_service_proto_depIdxs = []int32{
	28, // 0: jnx.jet.routing.bgp.RouteMatch.dest_prefix:type_name -> jnx.jet.routing.base.RoutePrefix
	29, // 1: jnx.jet.routing.bgp.RouteMatch.table:type_name -> jnx.jet.routing.base.RouteTable
	30, // 2: jnx.jet.routing.bgp.RouteMatch.protocol:type_name -> jnx.jet.routing.base.RouteProtoType
	31, // 3: jnx.jet.routing.bgp.RouteMatch.communities:type_name -> jnx.jet.routing.base.Communities
	10, // 4: jnx.jet.routing.bgp.RouteEntry.key:type_name -> jnx.jet.routing.bgp.RouteMatch
	32, // 5: jnx.jet.routing.bgp.RouteEntry.route_preference:type_name -> google.protobuf.UInt32Value
	32, // 6: jnx.jet.routing.bgp.RouteEntry.local_preference:type_name -> google.protobuf.UInt32Value
	32, // 7: jnx.jet.routing.bgp.RouteEntry.med:type_name -> google.protobuf.UInt32Value
	33, // 8: jnx.jet.routing.bgp.RouteEntry.aigp_distance:type_name -> google.protobuf.UInt64Value
	34, // 9: jnx.jet.routing.bgp.RouteEntry.labels:type_name -> jnx.jet.routing.base.LabelStack
	35, // 10: jnx.jet.routing.bgp.RouteEntry.aspath:type_name -> jnx.jet.routing.base.AsPath
	32, // 11: jnx.jet.routing.bgp.RouteEntry.originator_id:type_name -> google.protobuf.UInt32Value
	32, // 12: jnx.jet.routing.bgp.RouteEntry.cluster_list:type_name -> google.protobuf.UInt32Value
	32, // 13: jnx.jet.routing.bgp.RouteEntry.cluster_id:type_name -> google.protobuf.UInt32Value
	36, // 14: jnx.jet.routing.bgp.RouteEntry.protocol_nexthops:type_name -> jnx.jet.common.IpAddress
	0,  // 15: jnx.jet.routing.bgp.RouteEntry.route_type:type_name -> jnx.jet.routing.bgp.PeerType
	9,  // 16: jnx.jet.routing.bgp.RouteEntry.route_flags:type_name -> jnx.jet.routing.bgp.RouteFlags
	37, // 17: jnx.jet.routing.bgp.RouteEntry.addr_family_data:type_name -> jnx.jet.routing.base.AddressFamilySpecificData
	1,  // 18: jnx.jet.routing.bgp.RouteSubscribeEntry.operation:type_name -> jnx.jet.routing.bgp.RouteSubscribeEntry.RouteSubscribeOper
	11, // 19: jnx.jet.routing.bgp.RouteSubscribeEntry.route:type_name -> jnx.jet.routing.bgp.RouteEntry
	38, // 20: jnx.jet.routing.bgp.InitializeRequest.default_address_format:type_name -> jnx.jet.common.AddressFormat
	39, // 21: jnx.jet.routing.bgp.InitializeRequest.default_table_format:type_name -> jnx.jet.routing.base.RouteTableFormat
	40, // 22: jnx.jet.routing.bgp.InitializeResponse.status:type_name -> jnx.jet.common.RpcStatus
	2,  // 23: jnx.jet.routing.bgp.InitializeResponse.sub_code:type_name -> jnx.jet.routing.bgp.InitializeResponse.StatusCode
	40, // 24: jnx.jet.routing.bgp.CleanupResponse.status:type_name -> jnx.jet.common.RpcStatus
	3,  // 25: jnx.jet.routing.bgp.CleanupResponse.sub_code:type_name -> jnx.jet.routing.bgp.CleanupResponse.StatusCode
	11, // 26: jnx.jet.routing.bgp.RouteUpdateRequest.routes:type_name -> jnx.jet.routing.bgp.RouteEntry
	10, // 27: jnx.jet.routing.bgp.RouteDeleteRequest.routes:type_name -> jnx.jet.routing.bgp.RouteMatch
	10, // 28: jnx.jet.routing.bgp.RouteGetRequest.route:type_name -> jnx.jet.routing.bgp.RouteMatch
	40, // 29: jnx.jet.routing.bgp.RouteOperResponse.status:type_name -> jnx.jet.common.RpcStatus
	4,  // 30: jnx.jet.routing.bgp.RouteOperResponse.sub_code:type_name -> jnx.jet.routing.bgp.RouteOperResponse.StatusCode
	40, // 31: jnx.jet.routing.bgp.RouteGetResponse.status:type_name -> jnx.jet.common.RpcStatus
	5,  // 32: jnx.jet.routing.bgp.RouteGetResponse.sub_code:type_name -> jnx.jet.routing.bgp.RouteGetResponse.StatusCode
	11, // 33: jnx.jet.routing.bgp.RouteGetResponse.routes:type_name -> jnx.jet.routing.bgp.RouteEntry
	40, // 34: jnx.jet.routing.bgp.RouteSubscribeResponse.status:type_name -> jnx.jet.common.RpcStatus
	6,  // 35: jnx.jet.routing.bgp.RouteSubscribeResponse.sub_code:type_name -> jnx.jet.routing.bgp.RouteSubscribeResponse.StatusCode
	12, // 36: jnx.jet.routing.bgp.RouteSubscribeResponse.subscribe_entries:type_name -> jnx.jet.routing.bgp.RouteSubscribeEntry
	40, // 37: jnx.jet.routing.bgp.RouteUnsubscribeResponse.status:type_name -> jnx.jet.common.RpcStatus
	7,  // 38: jnx.jet.routing.bgp.RouteUnsubscribeResponse.sub_code:type_name -> jnx.jet.routing.bgp.RouteUnsubscribeResponse.StatusCode
	40, // 39: jnx.jet.routing.bgp.RouteRefreshResponse.status:type_name -> jnx.jet.common.RpcStatus
	8,  // 40: jnx.jet.routing.bgp.RouteRefreshResponse.sub_code:type_name -> jnx.jet.routing.bgp.RouteRefreshResponse.StatusCode
	13, // 41: jnx.jet.routing.bgp.Bgp.Initialize:input_type -> jnx.jet.routing.bgp.InitializeRequest
	15, // 42: jnx.jet.routing.bgp.Bgp.Cleanup:input_type -> jnx.jet.routing.bgp.CleanupRequest
	17, // 43: jnx.jet.routing.bgp.Bgp.RouteAdd:input_type -> jnx.jet.routing.bgp.RouteUpdateRequest
	17, // 44: jnx.jet.routing.bgp.Bgp.RouteModify:input_type -> jnx.jet.routing.bgp.RouteUpdateRequest
	17, // 45: jnx.jet.routing.bgp.Bgp.RouteUpdate:input_type -> jnx.jet.routing.bgp.RouteUpdateRequest
	18, // 46: jnx.jet.routing.bgp.Bgp.RouteDelete:input_type -> jnx.jet.routing.bgp.RouteDeleteRequest
	19, // 47: jnx.jet.routing.bgp.Bgp.RouteGet:input_type -> jnx.jet.routing.bgp.RouteGetRequest
	22, // 48: jnx.jet.routing.bgp.Bgp.RouteSubscribe:input_type -> jnx.jet.routing.bgp.RouteSubscribeRequest
	24, // 49: jnx.jet.routing.bgp.Bgp.RouteUnsubscribe:input_type -> jnx.jet.routing.bgp.RouteUnsubscribeRequest
	26, // 50: jnx.jet.routing.bgp.Bgp.RouteRefresh:input_type -> jnx.jet.routing.bgp.RouteRefreshRequest
	14, // 51: jnx.jet.routing.bgp.Bgp.Initialize:output_type -> jnx.jet.routing.bgp.InitializeResponse
	16, // 52: jnx.jet.routing.bgp.Bgp.Cleanup:output_type -> jnx.jet.routing.bgp.CleanupResponse
	20, // 53: jnx.jet.routing.bgp.Bgp.RouteAdd:output_type -> jnx.jet.routing.bgp.RouteOperResponse
	20, // 54: jnx.jet.routing.bgp.Bgp.RouteModify:output_type -> jnx.jet.routing.bgp.RouteOperResponse
	20, // 55: jnx.jet.routing.bgp.Bgp.RouteUpdate:output_type -> jnx.jet.routing.bgp.RouteOperResponse
	20, // 56: jnx.jet.routing.bgp.Bgp.RouteDelete:output_type -> jnx.jet.routing.bgp.RouteOperResponse
	21, // 57: jnx.jet.routing.bgp.Bgp.RouteGet:output_type -> jnx.jet.routing.bgp.RouteGetResponse
	23, // 58: jnx.jet.routing.bgp.Bgp.RouteSubscribe:output_type -> jnx.jet.routing.bgp.RouteSubscribeResponse
	25, // 59: jnx.jet.routing.bgp.Bgp.RouteUnsubscribe:output_type -> jnx.jet.routing.bgp.RouteUnsubscribeResponse
	27, // 60: jnx.jet.routing.bgp.Bgp.RouteRefresh:output_type -> jnx.jet.routing.bgp.RouteRefreshResponse
	51, // [51:61] is the sub-list for method output_type
	41, // [41:51] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_jnx_routing_bgp_service_proto_init() }
func file_jnx_routing_bgp_service_proto_init() {
	if File_jnx_routing_bgp_service_proto != nil {
		return
	}
	file_jnx_common_addr_types_proto_init()
	file_jnx_common_base_types_proto_init()
	file_jnx_routing_base_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_jnx_routing_bgp_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_bgp_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_bgp_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_bgp_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteSubscribeEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_bgp_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_bgp_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_bgp_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleanupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_bgp_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleanupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_bgp_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_bgp_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_bgp_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_bgp_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteOperResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_bgp_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_bgp_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteSubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_bgp_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteSubscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_bgp_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteUnsubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_bgp_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteUnsubscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_bgp_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteRefreshRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_bgp_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteRefreshResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_jnx_routing_bgp_service_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*RouteEntry_Label)(nil),
		(*RouteEntry_Labels)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_jnx_routing_bgp_service_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_jnx_routing_bgp_service_proto_goTypes,
		DependencyIndexes: file_jnx_routing_bgp_service_proto_depIdxs,
		EnumInfos:         file_jnx_routing_bgp_service_proto_enumTypes,
		MessageInfos:      file_jnx_routing_bgp_service_proto_msgTypes,
	}.Build()
	File_jnx_routing_bgp_service_proto = out.File
	file_jnx_routing_bgp_service_proto_rawDesc = nil
	file_jnx_routing_bgp_service_proto_goTypes = nil
	file_jnx_routing_bgp_service_proto_depIdxs = nil
}
