//
// Copyright 2018, Juniper Networks, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// [brief]:   Public API definitions for the Interfaces services
// [detail]:  This file defines services for interface specific configurations
// This file defines the following APIs
//    - ADD API for interface related objects ( interface, interface unit,
//            interface family, interface address, arp/ndp configuration)
//    - UPDATE API for interface related objects ( interface, interface unit,
//            interface family, interface address, arp/ndp configuration)
//    - DELETE API for interface related objects ( interface, interface unit,
//            interface family, interface address, arp/ndp configuration)
//    - GET API for interface related objects ( interface, interface unit,
//            interface family, interface address, arp/ndp configuration)
//    - Permissions GET API for interface related objects ( interface,
//            interface unit, interface family, interface address, arp/ndp
//            configuration)

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: jnx_interfaces_service.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// [brief]:  Enumeration definitions for the different interface objects
// [detail]: Enumeration definitions for the different interface object types that could
// be used in the APIs. When the RPC message is sent by client for different interface
// objects, the object type should be mentioned in the message so that the server could
// handle the message appropriately based on the interface object type.
// [default]: TYPE_INTERFACE_OBJECT
type InterfaceType int32

const (
	// [brief]: Definition for top level interface object
	InterfaceType_TYPE_INTERFACE_OBJECT InterfaceType = 0
	// [brief]: Definition for interface unit object
	InterfaceType_TYPE_INTERFACE_UNIT_OBJECT InterfaceType = 1
	// [brief]: Definition for interface family object
	InterfaceType_TYPE_INTERFACE_FAMILY_OBJECT InterfaceType = 2
	// [brief]: Definition for interface IP address object
	InterfaceType_TYPE_INTERFACE_ADDRESS_OBJECT InterfaceType = 3
	// [brief]: Definition for interface ARP/NDP object
	InterfaceType_TYPE_INTERFACE_ARP_OBJECT InterfaceType = 4
)

// Enum value maps for InterfaceType.
var (
	InterfaceType_name = map[int32]string{
		0: "TYPE_INTERFACE_OBJECT",
		1: "TYPE_INTERFACE_UNIT_OBJECT",
		2: "TYPE_INTERFACE_FAMILY_OBJECT",
		3: "TYPE_INTERFACE_ADDRESS_OBJECT",
		4: "TYPE_INTERFACE_ARP_OBJECT",
	}
	InterfaceType_value = map[string]int32{
		"TYPE_INTERFACE_OBJECT":         0,
		"TYPE_INTERFACE_UNIT_OBJECT":    1,
		"TYPE_INTERFACE_FAMILY_OBJECT":  2,
		"TYPE_INTERFACE_ADDRESS_OBJECT": 3,
		"TYPE_INTERFACE_ARP_OBJECT":     4,
	}
)

func (x InterfaceType) Enum() *InterfaceType {
	p := new(InterfaceType)
	*p = x
	return p
}

func (x InterfaceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InterfaceType) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_interfaces_service_proto_enumTypes[0].Descriptor()
}

func (InterfaceType) Type() protoreflect.EnumType {
	return &file_jnx_interfaces_service_proto_enumTypes[0]
}

func (x InterfaceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InterfaceType.Descriptor instead.
func (InterfaceType) EnumDescriptor() ([]byte, []int) {
	return file_jnx_interfaces_service_proto_rawDescGZIP(), []int{0}
}

// [brief]:   Possible status codes for ADD RPC operations
// [detail]:  This enum defines the different status codes that could be returned
// from the backend service processing the API
// [default]: SUCCESS_COMPLETED
type InterfaceAddResponse_StatusCode int32

const (
	// [brief]: Operation Completed Succesfully
	InterfaceAddResponse_SUCCESS_COMPLETED InterfaceAddResponse_StatusCode = 0
	// [brief]:  Interface is already configured by another client.
	// [detail]: This error code is returned when the interface that is being
	// configured is already configured by another client.
	InterfaceAddResponse_NOT_OWNER_OF_OBJECT InterfaceAddResponse_StatusCode = 1
	// [brief]:  Port name is not specified for the object
	// [detail]: This error code is returned when the config message does not
	// speicfy the port name.
	InterfaceAddResponse_PORT_NAME_NOT_SPECIFIED InterfaceAddResponse_StatusCode = 2
	// [brief]:  unit number is not specified for the object
	// [detail]: This error code is returned when the config message does not
	// specify the unit number for the object.
	InterfaceAddResponse_UNIT_NOT_SPECIFIED InterfaceAddResponse_StatusCode = 3
	// [brief]:  Family is not specified for the object
	// [detail]: This error code is returned when the config message does not
	// specify the family for the object.
	InterfaceAddResponse_FAMILY_NOT_SPECIFIED InterfaceAddResponse_StatusCode = 4
	// [brief]:  IP Address is not specified for the object
	// [detail]: This error code is returned when the config message does not
	// specify the IP address for the object.
	InterfaceAddResponse_IP_ADDR_NOT_SPECIFIED InterfaceAddResponse_StatusCode = 5
	// [brief]:  ARP/NDP Address is not specified for the object
	// [detail]: This error code is returned when the config message does not
	// specify the ARP/NDP address for the object.
	InterfaceAddResponse_ARP_ADDR_NOT_SPECIFIED InterfaceAddResponse_StatusCode = 6
	// [brief]:  ARP/NDP MAC Address is not specified for the object
	// [detail]: This error code is returned when the config message does not
	// specify the ARP/NDP MAC address for the object.
	InterfaceAddResponse_ARP_MAC_NOT_SPECIFIED InterfaceAddResponse_StatusCode = 7
	// [brief]:  Interface type specified details sent are not matching.
	// [detail]: This happens when the interface type specified at the message
	// level is different from the actual object information that is sent as
	// part of the message,
	// Eg: Specifying "Interface Unit" at message level and sending an "Interface
	// Address" object in the message.
	InterfaceAddResponse_INTERFACE_OBJECT_MISMATCH InterfaceAddResponse_StatusCode = 8
)

// Enum value maps for InterfaceAddResponse_StatusCode.
var (
	InterfaceAddResponse_StatusCode_name = map[int32]string{
		0: "SUCCESS_COMPLETED",
		1: "NOT_OWNER_OF_OBJECT",
		2: "PORT_NAME_NOT_SPECIFIED",
		3: "UNIT_NOT_SPECIFIED",
		4: "FAMILY_NOT_SPECIFIED",
		5: "IP_ADDR_NOT_SPECIFIED",
		6: "ARP_ADDR_NOT_SPECIFIED",
		7: "ARP_MAC_NOT_SPECIFIED",
		8: "INTERFACE_OBJECT_MISMATCH",
	}
	InterfaceAddResponse_StatusCode_value = map[string]int32{
		"SUCCESS_COMPLETED":         0,
		"NOT_OWNER_OF_OBJECT":       1,
		"PORT_NAME_NOT_SPECIFIED":   2,
		"UNIT_NOT_SPECIFIED":        3,
		"FAMILY_NOT_SPECIFIED":      4,
		"IP_ADDR_NOT_SPECIFIED":     5,
		"ARP_ADDR_NOT_SPECIFIED":    6,
		"ARP_MAC_NOT_SPECIFIED":     7,
		"INTERFACE_OBJECT_MISMATCH": 8,
	}
)

func (x InterfaceAddResponse_StatusCode) Enum() *InterfaceAddResponse_StatusCode {
	p := new(InterfaceAddResponse_StatusCode)
	*p = x
	return p
}

func (x InterfaceAddResponse_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InterfaceAddResponse_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_interfaces_service_proto_enumTypes[1].Descriptor()
}

func (InterfaceAddResponse_StatusCode) Type() protoreflect.EnumType {
	return &file_jnx_interfaces_service_proto_enumTypes[1]
}

func (x InterfaceAddResponse_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InterfaceAddResponse_StatusCode.Descriptor instead.
func (InterfaceAddResponse_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_jnx_interfaces_service_proto_rawDescGZIP(), []int{11, 0}
}

// [brief]:   Possible status codes for UPDATE RPC operations
// [detail]:  This enum defines the different status codes that could be returned
// from the backend service processing the API
// [default]: SUCCESS_COMPLETED
type InterfaceUpdateResponse_StatusCode int32

const (
	// [brief]: Operation Completed Succesfully
	InterfaceUpdateResponse_SUCCESS_COMPLETED InterfaceUpdateResponse_StatusCode = 0
	// [brief]:  Interface is already configured by another client.
	// [detail]: This error code is returned when the interface that is being
	// configured is already configured by another client.
	InterfaceUpdateResponse_NOT_OWNER_OF_OBJECT InterfaceUpdateResponse_StatusCode = 1
	// [brief]:  Port name is not specified for the object
	// [detail]: This error code is returned when the config message does not
	// speicfy the port name.
	InterfaceUpdateResponse_PORT_NAME_NOT_SPECIFIED InterfaceUpdateResponse_StatusCode = 2
	// [brief]:  unit number is not specified for the object
	// [detail]: This error code is returned when the config message does not
	// specify the unit number for the object.
	InterfaceUpdateResponse_UNIT_NOT_SPECIFIED InterfaceUpdateResponse_StatusCode = 3
	// [brief]:  Family is not specified for the object
	// [detail]: This error code is returned when the config message does not
	// specify the family for the object.
	InterfaceUpdateResponse_FAMILY_NOT_SPECIFIED InterfaceUpdateResponse_StatusCode = 4
	// [brief]:  IP Address is not specified for the object
	// [detail]: This error code is returned when the config message does not
	// specify the IP address for the object.
	InterfaceUpdateResponse_IP_ADDR_NOT_SPECIFIED InterfaceUpdateResponse_StatusCode = 5
	// [brief]:  ARP/NDP Address is not specified for the object
	// [detail]: This error code is returned when the config message does not
	// specify the ARP/NDP address for the object.
	InterfaceUpdateResponse_ARP_ADDR_NOT_SPECIFIED InterfaceUpdateResponse_StatusCode = 6
	// [brief]:  ARP/NDP MAC Address is not specified for the object
	// [detail]: This error code is returned when the config message does not
	// specify the ARP/NDP MAC address for the object.
	InterfaceUpdateResponse_ARP_MAC_NOT_SPECIFIED InterfaceUpdateResponse_StatusCode = 7
	// [brief]:  Interface type specified details sent are not matching.
	// [detail]: This happens when the interface type specified at the message
	// level is different from the actual object information that is sent as part
	// of the message,
	// Eg: Specifying "Interface Unit" at message level and sending an "Interface
	// Address" object in the message.
	InterfaceUpdateResponse_INTERFACE_OBJECT_MISMATCH InterfaceUpdateResponse_StatusCode = 8
)

// Enum value maps for InterfaceUpdateResponse_StatusCode.
var (
	InterfaceUpdateResponse_StatusCode_name = map[int32]string{
		0: "SUCCESS_COMPLETED",
		1: "NOT_OWNER_OF_OBJECT",
		2: "PORT_NAME_NOT_SPECIFIED",
		3: "UNIT_NOT_SPECIFIED",
		4: "FAMILY_NOT_SPECIFIED",
		5: "IP_ADDR_NOT_SPECIFIED",
		6: "ARP_ADDR_NOT_SPECIFIED",
		7: "ARP_MAC_NOT_SPECIFIED",
		8: "INTERFACE_OBJECT_MISMATCH",
	}
	InterfaceUpdateResponse_StatusCode_value = map[string]int32{
		"SUCCESS_COMPLETED":         0,
		"NOT_OWNER_OF_OBJECT":       1,
		"PORT_NAME_NOT_SPECIFIED":   2,
		"UNIT_NOT_SPECIFIED":        3,
		"FAMILY_NOT_SPECIFIED":      4,
		"IP_ADDR_NOT_SPECIFIED":     5,
		"ARP_ADDR_NOT_SPECIFIED":    6,
		"ARP_MAC_NOT_SPECIFIED":     7,
		"INTERFACE_OBJECT_MISMATCH": 8,
	}
)

func (x InterfaceUpdateResponse_StatusCode) Enum() *InterfaceUpdateResponse_StatusCode {
	p := new(InterfaceUpdateResponse_StatusCode)
	*p = x
	return p
}

func (x InterfaceUpdateResponse_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InterfaceUpdateResponse_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_interfaces_service_proto_enumTypes[2].Descriptor()
}

func (InterfaceUpdateResponse_StatusCode) Type() protoreflect.EnumType {
	return &file_jnx_interfaces_service_proto_enumTypes[2]
}

func (x InterfaceUpdateResponse_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InterfaceUpdateResponse_StatusCode.Descriptor instead.
func (InterfaceUpdateResponse_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_jnx_interfaces_service_proto_rawDescGZIP(), []int{13, 0}
}

// [brief]:   Possible status codes for DELETE RPC operations
// [detail]:  This enum defines the different status codes that could be returned
// from the backend service processing the API
// [default]: SUCCESS_COMPLETED
type InterfaceDeleteResponse_StatusCode int32

const (
	// [brief]: Operation Completed Succesfully
	InterfaceDeleteResponse_SUCCESS_COMPLETED InterfaceDeleteResponse_StatusCode = 0
	// [brief]:  Interface is already configured by another client.
	// [detail]: This error code is returned when the interface that is being
	// configured is already configured by another client.
	InterfaceDeleteResponse_NOT_OWNER_OF_OBJECT InterfaceDeleteResponse_StatusCode = 1
	// [brief]:  Port name is not specified for the object
	// [detail]: This error code is returned when the config message does not
	// speicfy the port name.
	InterfaceDeleteResponse_PORT_NAME_NOT_SPECIFIED InterfaceDeleteResponse_StatusCode = 2
	// [brief]:  unit number is not specified for the object
	// [detail]: This error code is returned when the config message does not
	// specify the unit number for the object.
	InterfaceDeleteResponse_UNIT_NOT_SPECIFIED InterfaceDeleteResponse_StatusCode = 3
	// [brief]:  Family is not specified for the object
	// [detail]: This error code is returned when the config message does not
	// specify the family for the object.
	InterfaceDeleteResponse_FAMILY_NOT_SPECIFIED InterfaceDeleteResponse_StatusCode = 4
	// [brief]:  IP Address is not specified for the object
	// [detail]: This error code is returned when the config message does not
	// specify the IP address for the object.
	InterfaceDeleteResponse_IP_ADDR_NOT_SPECIFIED InterfaceDeleteResponse_StatusCode = 5
	// [brief]:  ARP/NDP Address is not specified for the object
	// [detail]: This error code is returned when the config message does not
	// specify the ARP/NDP address for the object.
	InterfaceDeleteResponse_ARP_ADDR_NOT_SPECIFIED InterfaceDeleteResponse_StatusCode = 6
	// [brief]:  ARP/NDP MAC Address is not specified for the object
	// [detail]: This error code is returned when the config message does not
	// specify the ARP/NDP MAC address for the object.
	InterfaceDeleteResponse_ARP_MAC_NOT_SPECIFIED InterfaceDeleteResponse_StatusCode = 7
	// [brief]:  Interface type specified details sent are not matching.
	// [detail]: This happens when the interface type specified at the message
	// level is different from the actual object information that  is sent as part
	// of the message,
	// Eg: Specifying "Interface Unit" at message level and sending an "Interface
	// Address" object in the message.
	InterfaceDeleteResponse_INTERFACE_OBJECT_MISMATCH InterfaceDeleteResponse_StatusCode = 8
	// [brief]:  Specified interface object is not found
	// [detail]: This error code is returned when the interface object that is to
	// be deleted is not configured
	InterfaceDeleteResponse_OBJECT_NOT_FOUND InterfaceDeleteResponse_StatusCode = 9
)

// Enum value maps for InterfaceDeleteResponse_StatusCode.
var (
	InterfaceDeleteResponse_StatusCode_name = map[int32]string{
		0: "SUCCESS_COMPLETED",
		1: "NOT_OWNER_OF_OBJECT",
		2: "PORT_NAME_NOT_SPECIFIED",
		3: "UNIT_NOT_SPECIFIED",
		4: "FAMILY_NOT_SPECIFIED",
		5: "IP_ADDR_NOT_SPECIFIED",
		6: "ARP_ADDR_NOT_SPECIFIED",
		7: "ARP_MAC_NOT_SPECIFIED",
		8: "INTERFACE_OBJECT_MISMATCH",
		9: "OBJECT_NOT_FOUND",
	}
	InterfaceDeleteResponse_StatusCode_value = map[string]int32{
		"SUCCESS_COMPLETED":         0,
		"NOT_OWNER_OF_OBJECT":       1,
		"PORT_NAME_NOT_SPECIFIED":   2,
		"UNIT_NOT_SPECIFIED":        3,
		"FAMILY_NOT_SPECIFIED":      4,
		"IP_ADDR_NOT_SPECIFIED":     5,
		"ARP_ADDR_NOT_SPECIFIED":    6,
		"ARP_MAC_NOT_SPECIFIED":     7,
		"INTERFACE_OBJECT_MISMATCH": 8,
		"OBJECT_NOT_FOUND":          9,
	}
)

func (x InterfaceDeleteResponse_StatusCode) Enum() *InterfaceDeleteResponse_StatusCode {
	p := new(InterfaceDeleteResponse_StatusCode)
	*p = x
	return p
}

func (x InterfaceDeleteResponse_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InterfaceDeleteResponse_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_interfaces_service_proto_enumTypes[3].Descriptor()
}

func (InterfaceDeleteResponse_StatusCode) Type() protoreflect.EnumType {
	return &file_jnx_interfaces_service_proto_enumTypes[3]
}

func (x InterfaceDeleteResponse_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InterfaceDeleteResponse_StatusCode.Descriptor instead.
func (InterfaceDeleteResponse_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_jnx_interfaces_service_proto_rawDescGZIP(), []int{15, 0}
}

// [brief]:   Possible status codes for GET RPC operations
// [detail]:  This enum defines the different status codes that could be returned
// from the backend service processing the API
// [default]: SUCCESS_COMPLETED
type InterfaceGetResponse_StatusCode int32

const (
	// [brief]: Operation Completed Succesfully
	InterfaceGetResponse_SUCCESS_COMPLETED InterfaceGetResponse_StatusCode = 0
	// [brief]:  Specified interface object is not found
	// [detail]: This error code is returned when the interface object is not
	// configured
	InterfaceGetResponse_OBJECT_NOT_FOUND InterfaceGetResponse_StatusCode = 1
	// [brief]:  Port name is not specified for the object
	// [detail]: This error code is returned when the config message does not
	// speicfy the port name.
	InterfaceGetResponse_PORT_NAME_NOT_SPECIFIED InterfaceGetResponse_StatusCode = 2
	// [brief]:  unit number is not specified for the object
	// [detail]: This error code is returned when the config message does not
	// specify the unit number for the object.
	InterfaceGetResponse_UNIT_NOT_SPECIFIED InterfaceGetResponse_StatusCode = 3
	// [brief]:  Family is not specified for the object
	// [detail]: This error code is returned when the config message does not
	// contain the family specified.
	InterfaceGetResponse_FAMILY_NOT_SPECIFIED InterfaceGetResponse_StatusCode = 4
	// [brief]:  IP Address is not specified for the object
	// [detail]: This error code is returned when the connfig message does not
	// contain the IP address specified.
	InterfaceGetResponse_IP_ADDR_NOT_SPECIFIED InterfaceGetResponse_StatusCode = 5
	// [brief]:  ARP/NDP Address is not specified for the object
	// [detail]: This error code is returned when the config message does not
	// contain the ARP/NDP address specified.
	InterfaceGetResponse_ARP_ADDR_NOT_SPECIFIED InterfaceGetResponse_StatusCode = 6
	// [brief]:  ARP/NDP MAC Address is not specified for the object
	// [detail]: This error code is returned when the config message does not
	// contain the ARP/NDP MAC address specified.
	InterfaceGetResponse_ARP_MAC_NOT_SPECIFIED InterfaceGetResponse_StatusCode = 7
	// [brief]:  Interface type specified details sent are not matching.
	// [detail]: This happens when the interface type specified at the message
	// level is different from the actual object information that is sent as
	// part of the message,
	// Eg: Specifying "Interface Unit" at message level and sending an "Interface
	// Address" object in the message.
	InterfaceGetResponse_INTERFACE_OBJECT_MISMATCH InterfaceGetResponse_StatusCode = 8
)

// Enum value maps for InterfaceGetResponse_StatusCode.
var (
	InterfaceGetResponse_StatusCode_name = map[int32]string{
		0: "SUCCESS_COMPLETED",
		1: "OBJECT_NOT_FOUND",
		2: "PORT_NAME_NOT_SPECIFIED",
		3: "UNIT_NOT_SPECIFIED",
		4: "FAMILY_NOT_SPECIFIED",
		5: "IP_ADDR_NOT_SPECIFIED",
		6: "ARP_ADDR_NOT_SPECIFIED",
		7: "ARP_MAC_NOT_SPECIFIED",
		8: "INTERFACE_OBJECT_MISMATCH",
	}
	InterfaceGetResponse_StatusCode_value = map[string]int32{
		"SUCCESS_COMPLETED":         0,
		"OBJECT_NOT_FOUND":          1,
		"PORT_NAME_NOT_SPECIFIED":   2,
		"UNIT_NOT_SPECIFIED":        3,
		"FAMILY_NOT_SPECIFIED":      4,
		"IP_ADDR_NOT_SPECIFIED":     5,
		"ARP_ADDR_NOT_SPECIFIED":    6,
		"ARP_MAC_NOT_SPECIFIED":     7,
		"INTERFACE_OBJECT_MISMATCH": 8,
	}
)

func (x InterfaceGetResponse_StatusCode) Enum() *InterfaceGetResponse_StatusCode {
	p := new(InterfaceGetResponse_StatusCode)
	*p = x
	return p
}

func (x InterfaceGetResponse_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InterfaceGetResponse_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_interfaces_service_proto_enumTypes[4].Descriptor()
}

func (InterfaceGetResponse_StatusCode) Type() protoreflect.EnumType {
	return &file_jnx_interfaces_service_proto_enumTypes[4]
}

func (x InterfaceGetResponse_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InterfaceGetResponse_StatusCode.Descriptor instead.
func (InterfaceGetResponse_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_jnx_interfaces_service_proto_rawDescGZIP(), []int{22, 0}
}

// [brief]:   This is an enum status code for permission response
// [detail]:  This enum defines the different status codes that could be returned
// from the backend service processing the API
// [default]: SUCCESS_COMPLETED
type InterfaceUnitPermissionsGetResponse_StatusCode int32

const (
	// [brief]: Completed Succesfully
	InterfaceUnitPermissionsGetResponse_SUCCESS_COMPLETED InterfaceUnitPermissionsGetResponse_StatusCode = 0
	//  [brief]: Requested object is NOT configured.
	InterfaceUnitPermissionsGetResponse_OBJECT_NOT_FOUND InterfaceUnitPermissionsGetResponse_StatusCode = 1
	// [brief]:  Port name is not specified for the object
	// [detail]: This error code is returned when the config message does not
	// contain the port name.
	// Error case
	InterfaceUnitPermissionsGetResponse_PORT_NAME_NOT_SPECIFIED InterfaceUnitPermissionsGetResponse_StatusCode = 2
	// [brief]:  unit number is not specified for the object
	// [detail]: This error code is returned when the config message does not
	// contain the unit number.
	// Error case
	InterfaceUnitPermissionsGetResponse_UNIT_NOT_SPECIFIED InterfaceUnitPermissionsGetResponse_StatusCode = 3
)

// Enum value maps for InterfaceUnitPermissionsGetResponse_StatusCode.
var (
	InterfaceUnitPermissionsGetResponse_StatusCode_name = map[int32]string{
		0: "SUCCESS_COMPLETED",
		1: "OBJECT_NOT_FOUND",
		2: "PORT_NAME_NOT_SPECIFIED",
		3: "UNIT_NOT_SPECIFIED",
	}
	InterfaceUnitPermissionsGetResponse_StatusCode_value = map[string]int32{
		"SUCCESS_COMPLETED":       0,
		"OBJECT_NOT_FOUND":        1,
		"PORT_NAME_NOT_SPECIFIED": 2,
		"UNIT_NOT_SPECIFIED":      3,
	}
)

func (x InterfaceUnitPermissionsGetResponse_StatusCode) Enum() *InterfaceUnitPermissionsGetResponse_StatusCode {
	p := new(InterfaceUnitPermissionsGetResponse_StatusCode)
	*p = x
	return p
}

func (x InterfaceUnitPermissionsGetResponse_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InterfaceUnitPermissionsGetResponse_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_interfaces_service_proto_enumTypes[5].Descriptor()
}

func (InterfaceUnitPermissionsGetResponse_StatusCode) Type() protoreflect.EnumType {
	return &file_jnx_interfaces_service_proto_enumTypes[5]
}

func (x InterfaceUnitPermissionsGetResponse_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InterfaceUnitPermissionsGetResponse_StatusCode.Descriptor instead.
func (InterfaceUnitPermissionsGetResponse_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_jnx_interfaces_service_proto_rawDescGZIP(), []int{25, 0}
}

// [brief]:  Message definition for String attribute
// [detail]: This message defines the format for passing a string attribute for the
// different interface objects.
type StringAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]:   Key for the string attribute
	// [detail]:  This field specifies the key value for the string attribute.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// [brief]:   Value for the attribute
	// [detail]:  This field specifies the string value for the string attribute.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StringAttribute) Reset() {
	*x = StringAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_interfaces_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringAttribute) ProtoMessage() {}

func (x *StringAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_interfaces_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringAttribute.ProtoReflect.Descriptor instead.
func (*StringAttribute) Descriptor() ([]byte, []int) {
	return file_jnx_interfaces_service_proto_rawDescGZIP(), []int{0}
}

func (x *StringAttribute) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *StringAttribute) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// [brief]:  Message definition for Integer attribute
// [detail]: This message defines the format for passing an integer attribute for the
// different interface objects.
type IntegerAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]:   Key for the integer attribute
	// [detail]:  This field specifies the key value for the integer attribute.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// [brief]:   Value for the integer attribute
	// [detail]:  This field specifies the integer value for the integer attribute.
	Value uint32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IntegerAttribute) Reset() {
	*x = IntegerAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_interfaces_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegerAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegerAttribute) ProtoMessage() {}

func (x *IntegerAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_interfaces_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegerAttribute.ProtoReflect.Descriptor instead.
func (*IntegerAttribute) Descriptor() ([]byte, []int) {
	return file_jnx_interfaces_service_proto_rawDescGZIP(), []int{1}
}

func (x *IntegerAttribute) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *IntegerAttribute) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// [brief]:  Message definitions for Aggregate RPC
// [detail]: Message definition for aggregate interface specific options. This message
// is valid only for aggregate interfaces and not valid for normal interfaces
type AggregateOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]:  List of member interfaces for this aggregate interface config
	// [detail]: This config message is valid only for AE interfaces.
	// Eg: When an AE interface is configured, the list of interfaces are members of
	// this AE interface could be specified as part of this message.
	// The list of member interfaces would be specified as repeated strings
	//
	// Eg: ge-0/0/1, ge-1/0/1, xe-2/0/1, fe-2/0/2
	//
	// As part of processing this config message, the list of interfaces would be
	// retrieved and these would be added as member interfaces of the specific AE
	// interface.
	AggregateMembers []string `protobuf:"bytes,1,rep,name=aggregate_members,json=aggregateMembers,proto3" json:"aggregate_members,omitempty"`
}

func (x *AggregateOptions) Reset() {
	*x = AggregateOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_interfaces_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregateOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateOptions) ProtoMessage() {}

func (x *AggregateOptions) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_interfaces_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateOptions.ProtoReflect.Descriptor instead.
func (*AggregateOptions) Descriptor() ([]byte, []int) {
	return file_jnx_interfaces_service_proto_rawDescGZIP(), []int{2}
}

func (x *AggregateOptions) GetAggregateMembers() []string {
	if x != nil {
		return x.AggregateMembers
	}
	return nil
}

// [brief]: Message definition for the interface specific Options in the interface config message.
// [detail]: The different fields that are configured in this message would be dependent
// on the interfaces.
type InterfaceSpecificOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]:  List of  optional interface specific options
	// [detail]: This field allows the user to specify any interface specific options while
	// providing the configuration information for the interface. The options would be
	// specific to the particular interface and will not be common for the interfaces.
	//
	// Types that are assignable to InterfaceOptions:
	//	*InterfaceSpecificOptions_AggregateOptions
	InterfaceOptions isInterfaceSpecificOptions_InterfaceOptions `protobuf_oneof:"interface_options"`
}

func (x *InterfaceSpecificOptions) Reset() {
	*x = InterfaceSpecificOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_interfaces_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceSpecificOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceSpecificOptions) ProtoMessage() {}

func (x *InterfaceSpecificOptions) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_interfaces_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceSpecificOptions.ProtoReflect.Descriptor instead.
func (*InterfaceSpecificOptions) Descriptor() ([]byte, []int) {
	return file_jnx_interfaces_service_proto_rawDescGZIP(), []int{3}
}

func (m *InterfaceSpecificOptions) GetInterfaceOptions() isInterfaceSpecificOptions_InterfaceOptions {
	if m != nil {
		return m.InterfaceOptions
	}
	return nil
}

func (x *InterfaceSpecificOptions) GetAggregateOptions() *AggregateOptions {
	if x, ok := x.GetInterfaceOptions().(*InterfaceSpecificOptions_AggregateOptions); ok {
		return x.AggregateOptions
	}
	return nil
}

type isInterfaceSpecificOptions_InterfaceOptions interface {
	isInterfaceSpecificOptions_InterfaceOptions()
}

type InterfaceSpecificOptions_AggregateOptions struct {
	// [brief]:  Aggregate Interface specific options
	// [detail]: This is valid only for aggregate interfaces
	AggregateOptions *AggregateOptions `protobuf:"bytes,1,opt,name=aggregate_options,json=aggregateOptions,proto3,oneof"`
}

func (*InterfaceSpecificOptions_AggregateOptions) isInterfaceSpecificOptions_InterfaceOptions() {}

// [brief]:  Message definition for the attribute lists for the different interface objects.
// [detail]: The interface attributes could be string attributes or integer attributes.
// The attributes configuration is optional for interface objects.
type InterfaceAttributeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: List of string attribites for the interface object
	StringAttributes []*StringAttribute `protobuf:"bytes,1,rep,name=string_attributes,json=stringAttributes,proto3" json:"string_attributes,omitempty"`
	// [brief]: List of integer attribites for the interface object
	IntegerAttributes []*IntegerAttribute `protobuf:"bytes,2,rep,name=integer_attributes,json=integerAttributes,proto3" json:"integer_attributes,omitempty"`
}

func (x *InterfaceAttributeList) Reset() {
	*x = InterfaceAttributeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_interfaces_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceAttributeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceAttributeList) ProtoMessage() {}

func (x *InterfaceAttributeList) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_interfaces_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceAttributeList.ProtoReflect.Descriptor instead.
func (*InterfaceAttributeList) Descriptor() ([]byte, []int) {
	return file_jnx_interfaces_service_proto_rawDescGZIP(), []int{4}
}

func (x *InterfaceAttributeList) GetStringAttributes() []*StringAttribute {
	if x != nil {
		return x.StringAttributes
	}
	return nil
}

func (x *InterfaceAttributeList) GetIntegerAttributes() []*IntegerAttribute {
	if x != nil {
		return x.IntegerAttributes
	}
	return nil
}

// [brief]:  Message definition for the interface unit information.
// [detail]: This defintion would be used to define the interface unit number for the interface
// objects. This is needed since the interface unit number could be 0 and when value 0 is
// set for the unit number, the information is not marked as configured by user.
type InterfaceUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Interface unit number
	// [mandatory]:
	Number uint32 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *InterfaceUnit) Reset() {
	*x = InterfaceUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_interfaces_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceUnit) ProtoMessage() {}

func (x *InterfaceUnit) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_interfaces_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceUnit.ProtoReflect.Descriptor instead.
func (*InterfaceUnit) Descriptor() ([]byte, []int) {
	return file_jnx_interfaces_service_proto_rawDescGZIP(), []int{5}
}

func (x *InterfaceUnit) GetNumber() uint32 {
	if x != nil {
		return x.Number
	}
	return 0
}

// [brief]:  Message definition for the interface object.
// [detail]: This defintion would be used to send the interface configuration information
// using the API.
type InterfaceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Port name of the Interface
	// [mandatory]:
	PortName string `protobuf:"bytes,1,opt,name=port_name,json=portName,proto3" json:"port_name,omitempty"`
	// [brief]: Interface specific options based on the interface type
	InterfaceOptions *InterfaceSpecificOptions `protobuf:"bytes,2,opt,name=interface_options,json=interfaceOptions,proto3" json:"interface_options,omitempty"`
	// [brief]: List of optional attributes that can be configured
	// [detail]: For top level interface object the attributes that can be configured are as below
	// String Attributes:
	//     mac - MAC address to be set on the interface.
	//
	// Integer Attributes
	//     mtu - MTU value to be set on the interface.
	Attributes *InterfaceAttributeList `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *InterfaceConfig) Reset() {
	*x = InterfaceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_interfaces_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceConfig) ProtoMessage() {}

func (x *InterfaceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_interfaces_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceConfig.ProtoReflect.Descriptor instead.
func (*InterfaceConfig) Descriptor() ([]byte, []int) {
	return file_jnx_interfaces_service_proto_rawDescGZIP(), []int{6}
}

func (x *InterfaceConfig) GetPortName() string {
	if x != nil {
		return x.PortName
	}
	return ""
}

func (x *InterfaceConfig) GetInterfaceOptions() *InterfaceSpecificOptions {
	if x != nil {
		return x.InterfaceOptions
	}
	return nil
}

func (x *InterfaceConfig) GetAttributes() *InterfaceAttributeList {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// [brief]:  Message definition for the interface unit object.
// [detail]: This defintion would be used to send the interface unit configuration
// information using the API.
type InterfaceUnitConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Port name of the Interface
	// [mandatory]:
	PortName string `protobuf:"bytes,1,opt,name=port_name,json=portName,proto3" json:"port_name,omitempty"`
	// [brief]: Interface unit number
	// [mandatory]:
	Unit *InterfaceUnit `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty"`
	// [brief]: List of optional attributes that can be configured
	// [detail]: For top level interface object the attributes that can be configured
	// are as below
	// String Attributes:
	//
	// Integer Attributes
	//     vlan-id - vlan-id to be configured on the interface unit.
	//            For configuring vlan-id on an interface unit, "vlan-tagging" should
	//            be set on the interface from CLI.
	Attributes *InterfaceAttributeList `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *InterfaceUnitConfig) Reset() {
	*x = InterfaceUnitConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_interfaces_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceUnitConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceUnitConfig) ProtoMessage() {}

func (x *InterfaceUnitConfig) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_interfaces_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceUnitConfig.ProtoReflect.Descriptor instead.
func (*InterfaceUnitConfig) Descriptor() ([]byte, []int) {
	return file_jnx_interfaces_service_proto_rawDescGZIP(), []int{7}
}

func (x *InterfaceUnitConfig) GetPortName() string {
	if x != nil {
		return x.PortName
	}
	return ""
}

func (x *InterfaceUnitConfig) GetUnit() *InterfaceUnit {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (x *InterfaceUnitConfig) GetAttributes() *InterfaceAttributeList {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// [brief]:  Message definition for the interface family object.
// [detail]: This defintion would be used to send the interface family configuration
// information using the API.
type InterfaceFamilyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Port name of the Interface
	// [mandatory]:
	PortName string `protobuf:"bytes,1,opt,name=port_name,json=portName,proto3" json:"port_name,omitempty"`
	// [brief]: Interface unit number
	// [mandatory]:
	Unit *InterfaceUnit `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty"`
	// [brief]: Protocol family to be configured for the interface
	// [mandatory]:
	Family AfType `protobuf:"varint,3,opt,name=family,proto3,enum=jnx.jet.common.AfType" json:"family,omitempty"`
	// [brief]: List of optional attributes that can be configured
	// [detail]: For top level interface object the attributes that can be configured are as below
	// String Attributes:
	//
	// Integer Attributes
	//
	Attributes *InterfaceAttributeList `protobuf:"bytes,4,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *InterfaceFamilyConfig) Reset() {
	*x = InterfaceFamilyConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_interfaces_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceFamilyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceFamilyConfig) ProtoMessage() {}

func (x *InterfaceFamilyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_interfaces_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceFamilyConfig.ProtoReflect.Descriptor instead.
func (*InterfaceFamilyConfig) Descriptor() ([]byte, []int) {
	return file_jnx_interfaces_service_proto_rawDescGZIP(), []int{8}
}

func (x *InterfaceFamilyConfig) GetPortName() string {
	if x != nil {
		return x.PortName
	}
	return ""
}

func (x *InterfaceFamilyConfig) GetUnit() *InterfaceUnit {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (x *InterfaceFamilyConfig) GetFamily() AfType {
	if x != nil {
		return x.Family
	}
	return AfType_AF_UNSPECIFIED
}

func (x *InterfaceFamilyConfig) GetAttributes() *InterfaceAttributeList {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// [brief]:  Message definition for the interface address object.
// [detail]: This defintion would be used to send the interface address configuration
// information using the API.
type InterfaceAddressConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Port name of the Interface
	// [mandatory]:
	PortName string `protobuf:"bytes,1,opt,name=port_name,json=portName,proto3" json:"port_name,omitempty"`
	// [brief]: Interface unit number
	// [mandatory]:
	Unit *InterfaceUnit `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty"`
	// [brief]: Protocol family to be configured for the interface
	// [mandatory]:
	Family AfType `protobuf:"varint,3,opt,name=family,proto3,enum=jnx.jet.common.AfType" json:"family,omitempty"`
	// [brief]:  IP address to be configured.
	// [detail]: IP address to be configured for the interface IP address can be IPV4
	// or IPV6 based on the family specified
	// [mandatory]:
	IpAddress *IpAddress `protobuf:"bytes,4,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// [brief]: List of optional attributes that can be configured
	// [detail]: For top level interface object the attributes that can be configured are as below
	// String Attributes:
	//      mac -  MAC address that should be configured on the address object.
	//
	// Integer Attributes
	//
	Attributes *InterfaceAttributeList `protobuf:"bytes,5,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *InterfaceAddressConfig) Reset() {
	*x = InterfaceAddressConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_interfaces_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceAddressConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceAddressConfig) ProtoMessage() {}

func (x *InterfaceAddressConfig) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_interfaces_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceAddressConfig.ProtoReflect.Descriptor instead.
func (*InterfaceAddressConfig) Descriptor() ([]byte, []int) {
	return file_jnx_interfaces_service_proto_rawDescGZIP(), []int{9}
}

func (x *InterfaceAddressConfig) GetPortName() string {
	if x != nil {
		return x.PortName
	}
	return ""
}

func (x *InterfaceAddressConfig) GetUnit() *InterfaceUnit {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (x *InterfaceAddressConfig) GetFamily() AfType {
	if x != nil {
		return x.Family
	}
	return AfType_AF_UNSPECIFIED
}

func (x *InterfaceAddressConfig) GetIpAddress() *IpAddress {
	if x != nil {
		return x.IpAddress
	}
	return nil
}

func (x *InterfaceAddressConfig) GetAttributes() *InterfaceAttributeList {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// [brief]:  Message definition for the interface arp object.
// [detail]: This defintion would be used to send the interface arp configuration
// information using the API.
type InterfaceArpConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Port name of the Interface
	// [mandatory]:
	PortName string `protobuf:"bytes,1,opt,name=port_name,json=portName,proto3" json:"port_name,omitempty"`
	// [brief]: Interface unit number
	// [mandatory]:
	Unit *InterfaceUnit `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty"`
	// [brief]: Protocol family to be configured for the interface
	// [mandatory]:
	Family AfType `protobuf:"varint,3,opt,name=family,proto3,enum=jnx.jet.common.AfType" json:"family,omitempty"`
	// [brief]:  IP address to be configured for the interface
	// [detail]: IP address can be IPV4 or IPV6 based on the family specified
	// [mandatory]:
	IpAddress *IpAddress `protobuf:"bytes,4,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// [brief]:  ARP address to be configured for the interface
	// [detail]: ARP address can be IPV4 ARP or IPV6 NDP based on the family specified
	// [mandatory]:
	NeighborAddress *IpAddress `protobuf:"bytes,5,opt,name=neighbor_address,json=neighborAddress,proto3" json:"neighbor_address,omitempty"`
	// [brief]: List of optional attributes that can be configured
	// [detail]: For top level interface object the attributes that can be configured are as below
	// String Attributes:
	//      mac -  ARP/NDP MAC address that should be configured on the arp/ndp object.
	//             This attribute is mandatory.
	//
	// Integer Attributes
	//     receive - Integer attribute that could be configured on the arp/ndp object.
	//               This attribute takes boolean value, 0 or 1.
	Attributes *InterfaceAttributeList `protobuf:"bytes,6,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *InterfaceArpConfig) Reset() {
	*x = InterfaceArpConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_interfaces_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceArpConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceArpConfig) ProtoMessage() {}

func (x *InterfaceArpConfig) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_interfaces_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceArpConfig.ProtoReflect.Descriptor instead.
func (*InterfaceArpConfig) Descriptor() ([]byte, []int) {
	return file_jnx_interfaces_service_proto_rawDescGZIP(), []int{10}
}

func (x *InterfaceArpConfig) GetPortName() string {
	if x != nil {
		return x.PortName
	}
	return ""
}

func (x *InterfaceArpConfig) GetUnit() *InterfaceUnit {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (x *InterfaceArpConfig) GetFamily() AfType {
	if x != nil {
		return x.Family
	}
	return AfType_AF_UNSPECIFIED
}

func (x *InterfaceArpConfig) GetIpAddress() *IpAddress {
	if x != nil {
		return x.IpAddress
	}
	return nil
}

func (x *InterfaceArpConfig) GetNeighborAddress() *IpAddress {
	if x != nil {
		return x.NeighborAddress
	}
	return nil
}

func (x *InterfaceArpConfig) GetAttributes() *InterfaceAttributeList {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// [brief]:  Message definition for response of ADD RPC
// [detail]: This message defines response that would be retured for the ADD operation
// for the different interface objects.
type InterfaceAddResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: RPC execution status information
	Status *RpcStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// [brief]: Status code returned by the backend service.
	SubCode InterfaceAddResponse_StatusCode `protobuf:"varint,2,opt,name=sub_code,json=subCode,proto3,enum=jnx.jet.interfaces.InterfaceAddResponse_StatusCode" json:"sub_code,omitempty"`
}

func (x *InterfaceAddResponse) Reset() {
	*x = InterfaceAddResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_interfaces_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceAddResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceAddResponse) ProtoMessage() {}

func (x *InterfaceAddResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_interfaces_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceAddResponse.ProtoReflect.Descriptor instead.
func (*InterfaceAddResponse) Descriptor() ([]byte, []int) {
	return file_jnx_interfaces_service_proto_rawDescGZIP(), []int{11}
}

func (x *InterfaceAddResponse) GetStatus() *RpcStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *InterfaceAddResponse) GetSubCode() InterfaceAddResponse_StatusCode {
	if x != nil {
		return x.SubCode
	}
	return InterfaceAddResponse_SUCCESS_COMPLETED
}

// [brief]:  Message definition for the ADD RPC
// [detail]: This message defines the request that would be sent for the ADD operation
// for the configuring the different interface objects.
type InterfaceAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]:  Specifies the interface type that is being configured
	// [mandatory]:
	Type InterfaceType `protobuf:"varint,1,opt,name=type,proto3,enum=jnx.jet.interfaces.InterfaceType" json:"type,omitempty"`
	// [brief]:  Information about the possible interface objects
	// [detail]: That could be sent using this message. Only one of the below objects
	// could be set in a message.The interface object information that is being populated
	// should be of the same type as the InterfaceType specified above.
	//
	// Types that are assignable to InterfaceObject:
	//	*InterfaceAddRequest_Interfaces
	//	*InterfaceAddRequest_Unit
	//	*InterfaceAddRequest_Family
	//	*InterfaceAddRequest_Address
	//	*InterfaceAddRequest_Arp
	InterfaceObject isInterfaceAddRequest_InterfaceObject `protobuf_oneof:"interface_object"`
}

func (x *InterfaceAddRequest) Reset() {
	*x = InterfaceAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_interfaces_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceAddRequest) ProtoMessage() {}

func (x *InterfaceAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_interfaces_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceAddRequest.ProtoReflect.Descriptor instead.
func (*InterfaceAddRequest) Descriptor() ([]byte, []int) {
	return file_jnx_interfaces_service_proto_rawDescGZIP(), []int{12}
}

func (x *InterfaceAddRequest) GetType() InterfaceType {
	if x != nil {
		return x.Type
	}
	return InterfaceType_TYPE_INTERFACE_OBJECT
}

func (m *InterfaceAddRequest) GetInterfaceObject() isInterfaceAddRequest_InterfaceObject {
	if m != nil {
		return m.InterfaceObject
	}
	return nil
}

func (x *InterfaceAddRequest) GetInterfaces() *InterfaceConfig {
	if x, ok := x.GetInterfaceObject().(*InterfaceAddRequest_Interfaces); ok {
		return x.Interfaces
	}
	return nil
}

func (x *InterfaceAddRequest) GetUnit() *InterfaceUnitConfig {
	if x, ok := x.GetInterfaceObject().(*InterfaceAddRequest_Unit); ok {
		return x.Unit
	}
	return nil
}

func (x *InterfaceAddRequest) GetFamily() *InterfaceFamilyConfig {
	if x, ok := x.GetInterfaceObject().(*InterfaceAddRequest_Family); ok {
		return x.Family
	}
	return nil
}

func (x *InterfaceAddRequest) GetAddress() *InterfaceAddressConfig {
	if x, ok := x.GetInterfaceObject().(*InterfaceAddRequest_Address); ok {
		return x.Address
	}
	return nil
}

func (x *InterfaceAddRequest) GetArp() *InterfaceArpConfig {
	if x, ok := x.GetInterfaceObject().(*InterfaceAddRequest_Arp); ok {
		return x.Arp
	}
	return nil
}

type isInterfaceAddRequest_InterfaceObject interface {
	isInterfaceAddRequest_InterfaceObject()
}

type InterfaceAddRequest_Interfaces struct {
	// [brief]: Config message for top level interface object
	Interfaces *InterfaceConfig `protobuf:"bytes,2,opt,name=interfaces,proto3,oneof"`
}

type InterfaceAddRequest_Unit struct {
	// [brief]: Config message for interface unit object
	Unit *InterfaceUnitConfig `protobuf:"bytes,3,opt,name=unit,proto3,oneof"`
}

type InterfaceAddRequest_Family struct {
	// [brief]: Config message for interface family object
	Family *InterfaceFamilyConfig `protobuf:"bytes,4,opt,name=family,proto3,oneof"`
}

type InterfaceAddRequest_Address struct {
	// [brief]: Config message for interface address object
	Address *InterfaceAddressConfig `protobuf:"bytes,5,opt,name=address,proto3,oneof"`
}

type InterfaceAddRequest_Arp struct {
	// [brief]: Config message for interface ARP/NDP object
	Arp *InterfaceArpConfig `protobuf:"bytes,6,opt,name=arp,proto3,oneof"`
}

func (*InterfaceAddRequest_Interfaces) isInterfaceAddRequest_InterfaceObject() {}

func (*InterfaceAddRequest_Unit) isInterfaceAddRequest_InterfaceObject() {}

func (*InterfaceAddRequest_Family) isInterfaceAddRequest_InterfaceObject() {}

func (*InterfaceAddRequest_Address) isInterfaceAddRequest_InterfaceObject() {}

func (*InterfaceAddRequest_Arp) isInterfaceAddRequest_InterfaceObject() {}

// [brief]:  Message definition for response of UPDATE RPC
// [detail]: This message defines response that would be retured for the UPDATE operation
// for the different interface objects.
type InterfaceUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: RPC execution status information
	Status *RpcStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// [brief]: Status code returned by the backend service.
	SubCode InterfaceUpdateResponse_StatusCode `protobuf:"varint,2,opt,name=sub_code,json=subCode,proto3,enum=jnx.jet.interfaces.InterfaceUpdateResponse_StatusCode" json:"sub_code,omitempty"`
}

func (x *InterfaceUpdateResponse) Reset() {
	*x = InterfaceUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_interfaces_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceUpdateResponse) ProtoMessage() {}

func (x *InterfaceUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_interfaces_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceUpdateResponse.ProtoReflect.Descriptor instead.
func (*InterfaceUpdateResponse) Descriptor() ([]byte, []int) {
	return file_jnx_interfaces_service_proto_rawDescGZIP(), []int{13}
}

func (x *InterfaceUpdateResponse) GetStatus() *RpcStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *InterfaceUpdateResponse) GetSubCode() InterfaceUpdateResponse_StatusCode {
	if x != nil {
		return x.SubCode
	}
	return InterfaceUpdateResponse_SUCCESS_COMPLETED
}

// [brief]:  Message definition for the UPDATE RPC
// [detail]: This message defines the request that would be sent for the UPDATE operation
// for the configuring the different interface objects.
type InterfaceUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]:  Specifies the interface type that is being configured
	// [mandatory]:
	Type InterfaceType `protobuf:"varint,1,opt,name=type,proto3,enum=jnx.jet.interfaces.InterfaceType" json:"type,omitempty"`
	// [brief]:  Information about the possible interface objects
	// [detail]: That could be sent using this message. Only one of the below objects
	// could be set in a message.
	// The interface object information that is being populated should
	// be of the same type as the InterfaceType specified above.
	//
	// Types that are assignable to InterfaceObject:
	//	*InterfaceUpdateRequest_Interfaces
	//	*InterfaceUpdateRequest_Unit
	//	*InterfaceUpdateRequest_Family
	//	*InterfaceUpdateRequest_Address
	//	*InterfaceUpdateRequest_Arp
	InterfaceObject isInterfaceUpdateRequest_InterfaceObject `protobuf_oneof:"interface_object"`
}

func (x *InterfaceUpdateRequest) Reset() {
	*x = InterfaceUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_interfaces_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceUpdateRequest) ProtoMessage() {}

func (x *InterfaceUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_interfaces_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceUpdateRequest.ProtoReflect.Descriptor instead.
func (*InterfaceUpdateRequest) Descriptor() ([]byte, []int) {
	return file_jnx_interfaces_service_proto_rawDescGZIP(), []int{14}
}

func (x *InterfaceUpdateRequest) GetType() InterfaceType {
	if x != nil {
		return x.Type
	}
	return InterfaceType_TYPE_INTERFACE_OBJECT
}

func (m *InterfaceUpdateRequest) GetInterfaceObject() isInterfaceUpdateRequest_InterfaceObject {
	if m != nil {
		return m.InterfaceObject
	}
	return nil
}

func (x *InterfaceUpdateRequest) GetInterfaces() *InterfaceConfig {
	if x, ok := x.GetInterfaceObject().(*InterfaceUpdateRequest_Interfaces); ok {
		return x.Interfaces
	}
	return nil
}

func (x *InterfaceUpdateRequest) GetUnit() *InterfaceUnitConfig {
	if x, ok := x.GetInterfaceObject().(*InterfaceUpdateRequest_Unit); ok {
		return x.Unit
	}
	return nil
}

func (x *InterfaceUpdateRequest) GetFamily() *InterfaceFamilyConfig {
	if x, ok := x.GetInterfaceObject().(*InterfaceUpdateRequest_Family); ok {
		return x.Family
	}
	return nil
}

func (x *InterfaceUpdateRequest) GetAddress() *InterfaceAddressConfig {
	if x, ok := x.GetInterfaceObject().(*InterfaceUpdateRequest_Address); ok {
		return x.Address
	}
	return nil
}

func (x *InterfaceUpdateRequest) GetArp() *InterfaceArpConfig {
	if x, ok := x.GetInterfaceObject().(*InterfaceUpdateRequest_Arp); ok {
		return x.Arp
	}
	return nil
}

type isInterfaceUpdateRequest_InterfaceObject interface {
	isInterfaceUpdateRequest_InterfaceObject()
}

type InterfaceUpdateRequest_Interfaces struct {
	// [brief]: Config message for top level interface object
	Interfaces *InterfaceConfig `protobuf:"bytes,2,opt,name=interfaces,proto3,oneof"`
}

type InterfaceUpdateRequest_Unit struct {
	// [brief]: Config message for interface unit object
	Unit *InterfaceUnitConfig `protobuf:"bytes,3,opt,name=unit,proto3,oneof"`
}

type InterfaceUpdateRequest_Family struct {
	// [brief]: Config message for interface family object
	Family *InterfaceFamilyConfig `protobuf:"bytes,4,opt,name=family,proto3,oneof"`
}

type InterfaceUpdateRequest_Address struct {
	// [brief]: Config message for interface address object
	Address *InterfaceAddressConfig `protobuf:"bytes,5,opt,name=address,proto3,oneof"`
}

type InterfaceUpdateRequest_Arp struct {
	// [brief]: Config message for interface ARP/NDP object
	Arp *InterfaceArpConfig `protobuf:"bytes,6,opt,name=arp,proto3,oneof"`
}

func (*InterfaceUpdateRequest_Interfaces) isInterfaceUpdateRequest_InterfaceObject() {}

func (*InterfaceUpdateRequest_Unit) isInterfaceUpdateRequest_InterfaceObject() {}

func (*InterfaceUpdateRequest_Family) isInterfaceUpdateRequest_InterfaceObject() {}

func (*InterfaceUpdateRequest_Address) isInterfaceUpdateRequest_InterfaceObject() {}

func (*InterfaceUpdateRequest_Arp) isInterfaceUpdateRequest_InterfaceObject() {}

// [brief]:  Message definition for response of DELETE RPC
// [detail]: This message defines response that would be retured for the DELETE operation
// for the different interface objects.
type InterfaceDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: RPC execution status information
	Status *RpcStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// [brief]: Status code returned by the backend service.
	SubCode InterfaceDeleteResponse_StatusCode `protobuf:"varint,2,opt,name=sub_code,json=subCode,proto3,enum=jnx.jet.interfaces.InterfaceDeleteResponse_StatusCode" json:"sub_code,omitempty"`
}

func (x *InterfaceDeleteResponse) Reset() {
	*x = InterfaceDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_interfaces_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceDeleteResponse) ProtoMessage() {}

func (x *InterfaceDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_interfaces_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceDeleteResponse.ProtoReflect.Descriptor instead.
func (*InterfaceDeleteResponse) Descriptor() ([]byte, []int) {
	return file_jnx_interfaces_service_proto_rawDescGZIP(), []int{15}
}

func (x *InterfaceDeleteResponse) GetStatus() *RpcStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *InterfaceDeleteResponse) GetSubCode() InterfaceDeleteResponse_StatusCode {
	if x != nil {
		return x.SubCode
	}
	return InterfaceDeleteResponse_SUCCESS_COMPLETED
}

// [brief]:  Message definition for the Interface DELETE request
// [detail]: This message specifies the top level interface object that has to be deleted.
type InterfaceDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Port name of the interface
	// [mandatory]:
	PortName string `protobuf:"bytes,1,opt,name=port_name,json=portName,proto3" json:"port_name,omitempty"`
	// [brief]: Any optional interface specific options.
	InterfaceOptions *InterfaceSpecificOptions `protobuf:"bytes,2,opt,name=interface_options,json=interfaceOptions,proto3" json:"interface_options,omitempty"`
}

func (x *InterfaceDelete) Reset() {
	*x = InterfaceDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_interfaces_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceDelete) ProtoMessage() {}

func (x *InterfaceDelete) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_interfaces_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceDelete.ProtoReflect.Descriptor instead.
func (*InterfaceDelete) Descriptor() ([]byte, []int) {
	return file_jnx_interfaces_service_proto_rawDescGZIP(), []int{16}
}

func (x *InterfaceDelete) GetPortName() string {
	if x != nil {
		return x.PortName
	}
	return ""
}

func (x *InterfaceDelete) GetInterfaceOptions() *InterfaceSpecificOptions {
	if x != nil {
		return x.InterfaceOptions
	}
	return nil
}

// [brief]:  Message definition for the Interface unit DELETE request
// [detail]: This message specifies the interface unit object that has to be deleted.
type InterfaceUnitDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Port name of the interface
	// [mandatory]:
	PortName string `protobuf:"bytes,1,opt,name=port_name,json=portName,proto3" json:"port_name,omitempty"`
	// [brief]: Unit number of the interface
	// [mandatory]:
	Unit *InterfaceUnit `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty"`
}

func (x *InterfaceUnitDelete) Reset() {
	*x = InterfaceUnitDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_interfaces_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceUnitDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceUnitDelete) ProtoMessage() {}

func (x *InterfaceUnitDelete) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_interfaces_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceUnitDelete.ProtoReflect.Descriptor instead.
func (*InterfaceUnitDelete) Descriptor() ([]byte, []int) {
	return file_jnx_interfaces_service_proto_rawDescGZIP(), []int{17}
}

func (x *InterfaceUnitDelete) GetPortName() string {
	if x != nil {
		return x.PortName
	}
	return ""
}

func (x *InterfaceUnitDelete) GetUnit() *InterfaceUnit {
	if x != nil {
		return x.Unit
	}
	return nil
}

// [brief]:  Message definition for the Interface family DELETE request
// [detail]: This message specifies the interface family object that has to be deleted.
type InterfaceFamilyDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Port name of the interface
	// [mandatory]:
	PortName string `protobuf:"bytes,1,opt,name=port_name,json=portName,proto3" json:"port_name,omitempty"`
	// [brief]: Unit number of the interface
	// [mandatory]:
	Unit *InterfaceUnit `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty"`
	// [brief]: Protocol family of the interface. This could be IPv4 of IPv6 family
	// [mandatory]:
	Family AfType `protobuf:"varint,3,opt,name=family,proto3,enum=jnx.jet.common.AfType" json:"family,omitempty"`
}

func (x *InterfaceFamilyDelete) Reset() {
	*x = InterfaceFamilyDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_interfaces_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceFamilyDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceFamilyDelete) ProtoMessage() {}

func (x *InterfaceFamilyDelete) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_interfaces_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceFamilyDelete.ProtoReflect.Descriptor instead.
func (*InterfaceFamilyDelete) Descriptor() ([]byte, []int) {
	return file_jnx_interfaces_service_proto_rawDescGZIP(), []int{18}
}

func (x *InterfaceFamilyDelete) GetPortName() string {
	if x != nil {
		return x.PortName
	}
	return ""
}

func (x *InterfaceFamilyDelete) GetUnit() *InterfaceUnit {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (x *InterfaceFamilyDelete) GetFamily() AfType {
	if x != nil {
		return x.Family
	}
	return AfType_AF_UNSPECIFIED
}

// [brief]:  Message definition for the Interface address DELETE request
// [detail]: This message specifies the interface address object that has to be deleted.
type InterfaceAddressDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Port name of the interface
	// [mandatory]:
	PortName string `protobuf:"bytes,1,opt,name=port_name,json=portName,proto3" json:"port_name,omitempty"`
	// [brief]: Unit number of the interface
	// [mandatory]:
	Unit *InterfaceUnit `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty"`
	// [brief]: Protocol family of the interface. This could be IPv4 of IPv6 family
	// [mandatory]:
	Family AfType `protobuf:"varint,3,opt,name=family,proto3,enum=jnx.jet.common.AfType" json:"family,omitempty"`
	// [brief]:  IP address to be deleted.
	// [detail]: This address could beIPv4 or IPv6, but it should match with the family
	// specified above.
	// [mandatory]:
	IpAddress *IpAddress `protobuf:"bytes,4,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
}

func (x *InterfaceAddressDelete) Reset() {
	*x = InterfaceAddressDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_interfaces_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceAddressDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceAddressDelete) ProtoMessage() {}

func (x *InterfaceAddressDelete) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_interfaces_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceAddressDelete.ProtoReflect.Descriptor instead.
func (*InterfaceAddressDelete) Descriptor() ([]byte, []int) {
	return file_jnx_interfaces_service_proto_rawDescGZIP(), []int{19}
}

func (x *InterfaceAddressDelete) GetPortName() string {
	if x != nil {
		return x.PortName
	}
	return ""
}

func (x *InterfaceAddressDelete) GetUnit() *InterfaceUnit {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (x *InterfaceAddressDelete) GetFamily() AfType {
	if x != nil {
		return x.Family
	}
	return AfType_AF_UNSPECIFIED
}

func (x *InterfaceAddressDelete) GetIpAddress() *IpAddress {
	if x != nil {
		return x.IpAddress
	}
	return nil
}

// [brief]:  Message definition for the ARP/NDP address DELETE request
// [detail]: This message specifies the interface address object that has to be deleted.
type InterfaceArpDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Port name of the interface
	// [mandatory]:
	PortName string `protobuf:"bytes,1,opt,name=port_name,json=portName,proto3" json:"port_name,omitempty"`
	// [brief]: Unit number of the interface
	// [mandatory]:
	Unit *InterfaceUnit `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty"`
	// [brief]: Protocol family of the interface. This could be IPv4 of IPv6 family
	// [mandatory]:
	Family AfType `protobuf:"varint,3,opt,name=family,proto3,enum=jnx.jet.common.AfType" json:"family,omitempty"`
	// [brief]:  IP address to be deleted.
	// [detail]: This address could beIPv4 or IPv6, but it should match with the
	// family specified above.
	// [mandatory]:
	IpAddress *IpAddress `protobuf:"bytes,4,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// [brief]: ARP/NDP address to be deleted.
	// [detail]: This address could be IPv4 or IPv6, but it should match with the
	// family specified above.
	// [mandatory]:
	NeighborAddress *IpAddress `protobuf:"bytes,5,opt,name=neighbor_address,json=neighborAddress,proto3" json:"neighbor_address,omitempty"`
	// [brief]: ARP/NDP attribute to be deleted.
	// [mandatory]:
	Attributes *InterfaceAttributeList `protobuf:"bytes,6,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *InterfaceArpDelete) Reset() {
	*x = InterfaceArpDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_interfaces_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceArpDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceArpDelete) ProtoMessage() {}

func (x *InterfaceArpDelete) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_interfaces_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceArpDelete.ProtoReflect.Descriptor instead.
func (*InterfaceArpDelete) Descriptor() ([]byte, []int) {
	return file_jnx_interfaces_service_proto_rawDescGZIP(), []int{20}
}

func (x *InterfaceArpDelete) GetPortName() string {
	if x != nil {
		return x.PortName
	}
	return ""
}

func (x *InterfaceArpDelete) GetUnit() *InterfaceUnit {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (x *InterfaceArpDelete) GetFamily() AfType {
	if x != nil {
		return x.Family
	}
	return AfType_AF_UNSPECIFIED
}

func (x *InterfaceArpDelete) GetIpAddress() *IpAddress {
	if x != nil {
		return x.IpAddress
	}
	return nil
}

func (x *InterfaceArpDelete) GetNeighborAddress() *IpAddress {
	if x != nil {
		return x.NeighborAddress
	}
	return nil
}

func (x *InterfaceArpDelete) GetAttributes() *InterfaceAttributeList {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// [brief]:  Message definition for the DELETE RPC
// [detail]: This message defines the request that would be sent for the DELETE operation
// for the configuring the different interface objects.
type InterfaceDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]:  Specifies the interface type that is being deleted
	// [mandatory]:
	Type InterfaceType `protobuf:"varint,1,opt,name=type,proto3,enum=jnx.jet.interfaces.InterfaceType" json:"type,omitempty"`
	// [brief]:  Information about one of the interface objects that this message represents.
	// [detail]: The information populated for any of possible objects should be in sync
	// with the object_type defined above.
	//
	// Types that are assignable to InterfaceObject:
	//	*InterfaceDeleteRequest_Interfaces
	//	*InterfaceDeleteRequest_Unit
	//	*InterfaceDeleteRequest_Family
	//	*InterfaceDeleteRequest_Address
	//	*InterfaceDeleteRequest_Arp
	InterfaceObject isInterfaceDeleteRequest_InterfaceObject `protobuf_oneof:"interface_object"`
}

func (x *InterfaceDeleteRequest) Reset() {
	*x = InterfaceDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_interfaces_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceDeleteRequest) ProtoMessage() {}

func (x *InterfaceDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_interfaces_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceDeleteRequest.ProtoReflect.Descriptor instead.
func (*InterfaceDeleteRequest) Descriptor() ([]byte, []int) {
	return file_jnx_interfaces_service_proto_rawDescGZIP(), []int{21}
}

func (x *InterfaceDeleteRequest) GetType() InterfaceType {
	if x != nil {
		return x.Type
	}
	return InterfaceType_TYPE_INTERFACE_OBJECT
}

func (m *InterfaceDeleteRequest) GetInterfaceObject() isInterfaceDeleteRequest_InterfaceObject {
	if m != nil {
		return m.InterfaceObject
	}
	return nil
}

func (x *InterfaceDeleteRequest) GetInterfaces() *InterfaceDelete {
	if x, ok := x.GetInterfaceObject().(*InterfaceDeleteRequest_Interfaces); ok {
		return x.Interfaces
	}
	return nil
}

func (x *InterfaceDeleteRequest) GetUnit() *InterfaceUnitDelete {
	if x, ok := x.GetInterfaceObject().(*InterfaceDeleteRequest_Unit); ok {
		return x.Unit
	}
	return nil
}

func (x *InterfaceDeleteRequest) GetFamily() *InterfaceFamilyDelete {
	if x, ok := x.GetInterfaceObject().(*InterfaceDeleteRequest_Family); ok {
		return x.Family
	}
	return nil
}

func (x *InterfaceDeleteRequest) GetAddress() *InterfaceAddressDelete {
	if x, ok := x.GetInterfaceObject().(*InterfaceDeleteRequest_Address); ok {
		return x.Address
	}
	return nil
}

func (x *InterfaceDeleteRequest) GetArp() *InterfaceArpDelete {
	if x, ok := x.GetInterfaceObject().(*InterfaceDeleteRequest_Arp); ok {
		return x.Arp
	}
	return nil
}

type isInterfaceDeleteRequest_InterfaceObject interface {
	isInterfaceDeleteRequest_InterfaceObject()
}

type InterfaceDeleteRequest_Interfaces struct {
	// [brief]: Delete message for top level interface object
	Interfaces *InterfaceDelete `protobuf:"bytes,2,opt,name=interfaces,proto3,oneof"`
}

type InterfaceDeleteRequest_Unit struct {
	// [brief]: Delete message for interface unit object
	Unit *InterfaceUnitDelete `protobuf:"bytes,3,opt,name=unit,proto3,oneof"`
}

type InterfaceDeleteRequest_Family struct {
	// [brief]: Delete message for interface family object
	Family *InterfaceFamilyDelete `protobuf:"bytes,4,opt,name=family,proto3,oneof"`
}

type InterfaceDeleteRequest_Address struct {
	// [brief]: Delete message for interface address object
	Address *InterfaceAddressDelete `protobuf:"bytes,5,opt,name=address,proto3,oneof"`
}

type InterfaceDeleteRequest_Arp struct {
	// [brief]: Delete message for interface ARP/NDP object
	Arp *InterfaceArpDelete `protobuf:"bytes,6,opt,name=arp,proto3,oneof"`
}

func (*InterfaceDeleteRequest_Interfaces) isInterfaceDeleteRequest_InterfaceObject() {}

func (*InterfaceDeleteRequest_Unit) isInterfaceDeleteRequest_InterfaceObject() {}

func (*InterfaceDeleteRequest_Family) isInterfaceDeleteRequest_InterfaceObject() {}

func (*InterfaceDeleteRequest_Address) isInterfaceDeleteRequest_InterfaceObject() {}

func (*InterfaceDeleteRequest_Arp) isInterfaceDeleteRequest_InterfaceObject() {}

// [brief]:  Message definition for the GET RPC
// [detail]: This message would hold the details for only one of the interface object
// at any point of time. The information would be populated by the server and sent to
// client
type InterfaceGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]:  Specifies the interface type that is being returned.
	// [mandatory]:
	Type InterfaceType `protobuf:"varint,1,opt,name=type,proto3,enum=jnx.jet.interfaces.InterfaceType" json:"type,omitempty"`
	// [brief]:  Information about one of the interface objects that was requested.
	// [detail]: The information for the requested object would be populated in the
	// below interface object. The type of the object populated would be mentioned
	// in the InterfaceType flag above.
	//
	// Types that are assignable to InterfaceObject:
	//	*InterfaceGetResponse_Interfaces
	//	*InterfaceGetResponse_Unit
	//	*InterfaceGetResponse_Family
	//	*InterfaceGetResponse_Address
	//	*InterfaceGetResponse_Arp
	InterfaceObject isInterfaceGetResponse_InterfaceObject `protobuf_oneof:"interface_object"`
	// [brief]: RPC execution status information
	Status *RpcStatus `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	// [brief]: Status code returned by the backend service.
	SubCode InterfaceGetResponse_StatusCode `protobuf:"varint,8,opt,name=sub_code,json=subCode,proto3,enum=jnx.jet.interfaces.InterfaceGetResponse_StatusCode" json:"sub_code,omitempty"`
}

func (x *InterfaceGetResponse) Reset() {
	*x = InterfaceGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_interfaces_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceGetResponse) ProtoMessage() {}

func (x *InterfaceGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_interfaces_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceGetResponse.ProtoReflect.Descriptor instead.
func (*InterfaceGetResponse) Descriptor() ([]byte, []int) {
	return file_jnx_interfaces_service_proto_rawDescGZIP(), []int{22}
}

func (x *InterfaceGetResponse) GetType() InterfaceType {
	if x != nil {
		return x.Type
	}
	return InterfaceType_TYPE_INTERFACE_OBJECT
}

func (m *InterfaceGetResponse) GetInterfaceObject() isInterfaceGetResponse_InterfaceObject {
	if m != nil {
		return m.InterfaceObject
	}
	return nil
}

func (x *InterfaceGetResponse) GetInterfaces() *InterfaceConfig {
	if x, ok := x.GetInterfaceObject().(*InterfaceGetResponse_Interfaces); ok {
		return x.Interfaces
	}
	return nil
}

func (x *InterfaceGetResponse) GetUnit() *InterfaceUnitConfig {
	if x, ok := x.GetInterfaceObject().(*InterfaceGetResponse_Unit); ok {
		return x.Unit
	}
	return nil
}

func (x *InterfaceGetResponse) GetFamily() *InterfaceFamilyConfig {
	if x, ok := x.GetInterfaceObject().(*InterfaceGetResponse_Family); ok {
		return x.Family
	}
	return nil
}

func (x *InterfaceGetResponse) GetAddress() *InterfaceAddressConfig {
	if x, ok := x.GetInterfaceObject().(*InterfaceGetResponse_Address); ok {
		return x.Address
	}
	return nil
}

func (x *InterfaceGetResponse) GetArp() *InterfaceArpConfig {
	if x, ok := x.GetInterfaceObject().(*InterfaceGetResponse_Arp); ok {
		return x.Arp
	}
	return nil
}

func (x *InterfaceGetResponse) GetStatus() *RpcStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *InterfaceGetResponse) GetSubCode() InterfaceGetResponse_StatusCode {
	if x != nil {
		return x.SubCode
	}
	return InterfaceGetResponse_SUCCESS_COMPLETED
}

type isInterfaceGetResponse_InterfaceObject interface {
	isInterfaceGetResponse_InterfaceObject()
}

type InterfaceGetResponse_Interfaces struct {
	// [brief]: Config message for interface object
	Interfaces *InterfaceConfig `protobuf:"bytes,2,opt,name=interfaces,proto3,oneof"`
}

type InterfaceGetResponse_Unit struct {
	// [brief]: Config message for interface unit object
	Unit *InterfaceUnitConfig `protobuf:"bytes,3,opt,name=unit,proto3,oneof"`
}

type InterfaceGetResponse_Family struct {
	// [brief]: Config message for interface family object
	Family *InterfaceFamilyConfig `protobuf:"bytes,4,opt,name=family,proto3,oneof"`
}

type InterfaceGetResponse_Address struct {
	// [brief]: Config message for interface address object
	Address *InterfaceAddressConfig `protobuf:"bytes,5,opt,name=address,proto3,oneof"`
}

type InterfaceGetResponse_Arp struct {
	// [brief]: Config message for interface ARP/NDP object
	Arp *InterfaceArpConfig `protobuf:"bytes,6,opt,name=arp,proto3,oneof"`
}

func (*InterfaceGetResponse_Interfaces) isInterfaceGetResponse_InterfaceObject() {}

func (*InterfaceGetResponse_Unit) isInterfaceGetResponse_InterfaceObject() {}

func (*InterfaceGetResponse_Family) isInterfaceGetResponse_InterfaceObject() {}

func (*InterfaceGetResponse_Address) isInterfaceGetResponse_InterfaceObject() {}

func (*InterfaceGetResponse_Arp) isInterfaceGetResponse_InterfaceObject() {}

// [brief]:  Message definition for the GET RPC
// [detail]: This message defines the request that would be sent for the GET operation
// for the configuring the different interface objects.
type InterfaceGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Interface object type this config object represents.
	// [mandatory]:
	Type InterfaceType `protobuf:"varint,1,opt,name=type,proto3,enum=jnx.jet.interfaces.InterfaceType" json:"type,omitempty"`
	// [brief]:  Information about one of the interface objects that this message represents.
	// [detail]: The information populated for any of possible objects should be in sync with
	// the object_type defined above.
	//
	// Types that are assignable to InterfaceObject:
	//	*InterfaceGetRequest_Interfaces
	//	*InterfaceGetRequest_Unit
	//	*InterfaceGetRequest_Family
	//	*InterfaceGetRequest_Address
	//	*InterfaceGetRequest_Arp
	InterfaceObject isInterfaceGetRequest_InterfaceObject `protobuf_oneof:"interface_object"`
}

func (x *InterfaceGetRequest) Reset() {
	*x = InterfaceGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_interfaces_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceGetRequest) ProtoMessage() {}

func (x *InterfaceGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_interfaces_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceGetRequest.ProtoReflect.Descriptor instead.
func (*InterfaceGetRequest) Descriptor() ([]byte, []int) {
	return file_jnx_interfaces_service_proto_rawDescGZIP(), []int{23}
}

func (x *InterfaceGetRequest) GetType() InterfaceType {
	if x != nil {
		return x.Type
	}
	return InterfaceType_TYPE_INTERFACE_OBJECT
}

func (m *InterfaceGetRequest) GetInterfaceObject() isInterfaceGetRequest_InterfaceObject {
	if m != nil {
		return m.InterfaceObject
	}
	return nil
}

func (x *InterfaceGetRequest) GetInterfaces() *InterfaceConfig {
	if x, ok := x.GetInterfaceObject().(*InterfaceGetRequest_Interfaces); ok {
		return x.Interfaces
	}
	return nil
}

func (x *InterfaceGetRequest) GetUnit() *InterfaceUnitConfig {
	if x, ok := x.GetInterfaceObject().(*InterfaceGetRequest_Unit); ok {
		return x.Unit
	}
	return nil
}

func (x *InterfaceGetRequest) GetFamily() *InterfaceFamilyConfig {
	if x, ok := x.GetInterfaceObject().(*InterfaceGetRequest_Family); ok {
		return x.Family
	}
	return nil
}

func (x *InterfaceGetRequest) GetAddress() *InterfaceAddressConfig {
	if x, ok := x.GetInterfaceObject().(*InterfaceGetRequest_Address); ok {
		return x.Address
	}
	return nil
}

func (x *InterfaceGetRequest) GetArp() *InterfaceArpConfig {
	if x, ok := x.GetInterfaceObject().(*InterfaceGetRequest_Arp); ok {
		return x.Arp
	}
	return nil
}

type isInterfaceGetRequest_InterfaceObject interface {
	isInterfaceGetRequest_InterfaceObject()
}

type InterfaceGetRequest_Interfaces struct {
	// [brief]: Config message for interface object
	Interfaces *InterfaceConfig `protobuf:"bytes,2,opt,name=interfaces,proto3,oneof"`
}

type InterfaceGetRequest_Unit struct {
	// [brief]: Config message for interface unit object
	Unit *InterfaceUnitConfig `protobuf:"bytes,3,opt,name=unit,proto3,oneof"`
}

type InterfaceGetRequest_Family struct {
	// [brief]: Config message for interface family object
	Family *InterfaceFamilyConfig `protobuf:"bytes,4,opt,name=family,proto3,oneof"`
}

type InterfaceGetRequest_Address struct {
	// [brief]: Config message for interface address object
	Address *InterfaceAddressConfig `protobuf:"bytes,5,opt,name=address,proto3,oneof"`
}

type InterfaceGetRequest_Arp struct {
	// [brief]: Config message for interface ARP/NDP object
	Arp *InterfaceArpConfig `protobuf:"bytes,6,opt,name=arp,proto3,oneof"`
}

func (*InterfaceGetRequest_Interfaces) isInterfaceGetRequest_InterfaceObject() {}

func (*InterfaceGetRequest_Unit) isInterfaceGetRequest_InterfaceObject() {}

func (*InterfaceGetRequest_Family) isInterfaceGetRequest_InterfaceObject() {}

func (*InterfaceGetRequest_Address) isInterfaceGetRequest_InterfaceObject() {}

func (*InterfaceGetRequest_Arp) isInterfaceGetRequest_InterfaceObject() {}

// [brief]:  Message defination for checking Permisssion.
// [detail]: Message definition for checking the following
// - Whether the Interface Unit is created by CLI and not modified by any client
// - Whether the Interface Unit is modified by the client making this query
type InterfaceUnitPermissionsGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Port name of the Interface
	// [mandatory]:
	PortName string `protobuf:"bytes,1,opt,name=port_name,json=portName,proto3" json:"port_name,omitempty"`
	// [brief]: Interface unit number
	// [mandatory]:
	Unit *InterfaceUnit `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty"`
}

func (x *InterfaceUnitPermissionsGetRequest) Reset() {
	*x = InterfaceUnitPermissionsGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_interfaces_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceUnitPermissionsGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceUnitPermissionsGetRequest) ProtoMessage() {}

func (x *InterfaceUnitPermissionsGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_interfaces_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceUnitPermissionsGetRequest.ProtoReflect.Descriptor instead.
func (*InterfaceUnitPermissionsGetRequest) Descriptor() ([]byte, []int) {
	return file_jnx_interfaces_service_proto_rawDescGZIP(), []int{24}
}

func (x *InterfaceUnitPermissionsGetRequest) GetPortName() string {
	if x != nil {
		return x.PortName
	}
	return ""
}

func (x *InterfaceUnitPermissionsGetRequest) GetUnit() *InterfaceUnit {
	if x != nil {
		return x.Unit
	}
	return nil
}

// [brief]: Respose message for InterfaceUnitPermissionsGetRequest.
// [detail]: The response message has the following information
// - Interface Unit is a CLI created unit and no client has modified it
// - Interface Unit is modified by the client making this query.
type InterfaceUnitPermissionsGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: RPC execution status information
	Status *RpcStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// [brief]: Status code returned by the backend service.
	SubCode InterfaceUnitPermissionsGetResponse_StatusCode `protobuf:"varint,2,opt,name=sub_code,json=subCode,proto3,enum=jnx.jet.interfaces.InterfaceUnitPermissionsGetResponse_StatusCode" json:"sub_code,omitempty"`
	// [brief]:  Specifies whether current client created this IFL using API
	// [detail]: If this IFL was created by the current client using API, then this
	// field would be set to TRUE.
	IsOwner bool `protobuf:"varint,3,opt,name=is_owner,json=isOwner,proto3" json:"is_owner,omitempty"`
	// [brief]:  Specifies if this IFL is created using API or not.
	// [detail]: If this IFL is created by a client using API, then this field would
	// be set to TRUE.
	ClientCreatedUnit bool `protobuf:"varint,4,opt,name=client_created_unit,json=clientCreatedUnit,proto3" json:"client_created_unit,omitempty"`
	// [brief]:  Name of the client that created this IFL using API
	// [detail]: If this IFL is created by client using API, then this field would
	// be set to the name of the client that created this IFL
	// If this IFL is created using API, then this field would be NULL
	ClientName string `protobuf:"bytes,5,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
}

func (x *InterfaceUnitPermissionsGetResponse) Reset() {
	*x = InterfaceUnitPermissionsGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_interfaces_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceUnitPermissionsGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceUnitPermissionsGetResponse) ProtoMessage() {}

func (x *InterfaceUnitPermissionsGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_interfaces_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceUnitPermissionsGetResponse.ProtoReflect.Descriptor instead.
func (*InterfaceUnitPermissionsGetResponse) Descriptor() ([]byte, []int) {
	return file_jnx_interfaces_service_proto_rawDescGZIP(), []int{25}
}

func (x *InterfaceUnitPermissionsGetResponse) GetStatus() *RpcStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *InterfaceUnitPermissionsGetResponse) GetSubCode() InterfaceUnitPermissionsGetResponse_StatusCode {
	if x != nil {
		return x.SubCode
	}
	return InterfaceUnitPermissionsGetResponse_SUCCESS_COMPLETED
}

func (x *InterfaceUnitPermissionsGetResponse) GetIsOwner() bool {
	if x != nil {
		return x.IsOwner
	}
	return false
}

func (x *InterfaceUnitPermissionsGetResponse) GetClientCreatedUnit() bool {
	if x != nil {
		return x.ClientCreatedUnit
	}
	return false
}

func (x *InterfaceUnitPermissionsGetResponse) GetClientName() string {
	if x != nil {
		return x.ClientName
	}
	return ""
}

var File_jnx_interfaces_service_proto protoreflect.FileDescriptor

var file_jnx_interfaces_service_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x6a, 0x6e, 0x78, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x1a, 0x1b, 0x6a, 0x6e, 0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x6a, 0x6e, 0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x39, 0x0a, 0x0f,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3a, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x3f, 0x0a, 0x10, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x18, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x53, 0x0a, 0x11, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6a,
	0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x48, 0x00, 0x52, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x16,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x27, 0x0a,
	0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xd5, 0x01, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xb5,
	0x01, 0x0a, 0x13, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x4a, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xe7, 0x01, 0x0a, 0x15, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a,
	0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x66, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x12, 0x4a, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a,
	0x65, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x22, 0xa2, 0x02, 0x0a, 0x16, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12,
	0x2e, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x41, 0x66, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12,
	0x38, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09,
	0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4a, 0x0a, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xe4, 0x02, 0x0a, 0x12, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x41, 0x72, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65,
	0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x12, 0x2e, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x41, 0x66, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x12, 0x38, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x0f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x4a, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x98, 0x03, 0x0a,
	0x14, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4e, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xfc, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x4e, 0x4f, 0x54, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x5f, 0x4f,
	0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14,
	0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x50, 0x5f, 0x41, 0x44, 0x44,
	0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x05, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x52, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x06, 0x12, 0x19, 0x0a,
	0x15, 0x41, 0x52, 0x50, 0x5f, 0x4d, 0x41, 0x43, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x49, 0x53,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x08, 0x22, 0xaf, 0x03, 0x0a, 0x13, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x3d, 0x0a,
	0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x43, 0x0a, 0x06,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6a,
	0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x12, 0x46, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x03, 0x61, 0x72, 0x70,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x72, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00,
	0x52, 0x03, 0x61, 0x72, 0x70, 0x42, 0x12, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x9e, 0x03, 0x0a, 0x17, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x51, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xfc, 0x01, 0x0a, 0x0a,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x4f, 0x54, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x5f, 0x4f,
	0x46, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x4e, 0x49, 0x54, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x18, 0x0a, 0x14, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x50, 0x5f,
	0x41, 0x44, 0x44, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x52, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x06,
	0x12, 0x19, 0x0a, 0x15, 0x41, 0x52, 0x50, 0x5f, 0x4d, 0x41, 0x43, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x08, 0x22, 0xb2, 0x03, 0x0a, 0x16, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x0a,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x12, 0x43, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52,
	0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x46, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a,
	0x65, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x3a, 0x0a, 0x03, 0x61, 0x72, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6a,
	0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x72, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x03, 0x61, 0x72, 0x70, 0x42, 0x12, 0x0a, 0x10, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22,
	0xb4, 0x03, 0x0a, 0x17, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x70, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x51,
	0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x36, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x92, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x15, 0x0a, 0x11, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x4f, 0x54, 0x5f, 0x4f,
	0x57, 0x4e, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x01,
	0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x16, 0x0a,
	0x12, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x04, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x52,
	0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x52, 0x50, 0x5f, 0x4d, 0x41,
	0x43, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x07, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4f,
	0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x08,
	0x12, 0x14, 0x0a, 0x10, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x09, 0x22, 0x89, 0x01, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x69, 0x0a, 0x13, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f,
	0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x9b, 0x01,
	0x0a, 0x15, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x66,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x66, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x22, 0xd6, 0x01, 0x0a, 0x16,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x66, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x38, 0x0a, 0x0a, 0x69, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0xe4, 0x02, 0x0a, 0x12, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x41, 0x72, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12,
	0x2e, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x41, 0x66, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12,
	0x38, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09,
	0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x4a, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xb2, 0x03, 0x0a, 0x16,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a,
	0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x12, 0x43, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x46, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6a, 0x6e, 0x78, 0x2e,
	0x6a, 0x65, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x3a, 0x0a, 0x03, 0x61, 0x72, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x72, 0x70, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x00, 0x52, 0x03, 0x61, 0x72, 0x70, 0x42, 0x12, 0x0a, 0x10,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x22, 0xaf, 0x06, 0x0a, 0x14, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65,
	0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x45, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00,
	0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x43, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x46, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6a,
	0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x03, 0x61, 0x72, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41,
	0x72, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x03, 0x61, 0x72, 0x70, 0x12,
	0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x4e, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0xf9, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x42, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x1b,
	0x0a, 0x17, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x55,
	0x4e, 0x49, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x04, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x52, 0x50, 0x5f,
	0x41, 0x44, 0x44, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x52, 0x50, 0x5f, 0x4d, 0x41, 0x43, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x07, 0x12,
	0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4f, 0x42, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x08, 0x42, 0x12,
	0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x22, 0xaf, 0x03, 0x0a, 0x13, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a,
	0x65, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x45, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x43, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65,
	0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x00, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x46, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x03, 0x61, 0x72, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x41, 0x72, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x03, 0x61, 0x72, 0x70,
	0x42, 0x12, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x22, 0x78, 0x0a, 0x22, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x93,
	0x03, 0x0a, 0x23, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5d, 0x0a, 0x08, 0x73, 0x75, 0x62,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x42, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12,
	0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12,
	0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x03, 0x2a, 0xae, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10,
	0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10,
	0x01, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x4f, 0x42,
	0x4a, 0x45, 0x43, 0x54, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x52, 0x50, 0x5f, 0x4f, 0x42, 0x4a,
	0x45, 0x43, 0x54, 0x10, 0x04, 0x32, 0xc5, 0x04, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x12, 0x63, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x41, 0x64, 0x64, 0x12, 0x27, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x64, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x0f, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x6a,
	0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a,
	0x65, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x47, 0x65, 0x74, 0x12, 0x27, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x90, 0x01, 0x0a, 0x1b, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x65, 0x74, 0x12, 0x36, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x24, 0x5a,
	0x11, 0x6c, 0x61, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x82, 0xb5, 0x18, 0x05, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x8a, 0xb5, 0x18, 0x04, 0x31,
	0x39, 0x2e, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_jnx_interfaces_service_proto_rawDescOnce sync.Once
	file_jnx_interfaces_service_proto_rawDescData = file_jnx_interfaces_service_proto_rawDesc
)

func file_jnx_interfaces_service_proto_rawDescGZIP() []byte {
	file_jnx_interfaces_service_proto_rawDescOnce.Do(func() {
		file_jnx_interfaces_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_jnx_interfaces_service_proto_rawDescData)
	})
	return file_jnx_interfaces_service_proto_rawDescData
}

var file_jnx_interfaces_service_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_jnx_interfaces_service_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_jnx_interfaces_service_proto_goTypes = []interface{}{
	(InterfaceType)(0),                                  // 0: jnx.jet.interfaces.InterfaceType
	(InterfaceAddResponse_StatusCode)(0),                // 1: jnx.jet.interfaces.InterfaceAddResponse.StatusCode
	(InterfaceUpdateResponse_StatusCode)(0),             // 2: jnx.jet.interfaces.InterfaceUpdateResponse.StatusCode
	(InterfaceDeleteResponse_StatusCode)(0),             // 3: jnx.jet.interfaces.InterfaceDeleteResponse.StatusCode
	(InterfaceGetResponse_StatusCode)(0),                // 4: jnx.jet.interfaces.InterfaceGetResponse.StatusCode
	(InterfaceUnitPermissionsGetResponse_StatusCode)(0), // 5: jnx.jet.interfaces.InterfaceUnitPermissionsGetResponse.StatusCode
	(*StringAttribute)(nil),                             // 6: jnx.jet.interfaces.StringAttribute
	(*IntegerAttribute)(nil),                            // 7: jnx.jet.interfaces.IntegerAttribute
	(*AggregateOptions)(nil),                            // 8: jnx.jet.interfaces.AggregateOptions
	(*InterfaceSpecificOptions)(nil),                    // 9: jnx.jet.interfaces.InterfaceSpecificOptions
	(*InterfaceAttributeList)(nil),                      // 10: jnx.jet.interfaces.InterfaceAttributeList
	(*InterfaceUnit)(nil),                               // 11: jnx.jet.interfaces.InterfaceUnit
	(*InterfaceConfig)(nil),                             // 12: jnx.jet.interfaces.InterfaceConfig
	(*InterfaceUnitConfig)(nil),                         // 13: jnx.jet.interfaces.InterfaceUnitConfig
	(*InterfaceFamilyConfig)(nil),                       // 14: jnx.jet.interfaces.InterfaceFamilyConfig
	(*InterfaceAddressConfig)(nil),                      // 15: jnx.jet.interfaces.InterfaceAddressConfig
	(*InterfaceArpConfig)(nil),                          // 16: jnx.jet.interfaces.InterfaceArpConfig
	(*InterfaceAddResponse)(nil),                        // 17: jnx.jet.interfaces.InterfaceAddResponse
	(*InterfaceAddRequest)(nil),                         // 18: jnx.jet.interfaces.InterfaceAddRequest
	(*InterfaceUpdateResponse)(nil),                     // 19: jnx.jet.interfaces.InterfaceUpdateResponse
	(*InterfaceUpdateRequest)(nil),                      // 20: jnx.jet.interfaces.InterfaceUpdateRequest
	(*InterfaceDeleteResponse)(nil),                     // 21: jnx.jet.interfaces.InterfaceDeleteResponse
	(*InterfaceDelete)(nil),                             // 22: jnx.jet.interfaces.InterfaceDelete
	(*InterfaceUnitDelete)(nil),                         // 23: jnx.jet.interfaces.InterfaceUnitDelete
	(*InterfaceFamilyDelete)(nil),                       // 24: jnx.jet.interfaces.InterfaceFamilyDelete
	(*InterfaceAddressDelete)(nil),                      // 25: jnx.jet.interfaces.InterfaceAddressDelete
	(*InterfaceArpDelete)(nil),                          // 26: jnx.jet.interfaces.InterfaceArpDelete
	(*InterfaceDeleteRequest)(nil),                      // 27: jnx.jet.interfaces.InterfaceDeleteRequest
	(*InterfaceGetResponse)(nil),                        // 28: jnx.jet.interfaces.InterfaceGetResponse
	(*InterfaceGetRequest)(nil),                         // 29: jnx.jet.interfaces.InterfaceGetRequest
	(*InterfaceUnitPermissionsGetRequest)(nil),          // 30: jnx.jet.interfaces.InterfaceUnitPermissionsGetRequest
	(*InterfaceUnitPermissionsGetResponse)(nil),         // 31: jnx.jet.interfaces.InterfaceUnitPermissionsGetResponse
	(AfType)(0),       // 32: jnx.jet.common.AfType
	(*IpAddress)(nil), // 33: jnx.jet.common.IpAddress
	(*RpcStatus)(nil), // 34: jnx.jet.common.RpcStatus
}
var file_jnx_interfaces_service_proto_depIdxs = []int32{
	8,  // 0: jnx.jet.interfaces.InterfaceSpecificOptions.aggregate_options:type_name -> jnx.jet.interfaces.AggregateOptions
	6,  // 1: jnx.jet.interfaces.InterfaceAttributeList.string_attributes:type_name -> jnx.jet.interfaces.StringAttribute
	7,  // 2: jnx.jet.interfaces.InterfaceAttributeList.integer_attributes:type_name -> jnx.jet.interfaces.IntegerAttribute
	9,  // 3: jnx.jet.interfaces.InterfaceConfig.interface_options:type_name -> jnx.jet.interfaces.InterfaceSpecificOptions
	10, // 4: jnx.jet.interfaces.InterfaceConfig.attributes:type_name -> jnx.jet.interfaces.InterfaceAttributeList
	11, // 5: jnx.jet.interfaces.InterfaceUnitConfig.unit:type_name -> jnx.jet.interfaces.InterfaceUnit
	10, // 6: jnx.jet.interfaces.InterfaceUnitConfig.attributes:type_name -> jnx.jet.interfaces.InterfaceAttributeList
	11, // 7: jnx.jet.interfaces.InterfaceFamilyConfig.unit:type_name -> jnx.jet.interfaces.InterfaceUnit
	32, // 8: jnx.jet.interfaces.InterfaceFamilyConfig.family:type_name -> jnx.jet.common.AfType
	10, // 9: jnx.jet.interfaces.InterfaceFamilyConfig.attributes:type_name -> jnx.jet.interfaces.InterfaceAttributeList
	11, // 10: jnx.jet.interfaces.InterfaceAddressConfig.unit:type_name -> jnx.jet.interfaces.InterfaceUnit
	32, // 11: jnx.jet.interfaces.InterfaceAddressConfig.family:type_name -> jnx.jet.common.AfType
	33, // 12: jnx.jet.interfaces.InterfaceAddressConfig.ip_address:type_name -> jnx.jet.common.IpAddress
	10, // 13: jnx.jet.interfaces.InterfaceAddressConfig.attributes:type_name -> jnx.jet.interfaces.InterfaceAttributeList
	11, // 14: jnx.jet.interfaces.InterfaceArpConfig.unit:type_name -> jnx.jet.interfaces.InterfaceUnit
	32, // 15: jnx.jet.interfaces.InterfaceArpConfig.family:type_name -> jnx.jet.common.AfType
	33, // 16: jnx.jet.interfaces.InterfaceArpConfig.ip_address:type_name -> jnx.jet.common.IpAddress
	33, // 17: jnx.jet.interfaces.InterfaceArpConfig.neighbor_address:type_name -> jnx.jet.common.IpAddress
	10, // 18: jnx.jet.interfaces.InterfaceArpConfig.attributes:type_name -> jnx.jet.interfaces.InterfaceAttributeList
	34, // 19: jnx.jet.interfaces.InterfaceAddResponse.status:type_name -> jnx.jet.common.RpcStatus
	1,  // 20: jnx.jet.interfaces.InterfaceAddResponse.sub_code:type_name -> jnx.jet.interfaces.InterfaceAddResponse.StatusCode
	0,  // 21: jnx.jet.interfaces.InterfaceAddRequest.type:type_name -> jnx.jet.interfaces.InterfaceType
	12, // 22: jnx.jet.interfaces.InterfaceAddRequest.interfaces:type_name -> jnx.jet.interfaces.InterfaceConfig
	13, // 23: jnx.jet.interfaces.InterfaceAddRequest.unit:type_name -> jnx.jet.interfaces.InterfaceUnitConfig
	14, // 24: jnx.jet.interfaces.InterfaceAddRequest.family:type_name -> jnx.jet.interfaces.InterfaceFamilyConfig
	15, // 25: jnx.jet.interfaces.InterfaceAddRequest.address:type_name -> jnx.jet.interfaces.InterfaceAddressConfig
	16, // 26: jnx.jet.interfaces.InterfaceAddRequest.arp:type_name -> jnx.jet.interfaces.InterfaceArpConfig
	34, // 27: jnx.jet.interfaces.InterfaceUpdateResponse.status:type_name -> jnx.jet.common.RpcStatus
	2,  // 28: jnx.jet.interfaces.InterfaceUpdateResponse.sub_code:type_name -> jnx.jet.interfaces.InterfaceUpdateResponse.StatusCode
	0,  // 29: jnx.jet.interfaces.InterfaceUpdateRequest.type:type_name -> jnx.jet.interfaces.InterfaceType
	12, // 30: jnx.jet.interfaces.InterfaceUpdateRequest.interfaces:type_name -> jnx.jet.interfaces.InterfaceConfig
	13, // 31: jnx.jet.interfaces.InterfaceUpdateRequest.unit:type_name -> jnx.jet.interfaces.InterfaceUnitConfig
	14, // 32: jnx.jet.interfaces.InterfaceUpdateRequest.family:type_name -> jnx.jet.interfaces.InterfaceFamilyConfig
	15, // 33: jnx.jet.interfaces.InterfaceUpdateRequest.address:type_name -> jnx.jet.interfaces.InterfaceAddressConfig
	16, // 34: jnx.jet.interfaces.InterfaceUpdateRequest.arp:type_name -> jnx.jet.interfaces.InterfaceArpConfig
	34, // 35: jnx.jet.interfaces.InterfaceDeleteResponse.status:type_name -> jnx.jet.common.RpcStatus
	3,  // 36: jnx.jet.interfaces.InterfaceDeleteResponse.sub_code:type_name -> jnx.jet.interfaces.InterfaceDeleteResponse.StatusCode
	9,  // 37: jnx.jet.interfaces.InterfaceDelete.interface_options:type_name -> jnx.jet.interfaces.InterfaceSpecificOptions
	11, // 38: jnx.jet.interfaces.InterfaceUnitDelete.unit:type_name -> jnx.jet.interfaces.InterfaceUnit
	11, // 39: jnx.jet.interfaces.InterfaceFamilyDelete.unit:type_name -> jnx.jet.interfaces.InterfaceUnit
	32, // 40: jnx.jet.interfaces.InterfaceFamilyDelete.family:type_name -> jnx.jet.common.AfType
	11, // 41: jnx.jet.interfaces.InterfaceAddressDelete.unit:type_name -> jnx.jet.interfaces.InterfaceUnit
	32, // 42: jnx.jet.interfaces.InterfaceAddressDelete.family:type_name -> jnx.jet.common.AfType
	33, // 43: jnx.jet.interfaces.InterfaceAddressDelete.ip_address:type_name -> jnx.jet.common.IpAddress
	11, // 44: jnx.jet.interfaces.InterfaceArpDelete.unit:type_name -> jnx.jet.interfaces.InterfaceUnit
	32, // 45: jnx.jet.interfaces.InterfaceArpDelete.family:type_name -> jnx.jet.common.AfType
	33, // 46: jnx.jet.interfaces.InterfaceArpDelete.ip_address:type_name -> jnx.jet.common.IpAddress
	33, // 47: jnx.jet.interfaces.InterfaceArpDelete.neighbor_address:type_name -> jnx.jet.common.IpAddress
	10, // 48: jnx.jet.interfaces.InterfaceArpDelete.attributes:type_name -> jnx.jet.interfaces.InterfaceAttributeList
	0,  // 49: jnx.jet.interfaces.InterfaceDeleteRequest.type:type_name -> jnx.jet.interfaces.InterfaceType
	22, // 50: jnx.jet.interfaces.InterfaceDeleteRequest.interfaces:type_name -> jnx.jet.interfaces.InterfaceDelete
	23, // 51: jnx.jet.interfaces.InterfaceDeleteRequest.unit:type_name -> jnx.jet.interfaces.InterfaceUnitDelete
	24, // 52: jnx.jet.interfaces.InterfaceDeleteRequest.family:type_name -> jnx.jet.interfaces.InterfaceFamilyDelete
	25, // 53: jnx.jet.interfaces.InterfaceDeleteRequest.address:type_name -> jnx.jet.interfaces.InterfaceAddressDelete
	26, // 54: jnx.jet.interfaces.InterfaceDeleteRequest.arp:type_name -> jnx.jet.interfaces.InterfaceArpDelete
	0,  // 55: jnx.jet.interfaces.InterfaceGetResponse.type:type_name -> jnx.jet.interfaces.InterfaceType
	12, // 56: jnx.jet.interfaces.InterfaceGetResponse.interfaces:type_name -> jnx.jet.interfaces.InterfaceConfig
	13, // 57: jnx.jet.interfaces.InterfaceGetResponse.unit:type_name -> jnx.jet.interfaces.InterfaceUnitConfig
	14, // 58: jnx.jet.interfaces.InterfaceGetResponse.family:type_name -> jnx.jet.interfaces.InterfaceFamilyConfig
	15, // 59: jnx.jet.interfaces.InterfaceGetResponse.address:type_name -> jnx.jet.interfaces.InterfaceAddressConfig
	16, // 60: jnx.jet.interfaces.InterfaceGetResponse.arp:type_name -> jnx.jet.interfaces.InterfaceArpConfig
	34, // 61: jnx.jet.interfaces.InterfaceGetResponse.status:type_name -> jnx.jet.common.RpcStatus
	4,  // 62: jnx.jet.interfaces.InterfaceGetResponse.sub_code:type_name -> jnx.jet.interfaces.InterfaceGetResponse.StatusCode
	0,  // 63: jnx.jet.interfaces.InterfaceGetRequest.type:type_name -> jnx.jet.interfaces.InterfaceType
	12, // 64: jnx.jet.interfaces.InterfaceGetRequest.interfaces:type_name -> jnx.jet.interfaces.InterfaceConfig
	13, // 65: jnx.jet.interfaces.InterfaceGetRequest.unit:type_name -> jnx.jet.interfaces.InterfaceUnitConfig
	14, // 66: jnx.jet.interfaces.InterfaceGetRequest.family:type_name -> jnx.jet.interfaces.InterfaceFamilyConfig
	15, // 67: jnx.jet.interfaces.InterfaceGetRequest.address:type_name -> jnx.jet.interfaces.InterfaceAddressConfig
	16, // 68: jnx.jet.interfaces.InterfaceGetRequest.arp:type_name -> jnx.jet.interfaces.InterfaceArpConfig
	11, // 69: jnx.jet.interfaces.InterfaceUnitPermissionsGetRequest.unit:type_name -> jnx.jet.interfaces.InterfaceUnit
	34, // 70: jnx.jet.interfaces.InterfaceUnitPermissionsGetResponse.status:type_name -> jnx.jet.common.RpcStatus
	5,  // 71: jnx.jet.interfaces.InterfaceUnitPermissionsGetResponse.sub_code:type_name -> jnx.jet.interfaces.InterfaceUnitPermissionsGetResponse.StatusCode
	18, // 72: jnx.jet.interfaces.Interfaces.InterfaceAdd:input_type -> jnx.jet.interfaces.InterfaceAddRequest
	20, // 73: jnx.jet.interfaces.Interfaces.InterfaceUpdate:input_type -> jnx.jet.interfaces.InterfaceUpdateRequest
	27, // 74: jnx.jet.interfaces.Interfaces.InterfaceDelete:input_type -> jnx.jet.interfaces.InterfaceDeleteRequest
	29, // 75: jnx.jet.interfaces.Interfaces.InterfaceGet:input_type -> jnx.jet.interfaces.InterfaceGetRequest
	30, // 76: jnx.jet.interfaces.Interfaces.InterfaceUnitPermissionsGet:input_type -> jnx.jet.interfaces.InterfaceUnitPermissionsGetRequest
	17, // 77: jnx.jet.interfaces.Interfaces.InterfaceAdd:output_type -> jnx.jet.interfaces.InterfaceAddResponse
	19, // 78: jnx.jet.interfaces.Interfaces.InterfaceUpdate:output_type -> jnx.jet.interfaces.InterfaceUpdateResponse
	21, // 79: jnx.jet.interfaces.Interfaces.InterfaceDelete:output_type -> jnx.jet.interfaces.InterfaceDeleteResponse
	28, // 80: jnx.jet.interfaces.Interfaces.InterfaceGet:output_type -> jnx.jet.interfaces.InterfaceGetResponse
	31, // 81: jnx.jet.interfaces.Interfaces.InterfaceUnitPermissionsGet:output_type -> jnx.jet.interfaces.InterfaceUnitPermissionsGetResponse
	77, // [77:82] is the sub-list for method output_type
	72, // [72:77] is the sub-list for method input_type
	72, // [72:72] is the sub-list for extension type_name
	72, // [72:72] is the sub-list for extension extendee
	0,  // [0:72] is the sub-list for field type_name
}

func init() { file_jnx_interfaces_service_proto_init() }
func file_jnx_interfaces_service_proto_init() {
	if File_jnx_interfaces_service_proto != nil {
		return
	}
	file_jnx_common_addr_types_proto_init()
	file_jnx_common_base_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_jnx_interfaces_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_interfaces_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegerAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_interfaces_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregateOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_interfaces_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceSpecificOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_interfaces_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceAttributeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_interfaces_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_interfaces_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_interfaces_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceUnitConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_interfaces_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceFamilyConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_interfaces_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceAddressConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_interfaces_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceArpConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_interfaces_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceAddResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_interfaces_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_interfaces_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_interfaces_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_interfaces_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_interfaces_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_interfaces_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceUnitDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_interfaces_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceFamilyDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_interfaces_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceAddressDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_interfaces_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceArpDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_interfaces_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_interfaces_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_interfaces_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_interfaces_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceUnitPermissionsGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_interfaces_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceUnitPermissionsGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_jnx_interfaces_service_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*InterfaceSpecificOptions_AggregateOptions)(nil),
	}
	file_jnx_interfaces_service_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*InterfaceAddRequest_Interfaces)(nil),
		(*InterfaceAddRequest_Unit)(nil),
		(*InterfaceAddRequest_Family)(nil),
		(*InterfaceAddRequest_Address)(nil),
		(*InterfaceAddRequest_Arp)(nil),
	}
	file_jnx_interfaces_service_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*InterfaceUpdateRequest_Interfaces)(nil),
		(*InterfaceUpdateRequest_Unit)(nil),
		(*InterfaceUpdateRequest_Family)(nil),
		(*InterfaceUpdateRequest_Address)(nil),
		(*InterfaceUpdateRequest_Arp)(nil),
	}
	file_jnx_interfaces_service_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*InterfaceDeleteRequest_Interfaces)(nil),
		(*InterfaceDeleteRequest_Unit)(nil),
		(*InterfaceDeleteRequest_Family)(nil),
		(*InterfaceDeleteRequest_Address)(nil),
		(*InterfaceDeleteRequest_Arp)(nil),
	}
	file_jnx_interfaces_service_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*InterfaceGetResponse_Interfaces)(nil),
		(*InterfaceGetResponse_Unit)(nil),
		(*InterfaceGetResponse_Family)(nil),
		(*InterfaceGetResponse_Address)(nil),
		(*InterfaceGetResponse_Arp)(nil),
	}
	file_jnx_interfaces_service_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*InterfaceGetRequest_Interfaces)(nil),
		(*InterfaceGetRequest_Unit)(nil),
		(*InterfaceGetRequest_Family)(nil),
		(*InterfaceGetRequest_Address)(nil),
		(*InterfaceGetRequest_Arp)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_jnx_interfaces_service_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_jnx_interfaces_service_proto_goTypes,
		DependencyIndexes: file_jnx_interfaces_service_proto_depIdxs,
		EnumInfos:         file_jnx_interfaces_service_proto_enumTypes,
		MessageInfos:      file_jnx_interfaces_service_proto_msgTypes,
	}.Build()
	File_jnx_interfaces_service_proto = out.File
	file_jnx_interfaces_service_proto_rawDesc = nil
	file_jnx_interfaces_service_proto_goTypes = nil
	file_jnx_interfaces_service_proto_depIdxs = nil
}
