//
// Copyright 2018, Juniper Networks, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// [detail]: This file provides an RPC for API Registration

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: jnx_registration_service.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// [brief]: The request message containing the service registration info
// [detail]: The request message containing the service registration info
type ApiRegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Input type for API information registration
	//
	// Types that are assignable to InputType:
	//	*ApiRegisterRequest_JsonString
	//	*ApiRegisterRequest_JsonFile
	InputType isApiRegisterRequest_InputType `protobuf_oneof:"input_type"`
	// [brief]: Target ip-address/unix domain socket
	// [detail]: Target ip-address/unix domain socket for this service
	// For e.g., IPv6 address format will be "[::]:50051",
	// IPv4 address format will be "0.0.0.0:50051" format and
	// unix domain socket format will be "unix:/tmp/test_socket"
	Target string `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	// [brief]: Registration ID to store APIs
	// [detail]: Registration ID which will be used as the filename
	// to store the APIs registered in /opt/lib/japi/<register-id>.json
	// JSD will read the contents of this file upon restart. When the
	// daemon re-registers the APIs, it needs to use the same register ID.
	// This will allow JSD to delete the old file and store the new
	// contents in that file.
	Id string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	// [brief]: Boolean to let JSD skip login
	// [detail]: Boolean variable to indicate if JSD should skip Login()
	// call for RPCs executed for this package from clients if they
	// are connected using a secure channel
	SkipAuthentication bool `protobuf:"varint,5,opt,name=skip_authentication,json=skipAuthentication,proto3" json:"skip_authentication,omitempty"`
	// [brief]: Logical-system name for the target
	// [detail]: Logical-system name for the target if applicable
	// Eg: "rt1"
	LogicalSystem string `protobuf:"bytes,6,opt,name=logical_system,json=logicalSystem,proto3" json:"logical_system,omitempty"`
	// [brief]: Routing-instance name for the target
	// [detail]: Routing-instance name for the target if applicable
	// Eg: "__juniper_private1__"
	RoutingInstance string `protobuf:"bytes,7,opt,name=routing_instance,json=routingInstance,proto3" json:"routing_instance,omitempty"`
}

func (x *ApiRegisterRequest) Reset() {
	*x = ApiRegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_registration_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiRegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiRegisterRequest) ProtoMessage() {}

func (x *ApiRegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_registration_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiRegisterRequest.ProtoReflect.Descriptor instead.
func (*ApiRegisterRequest) Descriptor() ([]byte, []int) {
	return file_jnx_registration_service_proto_rawDescGZIP(), []int{0}
}

func (m *ApiRegisterRequest) GetInputType() isApiRegisterRequest_InputType {
	if m != nil {
		return m.InputType
	}
	return nil
}

func (x *ApiRegisterRequest) GetJsonString() string {
	if x, ok := x.GetInputType().(*ApiRegisterRequest_JsonString); ok {
		return x.JsonString
	}
	return ""
}

func (x *ApiRegisterRequest) GetJsonFile() string {
	if x, ok := x.GetInputType().(*ApiRegisterRequest_JsonFile); ok {
		return x.JsonFile
	}
	return ""
}

func (x *ApiRegisterRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *ApiRegisterRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ApiRegisterRequest) GetSkipAuthentication() bool {
	if x != nil {
		return x.SkipAuthentication
	}
	return false
}

func (x *ApiRegisterRequest) GetLogicalSystem() string {
	if x != nil {
		return x.LogicalSystem
	}
	return ""
}

func (x *ApiRegisterRequest) GetRoutingInstance() string {
	if x != nil {
		return x.RoutingInstance
	}
	return ""
}

type isApiRegisterRequest_InputType interface {
	isApiRegisterRequest_InputType()
}

type ApiRegisterRequest_JsonString struct {
	// [brief]: API information to register represented as JSON string
	JsonString string `protobuf:"bytes,1,opt,name=json_string,json=jsonString,proto3,oneof"`
}

type ApiRegisterRequest_JsonFile struct {
	// [brief]: Absolute path to json file containing API info to register
	JsonFile string `protobuf:"bytes,2,opt,name=json_file,json=jsonFile,proto3,oneof"`
}

func (*ApiRegisterRequest_JsonString) isApiRegisterRequest_InputType() {}

func (*ApiRegisterRequest_JsonFile) isApiRegisterRequest_InputType() {}

// [brief]: Registration response message
// [detail]: Registration response message
type ApiRegisterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Registration Request status
	Status *RpcStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ApiRegisterResponse) Reset() {
	*x = ApiRegisterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_registration_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiRegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiRegisterResponse) ProtoMessage() {}

func (x *ApiRegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_registration_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiRegisterResponse.ProtoReflect.Descriptor instead.
func (*ApiRegisterResponse) Descriptor() ([]byte, []int) {
	return file_jnx_registration_service_proto_rawDescGZIP(), []int{1}
}

func (x *ApiRegisterResponse) GetStatus() *RpcStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

var File_jnx_registration_service_proto protoreflect.FileDescriptor

var file_jnx_registration_service_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x6a, 0x6e, 0x78, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x14, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1b, 0x6a, 0x6e, 0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x8f, 0x02, 0x0a, 0x12, 0x41, 0x70, 0x69, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0b, 0x6a, 0x73,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a,
	0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x73, 0x6b, 0x69, 0x70, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x29, 0x0a, 0x10,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x58, 0x0a, 0x13, 0x41, 0x70, 0x69, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a,
	0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x70,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4a,
	0x04, 0x08, 0x02, 0x10, 0x03, 0x52, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x32,
	0x74, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x64, 0x0a, 0x0b, 0x41, 0x70, 0x69, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x28,
	0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a,
	0x65, 0x74, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x41, 0x70, 0x69, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x24, 0x5a, 0x11, 0x6c, 0x61, 0x62, 0x6e, 0x65, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x82, 0xb5, 0x18, 0x05, 0x30, 0x2e,
	0x30, 0x2e, 0x30, 0x8a, 0xb5, 0x18, 0x04, 0x31, 0x38, 0x2e, 0x34, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_jnx_registration_service_proto_rawDescOnce sync.Once
	file_jnx_registration_service_proto_rawDescData = file_jnx_registration_service_proto_rawDesc
)

func file_jnx_registration_service_proto_rawDescGZIP() []byte {
	file_jnx_registration_service_proto_rawDescOnce.Do(func() {
		file_jnx_registration_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_jnx_registration_service_proto_rawDescData)
	})
	return file_jnx_registration_service_proto_rawDescData
}

var file_jnx_registration_service_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_jnx_registration_service_proto_goTypes = []interface{}{
	(*ApiRegisterRequest)(nil),  // 0: jnx.jet.registration.ApiRegisterRequest
	(*ApiRegisterResponse)(nil), // 1: jnx.jet.registration.ApiRegisterResponse
	(*RpcStatus)(nil),           // 2: jnx.jet.common.RpcStatus
}
var file_jnx_registration_service_proto_depIdxs = []int32{
	2, // 0: jnx.jet.registration.ApiRegisterResponse.status:type_name -> jnx.jet.common.RpcStatus
	0, // 1: jnx.jet.registration.Registration.ApiRegister:input_type -> jnx.jet.registration.ApiRegisterRequest
	1, // 2: jnx.jet.registration.Registration.ApiRegister:output_type -> jnx.jet.registration.ApiRegisterResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_jnx_registration_service_proto_init() }
func file_jnx_registration_service_proto_init() {
	if File_jnx_registration_service_proto != nil {
		return
	}
	file_jnx_common_base_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_jnx_registration_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiRegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_registration_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiRegisterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_jnx_registration_service_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ApiRegisterRequest_JsonString)(nil),
		(*ApiRegisterRequest_JsonFile)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_jnx_registration_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_jnx_registration_service_proto_goTypes,
		DependencyIndexes: file_jnx_registration_service_proto_depIdxs,
		MessageInfos:      file_jnx_registration_service_proto_msgTypes,
	}.Build()
	File_jnx_registration_service_proto = out.File
	file_jnx_registration_service_proto_rawDesc = nil
	file_jnx_registration_service_proto_goTypes = nil
	file_jnx_registration_service_proto_depIdxs = nil
}
