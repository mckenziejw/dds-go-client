//
// Copyright 2019, Juniper Networks, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: jnx_routing_rib_service.proto

//[brief]: This package supports the RIB services.

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// [brief]: Response sub_code.
// [detail]: Response sub_code for route add/modify/update/delete/get/subscribe.
// [default]: SUCCESS.
type StatusCode int32

const (
	// [brief]: Request successfully completed in full.
	StatusCode_SUCCESS StatusCode = 0
	// [brief]: Request failed due to an internal server error.
	StatusCode_INTERNAL_ERROR StatusCode = 1
	// [brief]: The route service has not been initialized.
	StatusCode_NOT_INITIALIZED StatusCode = 2
	// [brief]: Request did not result in any operations.
	StatusCode_NO_OP StatusCode = 3
	// [brief]: Request contained too many operations.
	StatusCode_TOO_MANY_OPS StatusCode = 4
	// [brief]: Request contained an invalid table.
	StatusCode_TABLE_INVALID StatusCode = 5
	// [brief]: Request contained a table that was not ready for operations.
	StatusCode_TABLE_NOT_READY StatusCode = 6
	// [brief]: Request contained an invalid destination address prefix.
	StatusCode_PREFIX_INVALID StatusCode = 7
	// [brief]: Request contained a destination prefix length too short for the
	// supplied address/NLRI.
	StatusCode_PREFIX_LEN_TOO_SHORT StatusCode = 8
	// [brief]: Request contained a destination prefix length too long for the
	//  supplied address/NLRI.
	StatusCode_PREFIX_LEN_TOO_LONG StatusCode = 9
	// [brief]: The server did not have a valid gateway associated with the
	// client.
	StatusCode_GATEWAY_INVALID StatusCode = 10
	// [brief]: Request contained an invalid nexthop.
	StatusCode_NEXTHOP_INVALID StatusCode = 11
	// [brief]: Request contained a nexthop with an invalid address.
	StatusCode_NEXTHOP_ADDRESS_INVALID StatusCode = 12
	// [brief]: Request to add paths exceeding maximum ECMP paths for a
	// destination.
	StatusCode_NEXTHOP_LIMIT_EXCEED StatusCode = 13
	// [brief]: Request contains a route that is already present in the table.
	StatusCode_ROUTE_EXISTS StatusCode = 14
	// [brief]: Request contains a route that is NOT present in the table.
	StatusCode_ROUTE_NOT_FOUND StatusCode = 15
	// [brief]: Request contains an invalid protocol. Only PROTO_UNSPECIFID
	// or PROTO_BGP_STATIC are allowed in route change operations.
	StatusCode_PROTOCOL_INVALID StatusCode = 16
	// [brief]: Request contains a route that is NOT present in the table.
	StatusCode_ROUTE_ADD_FAILED StatusCode = 17
	// [brief]: The protocol daemon is not initialized and ready to accept
	// route change operations.
	StatusCode_NOT_READY StatusCode = 18
	// [brief]: Request cannot be serviced until current requests are processed.
	StatusCode_TRY_AGAIN StatusCode = 19
	// [brief]: Request contains a route_count that exceeds the max of 1000.
	StatusCode_ROUTE_COUNT_INVALID StatusCode = 20
	// [brief]: Request contains a parameter that is not currently supported.
	StatusCode_REQUEST_UNSUPPORTED StatusCode = 21
	// [brief]: Request contains a parameter that is not valid.
	StatusCode_REQUEST_INVALID StatusCode = 22
	// [brief]: Interface name is not valid.
	StatusCode_INTERFACE_INVALID StatusCode = 23
	// [brief]: Invalid parameters for Route subscribe.
	// [detail]:Invalid parameters for Route subscribe. This can be returned
	// if a wrong value is set in the subscription or requested operation is
	// invalid. For e.g. this error is returned when Route Subscribe
	// API is called with operation > SUBSCRIBE_DEL.
	// This error will also be returned if a subscribe API is called for an
	// existing subscribe with a modified value of subscribe_response_route_count.
	StatusCode_ROUTE_SUBSCRIBE_OPERATION_INVALID StatusCode = 24
	// [brief]: This error is returned when Route subscribe API with delete
	// operation is called for a table which was not subscribed for
	// using a add operation.
	StatusCode_ROUTE_SUBSCRIBE_ENOENT StatusCode = 25
	// [brief]: Route Subscribe Policy invalid.
	StatusCode_ROUTE_SUBSCRIBE_POLICY_INVALID StatusCode = 26
	// [brief]: Route Subscribe request has invalid
	// subscribe_response_route_count.
	// This error is also returned if subscribe_response_route_count is changed.
	// for an existing subscription.
	StatusCode_ROUTE_SUBSCRIBE_RESPONSE_ROUTE_COUNT_INVALID StatusCode = 27
	// [brief]: Route subscribe registration for same table with same params exist.
	StatusCode_ROUTE_SUBSCRIBE_EXISTS StatusCode = 28
	// [brief]: MPLS Label value is invalid.
	StatusCode_MPLS_LABEL_INVALID StatusCode = 29
	// [brief]: MPLS Label stack operation(s) is invalid.
	StatusCode_MPLS_ACTION_INVALID StatusCode = 30
	// [brief]: Client is already initialized.
	StatusCode_ALREADY_INITIALIZED StatusCode = 31
	// [brief]: Disconnected client reconnects back.
	StatusCode_SUCCESS_REBOUND StatusCode = 32
	// [brief]: Invalid use of a flexible tunnel profile.
	StatusCode_FLEXIBLE_TUNNEL_INVALID StatusCode = 33
	// [brief]: Bandwidth used but not set for all gateways.
	StatusCode_BANDWIDTH_USAGE_INVALID StatusCode = 34
)

// Enum value maps for StatusCode.
var (
	StatusCode_name = map[int32]string{
		0:  "SUCCESS",
		1:  "INTERNAL_ERROR",
		2:  "NOT_INITIALIZED",
		3:  "NO_OP",
		4:  "TOO_MANY_OPS",
		5:  "TABLE_INVALID",
		6:  "TABLE_NOT_READY",
		7:  "PREFIX_INVALID",
		8:  "PREFIX_LEN_TOO_SHORT",
		9:  "PREFIX_LEN_TOO_LONG",
		10: "GATEWAY_INVALID",
		11: "NEXTHOP_INVALID",
		12: "NEXTHOP_ADDRESS_INVALID",
		13: "NEXTHOP_LIMIT_EXCEED",
		14: "ROUTE_EXISTS",
		15: "ROUTE_NOT_FOUND",
		16: "PROTOCOL_INVALID",
		17: "ROUTE_ADD_FAILED",
		18: "NOT_READY",
		19: "TRY_AGAIN",
		20: "ROUTE_COUNT_INVALID",
		21: "REQUEST_UNSUPPORTED",
		22: "REQUEST_INVALID",
		23: "INTERFACE_INVALID",
		24: "ROUTE_SUBSCRIBE_OPERATION_INVALID",
		25: "ROUTE_SUBSCRIBE_ENOENT",
		26: "ROUTE_SUBSCRIBE_POLICY_INVALID",
		27: "ROUTE_SUBSCRIBE_RESPONSE_ROUTE_COUNT_INVALID",
		28: "ROUTE_SUBSCRIBE_EXISTS",
		29: "MPLS_LABEL_INVALID",
		30: "MPLS_ACTION_INVALID",
		31: "ALREADY_INITIALIZED",
		32: "SUCCESS_REBOUND",
		33: "FLEXIBLE_TUNNEL_INVALID",
		34: "BANDWIDTH_USAGE_INVALID",
	}
	StatusCode_value = map[string]int32{
		"SUCCESS":                           0,
		"INTERNAL_ERROR":                    1,
		"NOT_INITIALIZED":                   2,
		"NO_OP":                             3,
		"TOO_MANY_OPS":                      4,
		"TABLE_INVALID":                     5,
		"TABLE_NOT_READY":                   6,
		"PREFIX_INVALID":                    7,
		"PREFIX_LEN_TOO_SHORT":              8,
		"PREFIX_LEN_TOO_LONG":               9,
		"GATEWAY_INVALID":                   10,
		"NEXTHOP_INVALID":                   11,
		"NEXTHOP_ADDRESS_INVALID":           12,
		"NEXTHOP_LIMIT_EXCEED":              13,
		"ROUTE_EXISTS":                      14,
		"ROUTE_NOT_FOUND":                   15,
		"PROTOCOL_INVALID":                  16,
		"ROUTE_ADD_FAILED":                  17,
		"NOT_READY":                         18,
		"TRY_AGAIN":                         19,
		"ROUTE_COUNT_INVALID":               20,
		"REQUEST_UNSUPPORTED":               21,
		"REQUEST_INVALID":                   22,
		"INTERFACE_INVALID":                 23,
		"ROUTE_SUBSCRIBE_OPERATION_INVALID": 24,
		"ROUTE_SUBSCRIBE_ENOENT":            25,
		"ROUTE_SUBSCRIBE_POLICY_INVALID":    26,
		"ROUTE_SUBSCRIBE_RESPONSE_ROUTE_COUNT_INVALID": 27,
		"ROUTE_SUBSCRIBE_EXISTS":                       28,
		"MPLS_LABEL_INVALID":                           29,
		"MPLS_ACTION_INVALID":                          30,
		"ALREADY_INITIALIZED":                          31,
		"SUCCESS_REBOUND":                              32,
		"FLEXIBLE_TUNNEL_INVALID":                      33,
		"BANDWIDTH_USAGE_INVALID":                      34,
	}
)

func (x StatusCode) Enum() *StatusCode {
	p := new(StatusCode)
	*p = x
	return p
}

func (x StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_routing_rib_service_proto_enumTypes[0].Descriptor()
}

func (StatusCode) Type() protoreflect.EnumType {
	return &file_jnx_routing_rib_service_proto_enumTypes[0]
}

func (x StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusCode.Descriptor instead.
func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_jnx_routing_rib_service_proto_rawDescGZIP(), []int{0}
}

// [brief]: Route Preferences.
// [detail]: Route Preferences of the various route types
// [default]: RTPREF_DIRECT
type RoutePreference int32

const (
	// [brief]: Routes to interfaces
	RoutePreference_RTPREF_DIRECT RoutePreference = 0
	// [brief]: Static routes
	RoutePreference_RTPREF_STATIC RoutePreference = 5
	// [brief]: OSPF Internal route
	RoutePreference_RTPREF_OSPF RoutePreference = 10
	// [brief]: IS-IS level 1 route
	RoutePreference_RTPREF_LABELED_ISIS RoutePreference = 14
	// [brief]: IS-IS level 1 route
	RoutePreference_RTPREF_ISIS_L1 RoutePreference = 15
	// [brief]: IS-IS level 2 route
	RoutePreference_RTPREF_ISIS_L2 RoutePreference = 18
	// [brief]: Berkeley RIP
	RoutePreference_RTPREF_RIP RoutePreference = 100
	// [brief]: Berkeley RIPng
	RoutePreference_RTPREF_RIPNG RoutePreference = 100
	// [brief]: Internet Gatway Mgmt
	RoutePreference_RTPREF_IGMP RoutePreference = 115
	// [brief]: OSPF External route
	RoutePreference_RTPREF_OSPF_ASE RoutePreference = 150
	// [brief]: Border Gateway Protocol - external peer
	RoutePreference_RTPREF_BGP_EXT RoutePreference = 170
)

// Enum value maps for RoutePreference.
var (
	RoutePreference_name = map[int32]string{
		0:   "RTPREF_DIRECT",
		5:   "RTPREF_STATIC",
		10:  "RTPREF_OSPF",
		14:  "RTPREF_LABELED_ISIS",
		15:  "RTPREF_ISIS_L1",
		18:  "RTPREF_ISIS_L2",
		100: "RTPREF_RIP",
		// Duplicate value: 100: "RTPREF_RIPNG",
		115: "RTPREF_IGMP",
		150: "RTPREF_OSPF_ASE",
		170: "RTPREF_BGP_EXT",
	}
	RoutePreference_value = map[string]int32{
		"RTPREF_DIRECT":       0,
		"RTPREF_STATIC":       5,
		"RTPREF_OSPF":         10,
		"RTPREF_LABELED_ISIS": 14,
		"RTPREF_ISIS_L1":      15,
		"RTPREF_ISIS_L2":      18,
		"RTPREF_RIP":          100,
		"RTPREF_RIPNG":        100,
		"RTPREF_IGMP":         115,
		"RTPREF_OSPF_ASE":     150,
		"RTPREF_BGP_EXT":      170,
	}
)

func (x RoutePreference) Enum() *RoutePreference {
	p := new(RoutePreference)
	*p = x
	return p
}

func (x RoutePreference) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoutePreference) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_routing_rib_service_proto_enumTypes[1].Descriptor()
}

func (RoutePreference) Type() protoreflect.EnumType {
	return &file_jnx_routing_rib_service_proto_enumTypes[1]
}

func (x RoutePreference) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoutePreference.Descriptor instead.
func (RoutePreference) EnumDescriptor() ([]byte, []int) {
	return file_jnx_routing_rib_service_proto_rawDescGZIP(), []int{1}
}

// [brief]: Route match type.
// [detail]: Various ways to match a route for get requests.
// [default]: BEST
type RouteMatchType int32

const (
	//[brief]: Match the best route.
	RouteMatchType_BEST RouteMatchType = 0
	//[brief]: Match the exact route.
	RouteMatchType_EXACT RouteMatchType = 1
	//[brief]: Match the exact or longer prefix route.
	RouteMatchType_EXACT_OR_LONGER RouteMatchType = 2
)

// Enum value maps for RouteMatchType.
var (
	RouteMatchType_name = map[int32]string{
		0: "BEST",
		1: "EXACT",
		2: "EXACT_OR_LONGER",
	}
	RouteMatchType_value = map[string]int32{
		"BEST":            0,
		"EXACT":           1,
		"EXACT_OR_LONGER": 2,
	}
)

func (x RouteMatchType) Enum() *RouteMatchType {
	p := new(RouteMatchType)
	*p = x
	return p
}

func (x RouteMatchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RouteMatchType) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_routing_rib_service_proto_enumTypes[2].Descriptor()
}

func (RouteMatchType) Type() protoreflect.EnumType {
	return &file_jnx_routing_rib_service_proto_enumTypes[2]
}

func (x RouteMatchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RouteMatchType.Descriptor instead.
func (RouteMatchType) EnumDescriptor() ([]byte, []int) {
	return file_jnx_routing_rib_service_proto_rawDescGZIP(), []int{2}
}

// [brief]: Route Subscribe operations.
// [detail]: match with RPD_MSG_FLASH_SUBSCRIBE_REQUEST.
// [default]: SUBSCRIBE_NONE
type RouteSubscribeOp int32

const (
	//[brief]: not subscribed to any route table.
	RouteSubscribeOp_SUBSCRIBE_NONE RouteSubscribeOp = 0
	//[brief]: add the subscription for given table.
	RouteSubscribeOp_SUBSCRIBE_ADD RouteSubscribeOp = 1
	//[brief]: delete the subscription for given table.
	RouteSubscribeOp_SUBSCRIBE_DELETE RouteSubscribeOp = 2
)

// Enum value maps for RouteSubscribeOp.
var (
	RouteSubscribeOp_name = map[int32]string{
		0: "SUBSCRIBE_NONE",
		1: "SUBSCRIBE_ADD",
		2: "SUBSCRIBE_DELETE",
	}
	RouteSubscribeOp_value = map[string]int32{
		"SUBSCRIBE_NONE":   0,
		"SUBSCRIBE_ADD":    1,
		"SUBSCRIBE_DELETE": 2,
	}
)

func (x RouteSubscribeOp) Enum() *RouteSubscribeOp {
	p := new(RouteSubscribeOp)
	*p = x
	return p
}

func (x RouteSubscribeOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RouteSubscribeOp) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_routing_rib_service_proto_enumTypes[3].Descriptor()
}

func (RouteSubscribeOp) Type() protoreflect.EnumType {
	return &file_jnx_routing_rib_service_proto_enumTypes[3]
}

func (x RouteSubscribeOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RouteSubscribeOp.Descriptor instead.
func (RouteSubscribeOp) EnumDescriptor() ([]byte, []int) {
	return file_jnx_routing_rib_service_proto_rawDescGZIP(), []int{3}
}

// [brief]: Route Operation type of routes replied in RouteSubscribeResponse.
// [detail]: matches RPD_ROUTE_FLASH_OP*.
// [default]: ROUTE_SUBSCRIBE_OP_NONE
type RouteSubscribeRouteOp int32

const (
	//[brief]: No operation
	RouteSubscribeRouteOp_ROUTE_SUBSCRIBE_OP_NONE RouteSubscribeRouteOp = 0
	//[brief]: Route add operation
	RouteSubscribeRouteOp_ROUTE_SUBSCRIBE_OP_ADD RouteSubscribeRouteOp = 1
	//[brief]: Route modification
	RouteSubscribeRouteOp_ROUTE_SUBSCRIBE_OP_MODIFY RouteSubscribeRouteOp = 2
	//[brief]: Route delete operation
	RouteSubscribeRouteOp_ROUTE_SUBSCBIBE_OP_DELETE RouteSubscribeRouteOp = 3
	//[brief]: no advertisement
	RouteSubscribeRouteOp_ROUTE_SUBSCRIBE_OP_NO_ADVERTISE RouteSubscribeRouteOp = 4
	//[brief]: end of the route table
	RouteSubscribeRouteOp_ROUTE_SUBSCRIBE_OP_END_OF_TABLE RouteSubscribeRouteOp = 5
)

// Enum value maps for RouteSubscribeRouteOp.
var (
	RouteSubscribeRouteOp_name = map[int32]string{
		0: "ROUTE_SUBSCRIBE_OP_NONE",
		1: "ROUTE_SUBSCRIBE_OP_ADD",
		2: "ROUTE_SUBSCRIBE_OP_MODIFY",
		3: "ROUTE_SUBSCBIBE_OP_DELETE",
		4: "ROUTE_SUBSCRIBE_OP_NO_ADVERTISE",
		5: "ROUTE_SUBSCRIBE_OP_END_OF_TABLE",
	}
	RouteSubscribeRouteOp_value = map[string]int32{
		"ROUTE_SUBSCRIBE_OP_NONE":         0,
		"ROUTE_SUBSCRIBE_OP_ADD":          1,
		"ROUTE_SUBSCRIBE_OP_MODIFY":       2,
		"ROUTE_SUBSCBIBE_OP_DELETE":       3,
		"ROUTE_SUBSCRIBE_OP_NO_ADVERTISE": 4,
		"ROUTE_SUBSCRIBE_OP_END_OF_TABLE": 5,
	}
)

func (x RouteSubscribeRouteOp) Enum() *RouteSubscribeRouteOp {
	p := new(RouteSubscribeRouteOp)
	*p = x
	return p
}

func (x RouteSubscribeRouteOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RouteSubscribeRouteOp) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_routing_rib_service_proto_enumTypes[4].Descriptor()
}

func (RouteSubscribeRouteOp) Type() protoreflect.EnumType {
	return &file_jnx_routing_rib_service_proto_enumTypes[4]
}

func (x RouteSubscribeRouteOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RouteSubscribeRouteOp.Descriptor instead.
func (RouteSubscribeRouteOp) EnumDescriptor() ([]byte, []int) {
	return file_jnx_routing_rib_service_proto_rawDescGZIP(), []int{4}
}

// [brief]: The route entry fields that uniquely identify a route.
// [detail]: Route entry's unique fields typically used to match the route.
type RouteMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [mandatory]:
	// [brief]: Address of the route.
	DestPrefix *NetworkAddress `protobuf:"bytes,1,opt,name=dest_prefix,json=destPrefix,proto3" json:"dest_prefix,omitempty"`
	// [mandatory]:
	// [brief]: Route prefix length.
	DestPrefixLen uint32 `protobuf:"varint,2,opt,name=dest_prefix_len,json=destPrefixLen,proto3" json:"dest_prefix_len,omitempty"`
	// [mandatory]:
	// [brief]: Routing table to which the route belongs.
	Table *RouteTable `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
	// [brief]:  Differentiate routes of same address set by application.
	// [default value]: 0.
	Cookie uint64 `protobuf:"varint,4,opt,name=cookie,proto3" json:"cookie,omitempty"`
}

func (x *RouteMatch) Reset() {
	*x = RouteMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_rib_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteMatch) ProtoMessage() {}

func (x *RouteMatch) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_rib_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteMatch.ProtoReflect.Descriptor instead.
func (*RouteMatch) Descriptor() ([]byte, []int) {
	return file_jnx_routing_rib_service_proto_rawDescGZIP(), []int{0}
}

func (x *RouteMatch) GetDestPrefix() *NetworkAddress {
	if x != nil {
		return x.DestPrefix
	}
	return nil
}

func (x *RouteMatch) GetDestPrefixLen() uint32 {
	if x != nil {
		return x.DestPrefixLen
	}
	return 0
}

func (x *RouteMatch) GetTable() *RouteTable {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *RouteMatch) GetCookie() uint64 {
	if x != nil {
		return x.Cookie
	}
	return 0
}

// [brief]: Route gateway message.
// [detail]: Route gateway contains the parameters which are needed to forward
// traffic to next router/host. Consists of gateway address, local address and
// interface.
type RouteGateway struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [mandatory]:
	// [brief]: Address of nexhop gateway or peer.
	GatewayAddress *NetworkAddress `protobuf:"bytes,1,opt,name=gateway_address,json=gatewayAddress,proto3" json:"gateway_address,omitempty"`
	// [brief]: Outgoing local interface name (IFL).
	// [detail]: If provided, the router next-hop is built.
	// If not provided, an indirect next-hop is built.
	// OPTIONAL
	InterfaceName string `protobuf:"bytes,2,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	// [brief]: Local interface address to be used.
	// [detail]: Local address is used to select a suitable interface.
	// This is useful when app is not aware of the outgoing interface,
	// but knows the IP address of the interface.
	// OPTIONAL
	LocalAddress *NetworkAddress `protobuf:"bytes,3,opt,name=local_address,json=localAddress,proto3" json:"local_address,omitempty"`
	// [brief]: MPLS label stack.
	// [detail]: List of Stack Entries with each with an associated action
	// Entries are ordered in the same order as actions to be performed.
	//  OPTIONAL
	LabelStack *LabelStack `protobuf:"bytes,4,opt,name=label_stack,json=labelStack,proto3" json:"label_stack,omitempty"`
	// [brief]: weight
	// [detail]: For a route next-hop with next-hop gateways, the gateway
	// with the lowest weight is treated as primary path. If the primary
	// next-hop goes down, the forwarding plane will automatically route
	// traffic  via the secondary next-hop gateway.
	// When there are multiple next-hop gateways entries with same lowest
	// weight, all of them are added to the ECMP nexthop if ECMP is configured.
	// If weight is 0, it's considered as not specified.
	// Valid value range is 1-65535.
	// The default weight is 0 if it is not specified.
	// OPTIONAL
	Weight uint32 `protobuf:"varint,5,opt,name=weight,proto3" json:"weight,omitempty"`
	// [brief]: bandwidth
	// [detail]: When a route next-hop with multiple next-hop gateways,
	// applying ECMP distributes traffic evenly across all the next-hop
	// gateways.
	// If traffic needs to be distributed unequally across multiple gateways,
	// the bandwidth field is used to compute balance coefficients that
	// determine the proportion of traffic sent via each gateway.
	// Bandwidth is not an absolute value, but is relative. The proportion of
	// traffic assigned to each gateway is determined using the following
	// formula:
	// (gateway bandwidth)/ (sum of bandwidths for all gateways).
	// Valid range is 0 and above. Negative values are treated as 0.
	// Bandwidth will be ignored for next-hops with only a single
	// usable gateway. If bandwidth is set for one gateway, then it
	// must be set for all gateways.
	// The default bandwidth is 0 if it is not specified.
	// OPTIONAL
	Bandwidth float32 `protobuf:"fixed32,6,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	// [brief]: Flexible tunnel profile.
	// [detail]: Flexible encapsulation attributes specified directly with the
	// destination route.
	// TunnelType ENCAPSULATE or ENCAP_AND_DECAPSULATE.
	// OPTIONAL. If specified, these override any other gateway parameters.
	FlexibleTunnelProfile *FlexibleTunnelProfile `protobuf:"bytes,7,opt,name=flexible_tunnel_profile,json=flexibleTunnelProfile,proto3" json:"flexible_tunnel_profile,omitempty"`
}

func (x *RouteGateway) Reset() {
	*x = RouteGateway{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_rib_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteGateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteGateway) ProtoMessage() {}

func (x *RouteGateway) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_rib_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteGateway.ProtoReflect.Descriptor instead.
func (*RouteGateway) Descriptor() ([]byte, []int) {
	return file_jnx_routing_rib_service_proto_rawDescGZIP(), []int{1}
}

func (x *RouteGateway) GetGatewayAddress() *NetworkAddress {
	if x != nil {
		return x.GatewayAddress
	}
	return nil
}

func (x *RouteGateway) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *RouteGateway) GetLocalAddress() *NetworkAddress {
	if x != nil {
		return x.LocalAddress
	}
	return nil
}

func (x *RouteGateway) GetLabelStack() *LabelStack {
	if x != nil {
		return x.LabelStack
	}
	return nil
}

func (x *RouteGateway) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *RouteGateway) GetBandwidth() float32 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

func (x *RouteGateway) GetFlexibleTunnelProfile() *FlexibleTunnelProfile {
	if x != nil {
		return x.FlexibleTunnelProfile
	}
	return nil
}

// [brief]: Route next hop.
// [detail]: When a data traffic arrives on a router, route nexthop indicates
// the next router(s) to which the traffic is to be forwarded. This consists of
// list of gateways.
type RouteNexthop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: List of nexthop gateways.
	// [detail]:  JUNOS currently allows up to 64 gateways per next-hop.
	// defaults to a next-hop that blackholes the traffic
	// OPTIONAL.
	Gateways []*RouteGateway `protobuf:"bytes,1,rep,name=gateways,proto3" json:"gateways,omitempty"`
}

func (x *RouteNexthop) Reset() {
	*x = RouteNexthop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_rib_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteNexthop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteNexthop) ProtoMessage() {}

func (x *RouteNexthop) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_rib_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteNexthop.ProtoReflect.Descriptor instead.
func (*RouteNexthop) Descriptor() ([]byte, []int) {
	return file_jnx_routing_rib_service_proto_rawDescGZIP(), []int{2}
}

func (x *RouteNexthop) GetGateways() []*RouteGateway {
	if x != nil {
		return x.Gateways
	}
	return nil
}

// [brief]: Route attributes message.
// [detail]:Route attributes message type with attributes like preference, tags and colors.
type RouteAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Route preference
	// [detail]: Route preference attributes are used by the route selection
	// process to select the active route amongst the usable routes for a given
	// destination.
	// preferences are optional unsigned 32-bit integer values (range 0 to
	// 2^32-1). Lower the value, more preferable is the route. Routes are
	// sorted based on the preference array values.
	// It should be noted that some preferences have special meaning in JUNOS.
	// preferences[0] is treated as administrative distance and is same as
	// preference field in the CLI. JUNOS assigns a default preference
	// value based on the protocol.
	// Lowest preference value any programmed route can take is 5. Values
	// less than 5 in update requests will be changed to 5.
	// preferences[1] is same as preference2 in the CLI.
	// For programmed routes, preference2 will default to 100, making them
	// preferred over static routes added via CLI (without the optional
	// preference2).
	// By explicitly setting preference and prefernce2, applications can
	// make programmed routes more/less desirable than other routes.
	// It should be noted that BGP owned routes use preference2 for storing
	// 1's complement of local preference, making routes with higher local
	// preference value more preferable.
	// At present, 2 preference values are allowed.
	// OPTIONAL
	Preferences map[uint32]*wrapperspb.UInt32Value `protobuf:"bytes,1,rep,name=preferences,proto3" json:"preferences,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// [brief]: tags
	// [detail]: tags are optional unsigned 32-bit integer values
	// (range 0 to 2^32-1) that can be associated with a route entry for use
	// in policy matching.
	// If tags is not set, no value will be set by default to tag/tag2.
	// Tags do not directly influence the route selection process, but can be
	// used by route policies to influence the route selection process.
	// It should be noted that some protocols in JUNOS may read/update/advertise
	// tag field contents.
	// For e.g: For routes advertised into OSPF, tags[0] corresponds to the
	// 32-bit tag field in OSPF external LSA packets and tags[1] corresponds
	// to the area ID.
	// For IS-IS, tags[0]/tags[1] corresponds to the 32-bit Administrative Tag
	// Sub-TLV (RFC 5130).
	// tags[0] and tags[1] correspond to the corresponding tag and tag2 in
	// JUNOS CLI.
	// At present, 2 tag values are supported.
	// OPTIONAL
	Tags map[uint32]*wrapperspb.UInt32Value `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// [brief]: colors
	// detail]: colors are optional unsigned 32-bit integer values
	// (range 0 to 2^32 -1) that can be associated with a route and can be
	// used for policy matching. They are similar to route tags.
	// If colors is not set, no value will be set by default to color/color2.
	// It should be noted that some protocols in JUNOS may read/update/advertise
	// tag field contents.
	// RSVP may advertise colors[0] and colors[1] from IGP routes contents to
	// RSVP peers in inter-as scenarios.
	// colors[0] and colors[1] corresponds to the corresponding color and
	// color2 in JUNOS CLI.
	// At present, 2 color values are supported.
	// OPTIONAL
	Colors map[uint32]*wrapperspb.UInt32Value `protobuf:"bytes,3,rep,name=colors,proto3" json:"colors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RouteAttributes) Reset() {
	*x = RouteAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_rib_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteAttributes) ProtoMessage() {}

func (x *RouteAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_rib_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteAttributes.ProtoReflect.Descriptor instead.
func (*RouteAttributes) Descriptor() ([]byte, []int) {
	return file_jnx_routing_rib_service_proto_rawDescGZIP(), []int{3}
}

func (x *RouteAttributes) GetPreferences() map[uint32]*wrapperspb.UInt32Value {
	if x != nil {
		return x.Preferences
	}
	return nil
}

func (x *RouteAttributes) GetTags() map[uint32]*wrapperspb.UInt32Value {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *RouteAttributes) GetColors() map[uint32]*wrapperspb.UInt32Value {
	if x != nil {
		return x.Colors
	}
	return nil
}

// [brief]: Route entry
// [detail]: Route entry with route address, mask and attributes
type RouteEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [mandatory]:
	// [brief]: Route key attribute.
	Key *RouteMatch `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// [mandatory]:
	// [brief]: Nexthop details of the route.
	Nexthop *RouteNexthop `protobuf:"bytes,2,opt,name=nexthop,proto3" json:"nexthop,omitempty"`
	// [brief]: Protocol
	// [detail]: Protocol that added this route. Currently, this is only
	// used in subscribe response. It cannot be used during RIB Add/modify/del
	// calls as this should  be set to the protocol adding the route and
	// routes added via these APIs are always Static routes.
	Protocol RouteProtoType `protobuf:"varint,3,opt,name=protocol,proto3,enum=jnx.jet.routing.base.RouteProtoType" json:"protocol,omitempty"`
	// [brief]: Route attributes
	// [detail]: Route attributes are optional information associated with
	// a route entry. They may be used in route selection and also by route
	// policy engine. Some of these attributes may get advertised by protocols
	// to their peers.
	// OPTIONAL
	Attributes *RouteAttributes `protobuf:"bytes,4,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *RouteEntry) Reset() {
	*x = RouteEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_rib_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteEntry) ProtoMessage() {}

func (x *RouteEntry) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_rib_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteEntry.ProtoReflect.Descriptor instead.
func (*RouteEntry) Descriptor() ([]byte, []int) {
	return file_jnx_routing_rib_service_proto_rawDescGZIP(), []int{4}
}

func (x *RouteEntry) GetKey() *RouteMatch {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *RouteEntry) GetNexthop() *RouteNexthop {
	if x != nil {
		return x.Nexthop
	}
	return nil
}

func (x *RouteEntry) GetProtocol() RouteProtoType {
	if x != nil {
		return x.Protocol
	}
	return RouteProtoType_PROTO_ANY
}

func (x *RouteEntry) GetAttributes() *RouteAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// [brief]: Route initialize request.
// [detail]: Client initialization request message contains the response
// address format and default preference values.
type RouteInitializeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Response address format to specify the network address format
	// in response messages. OPTIONAL. Default is STRING.
	DefaultResponseAddressFormat AddressFormat `protobuf:"varint,1,opt,name=default_response_address_format,json=defaultResponseAddressFormat,proto3,enum=jnx.jet.common.AddressFormat" json:"default_response_address_format,omitempty"`
	// [brief]: Default preference. OPTIONAL.
	// [detail]: Default preference is applied during route operations that do not specify preference.
	//
	// If the preference1 value passed by client is less than 5 or not passed at all, then by default preference1 value
	// will be set to 5.
	//
	// If the preference2 value is not passed by the client, then by default preference2 value
	// will be set to 100.
	//
	// The default preferences set during initialize will always overwrite the existing prefernces in the route table
	// whenever the update/modify is called without passing preference values.
	//
	// Scenario 1: Initialize with pref1 = X and pref2 = Y.
	//             Add route with pref1 =  A and pref2 = B.
	//             Modify route without passing pref1 or pref2.
	// Now the preference for the newly added route will be X and Y.
	//
	// Scenario 2: Initialize with pref1 = X and pref2 = NULL.
	// Now the defaul preference will be X and 100 (Since pref2 is not passed).
	//             Add route without pref1 and pref2 = Y.
	// Now the preference for the newly added route will be X and Y.
	DefaultPreferences map[uint32]*wrapperspb.UInt32Value `protobuf:"bytes,2,rep,name=default_preferences,json=defaultPreferences,proto3" json:"default_preferences,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RouteInitializeRequest) Reset() {
	*x = RouteInitializeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_rib_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteInitializeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteInitializeRequest) ProtoMessage() {}

func (x *RouteInitializeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_rib_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteInitializeRequest.ProtoReflect.Descriptor instead.
func (*RouteInitializeRequest) Descriptor() ([]byte, []int) {
	return file_jnx_routing_rib_service_proto_rawDescGZIP(), []int{5}
}

func (x *RouteInitializeRequest) GetDefaultResponseAddressFormat() AddressFormat {
	if x != nil {
		return x.DefaultResponseAddressFormat
	}
	return AddressFormat_ADDRESS_STRING
}

func (x *RouteInitializeRequest) GetDefaultPreferences() map[uint32]*wrapperspb.UInt32Value {
	if x != nil {
		return x.DefaultPreferences
	}
	return nil
}

// [brief]: Route initialization response.
// [detail]: Response message specifying the final status, detailed message
// and number of previously added routes for the route initialize request.
type RouteInitializeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [mandatory]:
	// [brief]: Top level return code.
	Status *RpcStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// [mandatory]:
	// [brief]: The API specific return sub-code for the request.
	SubCode StatusCode `protobuf:"varint,2,opt,name=sub_code,json=subCode,proto3,enum=jnx.jet.routing.rib.StatusCode" json:"sub_code,omitempty"`
	// [mandatory]:
	// [brief]: Indicates the number of routes previously added by this client.
	NumClientRoutes uint32 `protobuf:"varint,3,opt,name=num_client_routes,json=numClientRoutes,proto3" json:"num_client_routes,omitempty"`
}

func (x *RouteInitializeResponse) Reset() {
	*x = RouteInitializeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_rib_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteInitializeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteInitializeResponse) ProtoMessage() {}

func (x *RouteInitializeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_rib_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteInitializeResponse.ProtoReflect.Descriptor instead.
func (*RouteInitializeResponse) Descriptor() ([]byte, []int) {
	return file_jnx_routing_rib_service_proto_rawDescGZIP(), []int{6}
}

func (x *RouteInitializeResponse) GetStatus() *RpcStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *RouteInitializeResponse) GetSubCode() StatusCode {
	if x != nil {
		return x.SubCode
	}
	return StatusCode_SUCCESS
}

func (x *RouteInitializeResponse) GetNumClientRoutes() uint32 {
	if x != nil {
		return x.NumClientRoutes
	}
	return 0
}

// [brief]: Route clean up request.
// [detail]: Request to clean up the client routes.
type RouteCleanupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RouteCleanupRequest) Reset() {
	*x = RouteCleanupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_rib_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteCleanupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteCleanupRequest) ProtoMessage() {}

func (x *RouteCleanupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_rib_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteCleanupRequest.ProtoReflect.Descriptor instead.
func (*RouteCleanupRequest) Descriptor() ([]byte, []int) {
	return file_jnx_routing_rib_service_proto_rawDescGZIP(), []int{7}
}

// [brief]: Route clean up response.
// [detail]: Response message specifying the final status and the text message
// to route clean up request.
type RouteCleanupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [mandatory]:
	// [brief]: Top level return code.
	Status *RpcStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// [mandatory]:
	// [brief]: The API specific return sub-code for the request.
	SubCode StatusCode `protobuf:"varint,2,opt,name=sub_code,json=subCode,proto3,enum=jnx.jet.routing.rib.StatusCode" json:"sub_code,omitempty"`
}

func (x *RouteCleanupResponse) Reset() {
	*x = RouteCleanupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_rib_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteCleanupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteCleanupResponse) ProtoMessage() {}

func (x *RouteCleanupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_rib_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteCleanupResponse.ProtoReflect.Descriptor instead.
func (*RouteCleanupResponse) Descriptor() ([]byte, []int) {
	return file_jnx_routing_rib_service_proto_rawDescGZIP(), []int{8}
}

func (x *RouteCleanupResponse) GetStatus() *RpcStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *RouteCleanupResponse) GetSubCode() StatusCode {
	if x != nil {
		return x.SubCode
	}
	return StatusCode_SUCCESS
}

// [brief]: Route update request message.
// [detail]: Route update request message type with repeated route entries.
type RouteUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [mandatory]:
	// [brief]: One or more programmed routes to update.
	Routes []*RouteEntry `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
}

func (x *RouteUpdateRequest) Reset() {
	*x = RouteUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_rib_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteUpdateRequest) ProtoMessage() {}

func (x *RouteUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_rib_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteUpdateRequest.ProtoReflect.Descriptor instead.
func (*RouteUpdateRequest) Descriptor() ([]byte, []int) {
	return file_jnx_routing_rib_service_proto_rawDescGZIP(), []int{9}
}

func (x *RouteUpdateRequest) GetRoutes() []*RouteEntry {
	if x != nil {
		return x.Routes
	}
	return nil
}

// [brief]: Route delete request message.
// [detail]: Route delete request message type with repeated route match entries to be deleted.
type RouteDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [mandatory]:
	// [brief]: Route parameters for one or more programmed routes to be deleted.
	Keys []*RouteMatch `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *RouteDeleteRequest) Reset() {
	*x = RouteDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_rib_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteDeleteRequest) ProtoMessage() {}

func (x *RouteDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_rib_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteDeleteRequest.ProtoReflect.Descriptor instead.
func (*RouteDeleteRequest) Descriptor() ([]byte, []int) {
	return file_jnx_routing_rib_service_proto_rawDescGZIP(), []int{10}
}

func (x *RouteDeleteRequest) GetKeys() []*RouteMatch {
	if x != nil {
		return x.Keys
	}
	return nil
}

// [brief]: Route get request message.
// [detail]: Route get request message type with the RPC parameters to get the route entries from the route table.
type RouteGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [mandatory]:
	// [brief]: Route matching parameters.
	Key *RouteMatch `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// [brief]: route match type.
	// [detail]: If match_type is EXACT, only routes for the exact destination
	// prefix and prefix length will be matched.
	// If match_type is EXACT_OR_LONGER, routes for the given destination
	// prefix or longer prefixes will be matched.
	// If match_type is BEST, longest prefix match is performed on the prefix.
	// OPTIONAL, default is best.
	MatchType RouteMatchType `protobuf:"varint,2,opt,name=match_type,json=matchType,proto3,enum=jnx.jet.routing.rib.RouteMatchType" json:"match_type,omitempty"`
	// [brief]: active_only.
	// [detail]: If active_only is TRUE, inactive and hidden routes for a
	// matching prefix will be omitted from the results. If FALSE, inactive
	// and hidden routes are also returned. Optional (default is FALSE).
	ActiveOnly bool `protobuf:"varint,3,opt,name=active_only,json=activeOnly,proto3" json:"active_only,omitempty"`
	// [brief]: The format to be used for route table in replies to this request.
	// [default_value]: string
	ReplyTableFormat RouteTableFormat `protobuf:"varint,4,opt,name=reply_table_format,json=replyTableFormat,proto3,enum=jnx.jet.routing.base.RouteTableFormat" json:"reply_table_format,omitempty"`
	// [brief]: route count
	// [detail]: The maximum number of routes requested in each response.
	// Replies will be streamed in multiple RPCs each having no more
	// routes than given by this value. Counts from 1 through the maximum of
	// 1000 may be specified. A value of zero or above 1000 indicates that
	// the server will choose an appropriate. Optional (default 1).
	RouteCount uint32 `protobuf:"varint,5,opt,name=route_count,json=routeCount,proto3" json:"route_count,omitempty"`
}

func (x *RouteGetRequest) Reset() {
	*x = RouteGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_rib_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteGetRequest) ProtoMessage() {}

func (x *RouteGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_rib_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteGetRequest.ProtoReflect.Descriptor instead.
func (*RouteGetRequest) Descriptor() ([]byte, []int) {
	return file_jnx_routing_rib_service_proto_rawDescGZIP(), []int{11}
}

func (x *RouteGetRequest) GetKey() *RouteMatch {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *RouteGetRequest) GetMatchType() RouteMatchType {
	if x != nil {
		return x.MatchType
	}
	return RouteMatchType_BEST
}

func (x *RouteGetRequest) GetActiveOnly() bool {
	if x != nil {
		return x.ActiveOnly
	}
	return false
}

func (x *RouteGetRequest) GetReplyTableFormat() RouteTableFormat {
	if x != nil {
		return x.ReplyTableFormat
	}
	return RouteTableFormat_TABLE_STRING
}

func (x *RouteGetRequest) GetRouteCount() uint32 {
	if x != nil {
		return x.RouteCount
	}
	return 0
}

// [brief]: Route set operation response message containing the status of the operation.
// [detail]: Response always returns the final status (either success or the
// first error encountered) and the number of routes that were successfully
// processed prior to any error or full completion of the request.
type RouteSetOperResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [mandatory]:
	// [brief]: Top level return code.
	Status *RpcStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// [mandatory]:
	// [brief]: The API specific return sub-code for the request.
	SubCode StatusCode `protobuf:"varint,2,opt,name=sub_code,json=subCode,proto3,enum=jnx.jet.routing.rib.StatusCode" json:"sub_code,omitempty"`
	// [brief]: The number of requested operations completed successfully.
	// [detail]: The number of requested operations for which the operation
	// completed successfully. Note that in the case of delete
	// operations with or_longer=TRUE or cookie=0, this is not the number of
	// routes matched and deleted.
	OperationsCompleted uint32 `protobuf:"varint,3,opt,name=operations_completed,json=operationsCompleted,proto3" json:"operations_completed,omitempty"`
}

func (x *RouteSetOperResponse) Reset() {
	*x = RouteSetOperResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_rib_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteSetOperResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteSetOperResponse) ProtoMessage() {}

func (x *RouteSetOperResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_rib_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteSetOperResponse.ProtoReflect.Descriptor instead.
func (*RouteSetOperResponse) Descriptor() ([]byte, []int) {
	return file_jnx_routing_rib_service_proto_rawDescGZIP(), []int{12}
}

func (x *RouteSetOperResponse) GetStatus() *RpcStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *RouteSetOperResponse) GetSubCode() StatusCode {
	if x != nil {
		return x.SubCode
	}
	return StatusCode_SUCCESS
}

func (x *RouteSetOperResponse) GetOperationsCompleted() uint32 {
	if x != nil {
		return x.OperationsCompleted
	}
	return 0
}

// [brief]: Route delete response containing the status of the operation.
// [detail]: Response always returns the final status (either success or the
// first error encountered) and the number of routes that were successfully
// processed prior to any error or full completion of the request.
type RouteDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [mandatory]:
	// [brief]: Top level return code.
	Status *RpcStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// [mandatory]:
	// [brief]: The API specific return sub-code for the request.
	SubCode StatusCode `protobuf:"varint,2,opt,name=sub_code,json=subCode,proto3,enum=jnx.jet.routing.rib.StatusCode" json:"sub_code,omitempty"`
	// [brief]: The number of requested operations completed successfully.
	// [detail]: The number of requested operations for which the operation
	// completed successfully. Note that in the case of delete
	// operations with or_longer=TRUE or cookie=0, this is not the number of
	// routes matched and deleted.
	OperationsCompleted uint32 `protobuf:"varint,3,opt,name=operations_completed,json=operationsCompleted,proto3" json:"operations_completed,omitempty"`
}

func (x *RouteDeleteResponse) Reset() {
	*x = RouteDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_rib_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteDeleteResponse) ProtoMessage() {}

func (x *RouteDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_rib_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteDeleteResponse.ProtoReflect.Descriptor instead.
func (*RouteDeleteResponse) Descriptor() ([]byte, []int) {
	return file_jnx_routing_rib_service_proto_rawDescGZIP(), []int{13}
}

func (x *RouteDeleteResponse) GetStatus() *RpcStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *RouteDeleteResponse) GetSubCode() StatusCode {
	if x != nil {
		return x.SubCode
	}
	return StatusCode_SUCCESS
}

func (x *RouteDeleteResponse) GetOperationsCompleted() uint32 {
	if x != nil {
		return x.OperationsCompleted
	}
	return 0
}

// [brief]: Route get response message.
// [detail]: The response contains the status of the operation and the full or
// partial set of matching routes, depending on how many response RPCs the
// stream of routes is split among.
type RouteGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [mandatory]:
	// [brief]: Top level return code.
	Status *RpcStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// [brief]: The final return code for the request.
	SubCode StatusCode `protobuf:"varint,2,opt,name=sub_code,json=subCode,proto3,enum=jnx.jet.routing.rib.StatusCode" json:"sub_code,omitempty"`
	// [brief]:  One or more matching routes.
	Routes []*RouteEntry `protobuf:"bytes,3,rep,name=routes,proto3" json:"routes,omitempty"`
}

func (x *RouteGetResponse) Reset() {
	*x = RouteGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_rib_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteGetResponse) ProtoMessage() {}

func (x *RouteGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_rib_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteGetResponse.ProtoReflect.Descriptor instead.
func (*RouteGetResponse) Descriptor() ([]byte, []int) {
	return file_jnx_routing_rib_service_proto_rawDescGZIP(), []int{14}
}

func (x *RouteGetResponse) GetStatus() *RpcStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *RouteGetResponse) GetSubCode() StatusCode {
	if x != nil {
		return x.SubCode
	}
	return StatusCode_SUCCESS
}

func (x *RouteGetResponse) GetRoutes() []*RouteEntry {
	if x != nil {
		return x.Routes
	}
	return nil
}

// [brief]: Route subscribe policy.
// [detail]: Policy to be used for filtering routes send in
// RouteSubscribeResponse. This policy has to be configured using CLI or
// NETCONF as currently programmable APIs do not support configuration of
// policy statements. This is an optional parameter. If not set then all routes
// for the registered table will be sent in RouteSubscribeResponse message.
type RouteSubscribePolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Policy name.
	Policy string `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *RouteSubscribePolicy) Reset() {
	*x = RouteSubscribePolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_rib_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteSubscribePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteSubscribePolicy) ProtoMessage() {}

func (x *RouteSubscribePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_rib_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteSubscribePolicy.ProtoReflect.Descriptor instead.
func (*RouteSubscribePolicy) Descriptor() ([]byte, []int) {
	return file_jnx_routing_rib_service_proto_rawDescGZIP(), []int{15}
}

func (x *RouteSubscribePolicy) GetPolicy() string {
	if x != nil {
		return x.Policy
	}
	return ""
}

// [brief]: Route subscribe flags.
// [detail]: Flags that can be used to change the behavior of routes received
// via the RouteSubscribeResponse. This can be like requesting End of Record.
// Matches RPD_MSG_FLASH_SUBSCRIBE_REQUEST*.
type RouteSubscribeFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Subscribe End of Record.
	RequestEor bool `protobuf:"varint,1,opt,name=request_eor,json=requestEor,proto3" json:"request_eor,omitempty"`
	// [brief]: Requested by clients to NOT send them EOR, by default EOR
	// will be sent to client.
	NoEorToClient bool `protobuf:"varint,2,opt,name=no_eor_to_client,json=noEorToClient,proto3" json:"no_eor_to_client,omitempty"`
	// [brief]: clients can use this flag to inform server not send withdrawal
	// messages when last filter is deleted by this client for given table.
	RequestNoWithdrawal bool `protobuf:"varint,3,opt,name=request_no_withdrawal,json=requestNoWithdrawal,proto3" json:"request_no_withdrawal,omitempty"`
	// [brief]: Set when subscribe request is form Junos Process ESWD.
	// [brief]: The following client identification is for backward compatibility
	// and not to be used by new JAPI clients.
	// To be set when subscribe request is form Junos Process ESWD.
	RequestFromEswd bool `protobuf:"varint,4,opt,name=request_from_eswd,json=requestFromEswd,proto3" json:"request_from_eswd,omitempty"`
	// [brief]: To be set when subscribe request is form Junos Process MCSNOOPD.
	RequestFromMcsnoopd bool `protobuf:"varint,5,opt,name=request_from_mcsnoopd,json=requestFromMcsnoopd,proto3" json:"request_from_mcsnoopd,omitempty"`
	// [brief]: To be set when subscribe request is form Junos Process VRRPD.
	RequestFromVrrpd bool `protobuf:"varint,6,opt,name=request_from_vrrpd,json=requestFromVrrpd,proto3" json:"request_from_vrrpd,omitempty"`
	// [brief]: If this flag is set, client's re-registration triggers all
	// routes to be notified once again.
	RequestForceReNotif bool `protobuf:"varint,7,opt,name=request_force_re_notif,json=requestForceReNotif,proto3" json:"request_force_re_notif,omitempty"`
}

func (x *RouteSubscribeFlags) Reset() {
	*x = RouteSubscribeFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_rib_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteSubscribeFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteSubscribeFlags) ProtoMessage() {}

func (x *RouteSubscribeFlags) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_rib_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteSubscribeFlags.ProtoReflect.Descriptor instead.
func (*RouteSubscribeFlags) Descriptor() ([]byte, []int) {
	return file_jnx_routing_rib_service_proto_rawDescGZIP(), []int{16}
}

func (x *RouteSubscribeFlags) GetRequestEor() bool {
	if x != nil {
		return x.RequestEor
	}
	return false
}

func (x *RouteSubscribeFlags) GetNoEorToClient() bool {
	if x != nil {
		return x.NoEorToClient
	}
	return false
}

func (x *RouteSubscribeFlags) GetRequestNoWithdrawal() bool {
	if x != nil {
		return x.RequestNoWithdrawal
	}
	return false
}

func (x *RouteSubscribeFlags) GetRequestFromEswd() bool {
	if x != nil {
		return x.RequestFromEswd
	}
	return false
}

func (x *RouteSubscribeFlags) GetRequestFromMcsnoopd() bool {
	if x != nil {
		return x.RequestFromMcsnoopd
	}
	return false
}

func (x *RouteSubscribeFlags) GetRequestFromVrrpd() bool {
	if x != nil {
		return x.RequestFromVrrpd
	}
	return false
}

func (x *RouteSubscribeFlags) GetRequestForceReNotif() bool {
	if x != nil {
		return x.RequestForceReNotif
	}
	return false
}

// [brief]: Route subscribe request message.
// [detail]: Request message to subscribe for route monitoring. The
// subscribe denotes the routing table for which route subscribe is requested.
// Parameters in the subscribe request like subscribe policy can be set to
// influence which of the routes of the table are sent in the subscribe
// response message.
type RouteSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: Name of the route table for which the route subscribe is
	// requested.
	TableName *RouteTableName `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	// [brief]: Subscribe operation to be performed.
	Operation RouteSubscribeOp `protobuf:"varint,2,opt,name=operation,proto3,enum=jnx.jet.routing.rib.RouteSubscribeOp" json:"operation,omitempty"`
	// [brief]: Route subscribe flags.
	Flag *RouteSubscribeFlags `protobuf:"bytes,3,opt,name=flag,proto3" json:"flag,omitempty"`
	// [brief]: Policy used to filter notifications.
	// [default]: By Default all routes of the table subscribed is sent in the
	// response message. Policy can be used for filtering which routes of the
	// table are sent. For example, a policy can be defined using CLI to
	// receive only static routes in the table.
	Policy *RouteSubscribePolicy `protobuf:"bytes,4,opt,name=policy,proto3" json:"policy,omitempty"`
	// [brief]: Context expected by clients to be sent back in response message.
	Context uint32 `protobuf:"varint,5,opt,name=context,proto3" json:"context,omitempty"`
	// [brief]: Number of routes to be packed in subscribe response message.
	// [detail]: This packing is done only when a new rib walk is started till the end
	// of table is reached.
	RouteCount uint32 `protobuf:"varint,6,opt,name=route_count,json=routeCount,proto3" json:"route_count,omitempty"`
}

func (x *RouteSubscribeRequest) Reset() {
	*x = RouteSubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_rib_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteSubscribeRequest) ProtoMessage() {}

func (x *RouteSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_rib_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteSubscribeRequest.ProtoReflect.Descriptor instead.
func (*RouteSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_jnx_routing_rib_service_proto_rawDescGZIP(), []int{17}
}

func (x *RouteSubscribeRequest) GetTableName() *RouteTableName {
	if x != nil {
		return x.TableName
	}
	return nil
}

func (x *RouteSubscribeRequest) GetOperation() RouteSubscribeOp {
	if x != nil {
		return x.Operation
	}
	return RouteSubscribeOp_SUBSCRIBE_NONE
}

func (x *RouteSubscribeRequest) GetFlag() *RouteSubscribeFlags {
	if x != nil {
		return x.Flag
	}
	return nil
}

func (x *RouteSubscribeRequest) GetPolicy() *RouteSubscribePolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *RouteSubscribeRequest) GetContext() uint32 {
	if x != nil {
		return x.Context
	}
	return 0
}

func (x *RouteSubscribeRequest) GetRouteCount() uint32 {
	if x != nil {
		return x.RouteCount
	}
	return 0
}

// [brief]: Route subscribe entry.
// [detail]: Route subscribe entry is sent to the client in the subscribe
// response message.
type RouteSubscribeEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [brief]: The subscribe operation.
	Operation RouteSubscribeRouteOp `protobuf:"varint,1,opt,name=operation,proto3,enum=jnx.jet.routing.rib.RouteSubscribeRouteOp" json:"operation,omitempty"`
	// [brief]: route entries that are in the subscribe response.
	Route *RouteEntry `protobuf:"bytes,2,opt,name=route,proto3" json:"route,omitempty"`
}

func (x *RouteSubscribeEntry) Reset() {
	*x = RouteSubscribeEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_rib_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteSubscribeEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteSubscribeEntry) ProtoMessage() {}

func (x *RouteSubscribeEntry) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_rib_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteSubscribeEntry.ProtoReflect.Descriptor instead.
func (*RouteSubscribeEntry) Descriptor() ([]byte, []int) {
	return file_jnx_routing_rib_service_proto_rawDescGZIP(), []int{18}
}

func (x *RouteSubscribeEntry) GetOperation() RouteSubscribeRouteOp {
	if x != nil {
		return x.Operation
	}
	return RouteSubscribeRouteOp_ROUTE_SUBSCRIBE_OP_NONE
}

func (x *RouteSubscribeEntry) GetRoute() *RouteEntry {
	if x != nil {
		return x.Route
	}
	return nil
}

// [brief]: Route subscribe response.
// [detail]: Response message which contains the routes of the table
// subscribed for monitoring.
type RouteSubscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [mandatory]:
	// [brief]: Top level return code.
	Status *RpcStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// [brief]: Return code to indicate operation status.
	SubCode StatusCode `protobuf:"varint,2,opt,name=sub_code,json=subCode,proto3,enum=jnx.jet.routing.rib.StatusCode" json:"sub_code,omitempty"`
	// [brief]: Context send by clients in the subscribe request.
	Context uint32 `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	// [brief]: Route table to which the route entries of subscribe routes
	//  belong.
	TableName *RouteTableName `protobuf:"bytes,4,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	// [brief]: One or more route entries to be sent to client.
	Routes []*RouteSubscribeEntry `protobuf:"bytes,5,rep,name=routes,proto3" json:"routes,omitempty"`
}

func (x *RouteSubscribeResponse) Reset() {
	*x = RouteSubscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_routing_rib_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteSubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteSubscribeResponse) ProtoMessage() {}

func (x *RouteSubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_routing_rib_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteSubscribeResponse.ProtoReflect.Descriptor instead.
func (*RouteSubscribeResponse) Descriptor() ([]byte, []int) {
	return file_jnx_routing_rib_service_proto_rawDescGZIP(), []int{19}
}

func (x *RouteSubscribeResponse) GetStatus() *RpcStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *RouteSubscribeResponse) GetSubCode() StatusCode {
	if x != nil {
		return x.SubCode
	}
	return StatusCode_SUCCESS
}

func (x *RouteSubscribeResponse) GetContext() uint32 {
	if x != nil {
		return x.Context
	}
	return 0
}

func (x *RouteSubscribeResponse) GetTableName() *RouteTableName {
	if x != nil {
		return x.TableName
	}
	return nil
}

func (x *RouteSubscribeResponse) GetRoutes() []*RouteSubscribeEntry {
	if x != nil {
		return x.Routes
	}
	return nil
}

var File_jnx_routing_rib_service_proto protoreflect.FileDescriptor

var file_jnx_routing_rib_service_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x6a, 0x6e, 0x78, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x69,
	0x62, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x13, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x72, 0x69, 0x62, 0x1a, 0x1b, 0x6a, 0x6e, 0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x6a, 0x6e, 0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x6a, 0x6e, 0x78, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x6a, 0x6e,
	0x78, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62,
	0x6c, 0x65, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcb, 0x01, 0x0a, 0x0a, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x45, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x26, 0x0a,
	0x0f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x36, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x22, 0xac, 0x03, 0x0a, 0x0c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x4d, 0x0a, 0x0f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0d,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a,
	0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x0a,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x62, 0x0a, 0x17, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x72, 0x69, 0x62, 0x2e, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x15, 0x66,
	0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x22, 0x4d, 0x0a, 0x0c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4e, 0x65, 0x78,
	0x74, 0x68, 0x6f, 0x70, 0x12, 0x3d, 0x0a, 0x08, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x72, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x08, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x73, 0x22, 0x86, 0x04, 0x0a, 0x0f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6a,
	0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x72,
	0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x42, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x72, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x48, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x72, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x1a, 0x5c,
	0x0a, 0x10, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x55, 0x0a, 0x09,
	0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x57, 0x0a, 0x0b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x84, 0x02, 0x0a,
	0x0a, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a,
	0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x72, 0x69, 0x62, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b,
	0x0a, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x72, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x68,
	0x6f, 0x70, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x12, 0x40, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e,
	0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x44, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x72, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x22, 0xd9, 0x02, 0x0a, 0x16, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x64,
	0x0a, 0x1f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65,
	0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x1c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x74, 0x0a, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x43, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x72, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0x63, 0x0a, 0x17, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xb4, 0x01, 0x0a, 0x17, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x70, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a,
	0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x72, 0x69, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75,
	0x6d, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43,
	0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x85, 0x01,
	0x0a, 0x14, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x75, 0x62,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x72, 0x69,
	0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x73, 0x75,
	0x62, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x4d, 0x0a, 0x12, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x06, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x72, 0x69,
	0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x22, 0x49, 0x0a, 0x12, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x6b, 0x65,
	0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a,
	0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x72, 0x69, 0x62, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22,
	0xa0, 0x02, 0x0a, 0x0f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x72, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x72, 0x69, 0x62,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x54, 0x0a, 0x12, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65,
	0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52,
	0x10, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xb8, 0x01, 0x0a, 0x14, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x65, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x70, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a,
	0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x72, 0x69, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0xb7, 0x01,
	0x0a, 0x13, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x72, 0x69, 0x62,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0xba, 0x01, 0x0a, 0x10, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a,
	0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x70,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x3a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x72, 0x69, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x72, 0x69,
	0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x22, 0x2e, 0x0a, 0x14, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x22, 0xd6, 0x02, 0x0a, 0x13, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x6f, 0x72, 0x12, 0x27, 0x0a,
	0x10, 0x6e, 0x6f, 0x5f, 0x65, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6e, 0x6f, 0x45, 0x6f, 0x72, 0x54, 0x6f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x6e, 0x6f, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x6f,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x65, 0x73, 0x77, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x72,
	0x6f, 0x6d, 0x45, 0x73, 0x77, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6d, 0x63, 0x73, 0x6e, 0x6f, 0x6f, 0x70, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x72,
	0x6f, 0x6d, 0x4d, 0x63, 0x73, 0x6e, 0x6f, 0x6f, 0x70, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x76, 0x72, 0x72, 0x70, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46,
	0x72, 0x6f, 0x6d, 0x56, 0x72, 0x72, 0x70, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x5f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x22, 0xdd, 0x02,
	0x0a, 0x15, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x09,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x72, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x4f, 0x70, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3c, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x72, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12,
	0x41, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x72, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x96, 0x01,
	0x0a, 0x13, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a,
	0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x72, 0x69, 0x62, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x4f, 0x70, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x35, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x72, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x22, 0xa8, 0x02, 0x0a, 0x16, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x52, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x72, 0x69, 0x62, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x43, 0x0a, 0x0a, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x40, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x72, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2a, 0xcc, 0x06, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x4f, 0x5f, 0x4f, 0x50, 0x10,
	0x03, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x4f, 0x50,
	0x53, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x50,
	0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x07, 0x12,
	0x18, 0x0a, 0x14, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x4c, 0x45, 0x4e, 0x5f, 0x54, 0x4f,
	0x4f, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x45,
	0x46, 0x49, 0x58, 0x5f, 0x4c, 0x45, 0x4e, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47,
	0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x45, 0x58, 0x54, 0x48,
	0x4f, 0x50, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17,
	0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x45, 0x58,
	0x54, 0x48, 0x4f, 0x50, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45,
	0x44, 0x10, 0x0d, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x49,
	0x53, 0x54, 0x53, 0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x0f, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x10,
	0x12, 0x14, 0x0a, 0x10, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x11, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45,
	0x41, 0x44, 0x59, 0x10, 0x12, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x47, 0x41,
	0x49, 0x4e, 0x10, 0x13, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x14, 0x12, 0x17, 0x0a,
	0x13, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f,
	0x52, 0x54, 0x45, 0x44, 0x10, 0x15, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x16, 0x12, 0x15, 0x0a, 0x11, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x17, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53,
	0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x18, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x4f, 0x55,
	0x54, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x45, 0x4e, 0x4f,
	0x45, 0x4e, 0x54, 0x10, 0x19, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x53,
	0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x1a, 0x12, 0x30, 0x0a, 0x2c, 0x52, 0x4f, 0x55,
	0x54, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x52, 0x45, 0x53,
	0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x1b, 0x12, 0x1a, 0x0a, 0x16, 0x52,
	0x4f, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x45,
	0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x1c, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x50, 0x4c, 0x53, 0x5f,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x1d, 0x12,
	0x17, 0x0a, 0x13, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x1e, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x4c, 0x52, 0x45,
	0x41, 0x44, 0x59, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x1f, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x42,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x20, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x4c, 0x45, 0x58, 0x49, 0x42,
	0x4c, 0x45, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x21, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48,
	0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x22,
	0x2a, 0xeb, 0x01, 0x0a, 0x0f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x54, 0x50, 0x52, 0x45, 0x46, 0x5f, 0x44,
	0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x54, 0x50, 0x52, 0x45,
	0x46, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x54,
	0x50, 0x52, 0x45, 0x46, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x52,
	0x54, 0x50, 0x52, 0x45, 0x46, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x45, 0x44, 0x5f, 0x49, 0x53,
	0x49, 0x53, 0x10, 0x0e, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x54, 0x50, 0x52, 0x45, 0x46, 0x5f, 0x49,
	0x53, 0x49, 0x53, 0x5f, 0x4c, 0x31, 0x10, 0x0f, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x54, 0x50, 0x52,
	0x45, 0x46, 0x5f, 0x49, 0x53, 0x49, 0x53, 0x5f, 0x4c, 0x32, 0x10, 0x12, 0x12, 0x0e, 0x0a, 0x0a,
	0x52, 0x54, 0x50, 0x52, 0x45, 0x46, 0x5f, 0x52, 0x49, 0x50, 0x10, 0x64, 0x12, 0x10, 0x0a, 0x0c,
	0x52, 0x54, 0x50, 0x52, 0x45, 0x46, 0x5f, 0x52, 0x49, 0x50, 0x4e, 0x47, 0x10, 0x64, 0x12, 0x0f,
	0x0a, 0x0b, 0x52, 0x54, 0x50, 0x52, 0x45, 0x46, 0x5f, 0x49, 0x47, 0x4d, 0x50, 0x10, 0x73, 0x12,
	0x14, 0x0a, 0x0f, 0x52, 0x54, 0x50, 0x52, 0x45, 0x46, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x5f, 0x41,
	0x53, 0x45, 0x10, 0x96, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x52, 0x54, 0x50, 0x52, 0x45, 0x46, 0x5f,
	0x42, 0x47, 0x50, 0x5f, 0x45, 0x58, 0x54, 0x10, 0xaa, 0x01, 0x1a, 0x02, 0x10, 0x01, 0x2a, 0x3a,
	0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x42, 0x45, 0x53, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x58,
	0x41, 0x43, 0x54, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x58, 0x41, 0x43, 0x54, 0x5f, 0x4f,
	0x52, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x45, 0x52, 0x10, 0x02, 0x2a, 0x4f, 0x0a, 0x10, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4f, 0x70, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f,
	0x41, 0x44, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49,
	0x42, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x2a, 0xd8, 0x01, 0x0a, 0x15,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x4f, 0x70, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x53,
	0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x4f, 0x50, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53,
	0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x4f, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x01, 0x12, 0x1d,
	0x0a, 0x19, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42,
	0x45, 0x5f, 0x4f, 0x50, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x10, 0x02, 0x12, 0x1d, 0x0a,
	0x19, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x42, 0x49, 0x42, 0x45,
	0x5f, 0x4f, 0x50, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f,
	0x4f, 0x50, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x10,
	0x04, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43,
	0x52, 0x49, 0x42, 0x45, 0x5f, 0x4f, 0x50, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x4f, 0x46, 0x5f, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x05, 0x32, 0xb8, 0x06, 0x0a, 0x03, 0x52, 0x69, 0x62, 0x12, 0x6e,
	0x0a, 0x0f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x12, 0x2b, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x72, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x72, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65,
	0x0a, 0x0c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x12, 0x28,
	0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x72, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a,
	0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x72, 0x69, 0x62, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x41, 0x64,
	0x64, 0x12, 0x27, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x72, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6a, 0x6e, 0x78,
	0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x72, 0x69, 0x62,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x0b, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x12, 0x27, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x72, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x72, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x65, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x0b,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x6a, 0x6e,
	0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x72, 0x69,
	0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x72, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x62, 0x0a, 0x0b, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x27, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x72, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6a, 0x6e, 0x78, 0x2e,
	0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x72, 0x69, 0x62, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x47, 0x65,
	0x74, 0x12, 0x24, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x72, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65,
	0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x72, 0x69, 0x62, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x6d, 0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x12, 0x2a, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x72, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x6a, 0x6e, 0x78, 0x2e, 0x6a, 0x65, 0x74, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x72, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30,
	0x01, 0x42, 0x24, 0x5a, 0x11, 0x6c, 0x61, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x82, 0xb5, 0x18, 0x05, 0x30, 0x2e, 0x32, 0x2e, 0x31, 0x8a,
	0xb5, 0x18, 0x04, 0x31, 0x39, 0x2e, 0x34, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_jnx_routing_rib_service_proto_rawDescOnce sync.Once
	file_jnx_routing_rib_service_proto_rawDescData = file_jnx_routing_rib_service_proto_rawDesc
)

func file_jnx_routing_rib_service_proto_rawDescGZIP() []byte {
	file_jnx_routing_rib_service_proto_rawDescOnce.Do(func() {
		file_jnx_routing_rib_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_jnx_routing_rib_service_proto_rawDescData)
	})
	return file_jnx_routing_rib_service_proto_rawDescData
}

var file_jnx_routing_rib_service_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_jnx_routing_rib_service_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_jnx_routing_rib_service_proto_goTypes = []interface{}{
	(StatusCode)(0),                 // 0: jnx.jet.routing.rib.StatusCode
	(RoutePreference)(0),            // 1: jnx.jet.routing.rib.RoutePreference
	(RouteMatchType)(0),             // 2: jnx.jet.routing.rib.RouteMatchType
	(RouteSubscribeOp)(0),           // 3: jnx.jet.routing.rib.RouteSubscribeOp
	(RouteSubscribeRouteOp)(0),      // 4: jnx.jet.routing.rib.RouteSubscribeRouteOp
	(*RouteMatch)(nil),              // 5: jnx.jet.routing.rib.RouteMatch
	(*RouteGateway)(nil),            // 6: jnx.jet.routing.rib.RouteGateway
	(*RouteNexthop)(nil),            // 7: jnx.jet.routing.rib.RouteNexthop
	(*RouteAttributes)(nil),         // 8: jnx.jet.routing.rib.RouteAttributes
	(*RouteEntry)(nil),              // 9: jnx.jet.routing.rib.RouteEntry
	(*RouteInitializeRequest)(nil),  // 10: jnx.jet.routing.rib.RouteInitializeRequest
	(*RouteInitializeResponse)(nil), // 11: jnx.jet.routing.rib.RouteInitializeResponse
	(*RouteCleanupRequest)(nil),     // 12: jnx.jet.routing.rib.RouteCleanupRequest
	(*RouteCleanupResponse)(nil),    // 13: jnx.jet.routing.rib.RouteCleanupResponse
	(*RouteUpdateRequest)(nil),      // 14: jnx.jet.routing.rib.RouteUpdateRequest
	(*RouteDeleteRequest)(nil),      // 15: jnx.jet.routing.rib.RouteDeleteRequest
	(*RouteGetRequest)(nil),         // 16: jnx.jet.routing.rib.RouteGetRequest
	(*RouteSetOperResponse)(nil),    // 17: jnx.jet.routing.rib.RouteSetOperResponse
	(*RouteDeleteResponse)(nil),     // 18: jnx.jet.routing.rib.RouteDeleteResponse
	(*RouteGetResponse)(nil),        // 19: jnx.jet.routing.rib.RouteGetResponse
	(*RouteSubscribePolicy)(nil),    // 20: jnx.jet.routing.rib.RouteSubscribePolicy
	(*RouteSubscribeFlags)(nil),     // 21: jnx.jet.routing.rib.RouteSubscribeFlags
	(*RouteSubscribeRequest)(nil),   // 22: jnx.jet.routing.rib.RouteSubscribeRequest
	(*RouteSubscribeEntry)(nil),     // 23: jnx.jet.routing.rib.RouteSubscribeEntry
	(*RouteSubscribeResponse)(nil),  // 24: jnx.jet.routing.rib.RouteSubscribeResponse
	nil,                             // 25: jnx.jet.routing.rib.RouteAttributes.PreferencesEntry
	nil,                             // 26: jnx.jet.routing.rib.RouteAttributes.TagsEntry
	nil,                             // 27: jnx.jet.routing.rib.RouteAttributes.ColorsEntry
	nil,                             // 28: jnx.jet.routing.rib.RouteInitializeRequest.DefaultPreferencesEntry
	(*NetworkAddress)(nil),          // 29: jnx.jet.routing.base.NetworkAddress
	(*RouteTable)(nil),              // 30: jnx.jet.routing.base.RouteTable
	(*LabelStack)(nil),              // 31: jnx.jet.routing.base.LabelStack
	(*FlexibleTunnelProfile)(nil),   // 32: jnx.jet.routing.rib.FlexibleTunnelProfile
	(RouteProtoType)(0),             // 33: jnx.jet.routing.base.RouteProtoType
	(AddressFormat)(0),              // 34: jnx.jet.common.AddressFormat
	(*RpcStatus)(nil),               // 35: jnx.jet.common.RpcStatus
	(RouteTableFormat)(0),           // 36: jnx.jet.routing.base.RouteTableFormat
	(*RouteTableName)(nil),          // 37: jnx.jet.routing.base.RouteTableName
	(*wrapperspb.UInt32Value)(nil),  // 38: google.protobuf.UInt32Value
}
var file_jnx_routing_rib_service_proto_depIdxs = []int32{
	29, // 0: jnx.jet.routing.rib.RouteMatch.dest_prefix:type_name -> jnx.jet.routing.base.NetworkAddress
	30, // 1: jnx.jet.routing.rib.RouteMatch.table:type_name -> jnx.jet.routing.base.RouteTable
	29, // 2: jnx.jet.routing.rib.RouteGateway.gateway_address:type_name -> jnx.jet.routing.base.NetworkAddress
	29, // 3: jnx.jet.routing.rib.RouteGateway.local_address:type_name -> jnx.jet.routing.base.NetworkAddress
	31, // 4: jnx.jet.routing.rib.RouteGateway.label_stack:type_name -> jnx.jet.routing.base.LabelStack
	32, // 5: jnx.jet.routing.rib.RouteGateway.flexible_tunnel_profile:type_name -> jnx.jet.routing.rib.FlexibleTunnelProfile
	6,  // 6: jnx.jet.routing.rib.RouteNexthop.gateways:type_name -> jnx.jet.routing.rib.RouteGateway
	25, // 7: jnx.jet.routing.rib.RouteAttributes.preferences:type_name -> jnx.jet.routing.rib.RouteAttributes.PreferencesEntry
	26, // 8: jnx.jet.routing.rib.RouteAttributes.tags:type_name -> jnx.jet.routing.rib.RouteAttributes.TagsEntry
	27, // 9: jnx.jet.routing.rib.RouteAttributes.colors:type_name -> jnx.jet.routing.rib.RouteAttributes.ColorsEntry
	5,  // 10: jnx.jet.routing.rib.RouteEntry.key:type_name -> jnx.jet.routing.rib.RouteMatch
	7,  // 11: jnx.jet.routing.rib.RouteEntry.nexthop:type_name -> jnx.jet.routing.rib.RouteNexthop
	33, // 12: jnx.jet.routing.rib.RouteEntry.protocol:type_name -> jnx.jet.routing.base.RouteProtoType
	8,  // 13: jnx.jet.routing.rib.RouteEntry.attributes:type_name -> jnx.jet.routing.rib.RouteAttributes
	34, // 14: jnx.jet.routing.rib.RouteInitializeRequest.default_response_address_format:type_name -> jnx.jet.common.AddressFormat
	28, // 15: jnx.jet.routing.rib.RouteInitializeRequest.default_preferences:type_name -> jnx.jet.routing.rib.RouteInitializeRequest.DefaultPreferencesEntry
	35, // 16: jnx.jet.routing.rib.RouteInitializeResponse.status:type_name -> jnx.jet.common.RpcStatus
	0,  // 17: jnx.jet.routing.rib.RouteInitializeResponse.sub_code:type_name -> jnx.jet.routing.rib.StatusCode
	35, // 18: jnx.jet.routing.rib.RouteCleanupResponse.status:type_name -> jnx.jet.common.RpcStatus
	0,  // 19: jnx.jet.routing.rib.RouteCleanupResponse.sub_code:type_name -> jnx.jet.routing.rib.StatusCode
	9,  // 20: jnx.jet.routing.rib.RouteUpdateRequest.routes:type_name -> jnx.jet.routing.rib.RouteEntry
	5,  // 21: jnx.jet.routing.rib.RouteDeleteRequest.keys:type_name -> jnx.jet.routing.rib.RouteMatch
	5,  // 22: jnx.jet.routing.rib.RouteGetRequest.key:type_name -> jnx.jet.routing.rib.RouteMatch
	2,  // 23: jnx.jet.routing.rib.RouteGetRequest.match_type:type_name -> jnx.jet.routing.rib.RouteMatchType
	36, // 24: jnx.jet.routing.rib.RouteGetRequest.reply_table_format:type_name -> jnx.jet.routing.base.RouteTableFormat
	35, // 25: jnx.jet.routing.rib.RouteSetOperResponse.status:type_name -> jnx.jet.common.RpcStatus
	0,  // 26: jnx.jet.routing.rib.RouteSetOperResponse.sub_code:type_name -> jnx.jet.routing.rib.StatusCode
	35, // 27: jnx.jet.routing.rib.RouteDeleteResponse.status:type_name -> jnx.jet.common.RpcStatus
	0,  // 28: jnx.jet.routing.rib.RouteDeleteResponse.sub_code:type_name -> jnx.jet.routing.rib.StatusCode
	35, // 29: jnx.jet.routing.rib.RouteGetResponse.status:type_name -> jnx.jet.common.RpcStatus
	0,  // 30: jnx.jet.routing.rib.RouteGetResponse.sub_code:type_name -> jnx.jet.routing.rib.StatusCode
	9,  // 31: jnx.jet.routing.rib.RouteGetResponse.routes:type_name -> jnx.jet.routing.rib.RouteEntry
	37, // 32: jnx.jet.routing.rib.RouteSubscribeRequest.table_name:type_name -> jnx.jet.routing.base.RouteTableName
	3,  // 33: jnx.jet.routing.rib.RouteSubscribeRequest.operation:type_name -> jnx.jet.routing.rib.RouteSubscribeOp
	21, // 34: jnx.jet.routing.rib.RouteSubscribeRequest.flag:type_name -> jnx.jet.routing.rib.RouteSubscribeFlags
	20, // 35: jnx.jet.routing.rib.RouteSubscribeRequest.policy:type_name -> jnx.jet.routing.rib.RouteSubscribePolicy
	4,  // 36: jnx.jet.routing.rib.RouteSubscribeEntry.operation:type_name -> jnx.jet.routing.rib.RouteSubscribeRouteOp
	9,  // 37: jnx.jet.routing.rib.RouteSubscribeEntry.route:type_name -> jnx.jet.routing.rib.RouteEntry
	35, // 38: jnx.jet.routing.rib.RouteSubscribeResponse.status:type_name -> jnx.jet.common.RpcStatus
	0,  // 39: jnx.jet.routing.rib.RouteSubscribeResponse.sub_code:type_name -> jnx.jet.routing.rib.StatusCode
	37, // 40: jnx.jet.routing.rib.RouteSubscribeResponse.table_name:type_name -> jnx.jet.routing.base.RouteTableName
	23, // 41: jnx.jet.routing.rib.RouteSubscribeResponse.routes:type_name -> jnx.jet.routing.rib.RouteSubscribeEntry
	38, // 42: jnx.jet.routing.rib.RouteAttributes.PreferencesEntry.value:type_name -> google.protobuf.UInt32Value
	38, // 43: jnx.jet.routing.rib.RouteAttributes.TagsEntry.value:type_name -> google.protobuf.UInt32Value
	38, // 44: jnx.jet.routing.rib.RouteAttributes.ColorsEntry.value:type_name -> google.protobuf.UInt32Value
	38, // 45: jnx.jet.routing.rib.RouteInitializeRequest.DefaultPreferencesEntry.value:type_name -> google.protobuf.UInt32Value
	10, // 46: jnx.jet.routing.rib.Rib.RouteInitialize:input_type -> jnx.jet.routing.rib.RouteInitializeRequest
	12, // 47: jnx.jet.routing.rib.Rib.RouteCleanup:input_type -> jnx.jet.routing.rib.RouteCleanupRequest
	14, // 48: jnx.jet.routing.rib.Rib.RouteAdd:input_type -> jnx.jet.routing.rib.RouteUpdateRequest
	14, // 49: jnx.jet.routing.rib.Rib.RouteModify:input_type -> jnx.jet.routing.rib.RouteUpdateRequest
	14, // 50: jnx.jet.routing.rib.Rib.RouteUpdate:input_type -> jnx.jet.routing.rib.RouteUpdateRequest
	15, // 51: jnx.jet.routing.rib.Rib.RouteDelete:input_type -> jnx.jet.routing.rib.RouteDeleteRequest
	16, // 52: jnx.jet.routing.rib.Rib.RouteGet:input_type -> jnx.jet.routing.rib.RouteGetRequest
	22, // 53: jnx.jet.routing.rib.Rib.RouteSubscribe:input_type -> jnx.jet.routing.rib.RouteSubscribeRequest
	11, // 54: jnx.jet.routing.rib.Rib.RouteInitialize:output_type -> jnx.jet.routing.rib.RouteInitializeResponse
	13, // 55: jnx.jet.routing.rib.Rib.RouteCleanup:output_type -> jnx.jet.routing.rib.RouteCleanupResponse
	17, // 56: jnx.jet.routing.rib.Rib.RouteAdd:output_type -> jnx.jet.routing.rib.RouteSetOperResponse
	17, // 57: jnx.jet.routing.rib.Rib.RouteModify:output_type -> jnx.jet.routing.rib.RouteSetOperResponse
	17, // 58: jnx.jet.routing.rib.Rib.RouteUpdate:output_type -> jnx.jet.routing.rib.RouteSetOperResponse
	18, // 59: jnx.jet.routing.rib.Rib.RouteDelete:output_type -> jnx.jet.routing.rib.RouteDeleteResponse
	19, // 60: jnx.jet.routing.rib.Rib.RouteGet:output_type -> jnx.jet.routing.rib.RouteGetResponse
	24, // 61: jnx.jet.routing.rib.Rib.RouteSubscribe:output_type -> jnx.jet.routing.rib.RouteSubscribeResponse
	54, // [54:62] is the sub-list for method output_type
	46, // [46:54] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_jnx_routing_rib_service_proto_init() }
func file_jnx_routing_rib_service_proto_init() {
	if File_jnx_routing_rib_service_proto != nil {
		return
	}
	file_jnx_common_addr_types_proto_init()
	file_jnx_common_base_types_proto_init()
	file_jnx_routing_base_types_proto_init()
	file_jnx_routing_flexible_tunnel_profile_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_jnx_routing_rib_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_rib_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteGateway); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_rib_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteNexthop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_rib_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_rib_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_rib_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteInitializeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_rib_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteInitializeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_rib_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteCleanupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_rib_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteCleanupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_rib_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_rib_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_rib_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_rib_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteSetOperResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_rib_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_rib_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_rib_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteSubscribePolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_rib_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteSubscribeFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_rib_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteSubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_rib_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteSubscribeEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_routing_rib_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteSubscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_jnx_routing_rib_service_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_jnx_routing_rib_service_proto_goTypes,
		DependencyIndexes: file_jnx_routing_rib_service_proto_depIdxs,
		EnumInfos:         file_jnx_routing_rib_service_proto_enumTypes,
		MessageInfos:      file_jnx_routing_rib_service_proto_msgTypes,
	}.Build()
	File_jnx_routing_rib_service_proto = out.File
	file_jnx_routing_rib_service_proto_rawDesc = nil
	file_jnx_routing_rib_service_proto_goTypes = nil
	file_jnx_routing_rib_service_proto_depIdxs = nil
}
